{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8a04919d_9483480a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 49
      },
      "lineNbr": 0,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2023-02-23T19:32:54Z",
      "side": 1,
      "message": "friendly ping",
      "revId": "7633abfcfc1dfa0fffea7715b212431d01389e74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ea5fd4d_62fd12d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 49
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-23T19:59:03Z",
      "side": 1,
      "message": "From looking at this, it still hasn\u0027t addressed the documented problem of GPIO not being an appropriate abstraction for dbus.  The title of this commit still states \"to report gpio status to dbus\" which is something that is documented as a no-go design pattern in the docs repo.  If you disagree with that, the first step would be to get the docs repo updated, and get general agreement on that.  More likely would be that this needs to be changed into a slot presence daemon.\n\nPlease note, in openbmc vernacular, GPIO is not a sensor, so the name \"gpiosensor\" also needs corrected everywhere.  I commented this earlier.\n\nThis is likely why you haven\u0027t seen replies here, because the underlying design problems still haven\u0027t been addressed, and fall counter to documented anti patterns, without any discussion of those documented anti-patterns, or why this should be accepted in opposition to them.",
      "parentUuid": "8a04919d_9483480a",
      "revId": "7633abfcfc1dfa0fffea7715b212431d01389e74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5c9078c_74d8b3e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 49
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-24T01:07:43Z",
      "side": 1,
      "message": "Can we please drop \"GPIO\" from the name of the daemon? \"presencesensor\" is enough. Let\u0027s not give overly constrained impressions about what are implementation details.",
      "revId": "7633abfcfc1dfa0fffea7715b212431d01389e74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62fb244c_47782f59",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 49
      },
      "lineNbr": 45,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-02-23T20:28:15Z",
      "side": 1,
      "message": "This seems like a poor overloading of Inventory.Item.  A GPIO isn\u0027t an Inventory-Item.  Your GPIO is always \"present\" so the Present property is describing something different than what everyone would naturally expect.  I strongly suggest not trying to overload an existing interface into something more generic than it was intended to be.  This either:\n\n1. Forces everyone to start coding up special behavior to understand your free-form PrettyName strings (which is an anti-pattern).\n\n2. Causes unforeseen side-effects, such as users pondering why they have \"Not Present\" hardware when they interrogate Redfish and get an automatically generated Redfish item from your Inventory.Item.",
      "revId": "7633abfcfc1dfa0fffea7715b212431d01389e74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07248fa6_836466a5",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 49
      },
      "lineNbr": 45,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2023-02-28T17:34:35Z",
      "side": 1,
      "message": "After reading about https://github.com/openbmc/docs/blob/master/anti-patterns.md#dbus-interface-representing-gpios I think what I need to do is redo this as slot presence daemon instead of gpio presence daemon. For the interfaces, it looks like I am using the Inventory.Item interface incorrectly. Would you suggest what are the correct interface and variables to implement for slot presence? For example, does the follow combination looks correct?\n```\nxyz.openbmc_project.state.decorator.Availability\nxyz.openbmc_project.Inventory.Decorator.UniqueIdentifier\nxyz.openbmc_project.Inventory.Connector.Slot\n```\n\nAvailability is boolean. UniqueIdentifier is the name for the cable (e.g. cdfp). Slot is empty interface indicating this is slot inventory.",
      "parentUuid": "62fb244c_47782f59",
      "revId": "7633abfcfc1dfa0fffea7715b212431d01389e74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9d7cef7_a0eb8ac1",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 49
      },
      "lineNbr": 45,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-02-28T20:11:52Z",
      "side": 1,
      "message": "UniqueIdentifier appears to be intended for UUID/GUID-type information, based on the commit message history, but I don\u0027t know why they didn\u0027t leverage Common.UUID for that.  You might want to look at LocationCode?\n\nConnector.Slot seems reasonable.\n\nI don\u0027t know if Availability or OperationalStatus is more appropriate here.  You\u0027ll probably want to look into other usages of both of these if you go that route.",
      "parentUuid": "07248fa6_836466a5",
      "revId": "7633abfcfc1dfa0fffea7715b212431d01389e74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}