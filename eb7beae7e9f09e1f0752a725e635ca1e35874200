{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cbf8b532_e3ebbc25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-08-03T22:55:38Z",
      "side": 1,
      "message": "This fixes TachSensor similar to what was recently done for HwmonTempSensor.\n",
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c08939a3_54d35764",
        "filename": "include/TachSensor.hpp",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-08-04T00:31:04Z",
      "side": 1,
      "message": "rm void",
      "range": {
        "startLine": 78,
        "startChar": 19,
        "endLine": 78,
        "endChar": 23
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3149856_b1c208d1",
        "filename": "include/TachSensor.hpp",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-08-04T03:14:47Z",
      "side": 1,
      "message": "I copied this from HwmonTempSensor and wanted to maintain the consistent style. (And I prefer using \"void\" to indicate a function that takes no arguments.)",
      "parentUuid": "c08939a3_54d35764",
      "range": {
        "startLine": 78,
        "startChar": 19,
        "endLine": 78,
        "endChar": 23
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d9a296d_43044fc7",
        "filename": "include/TachSensor.hpp",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-05T15:34:52Z",
      "side": 1,
      "message": "The coding standard is pretty clear on this one:\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rl-void",
      "parentUuid": "b3149856_b1c208d1",
      "range": {
        "startLine": 78,
        "startChar": 19,
        "endLine": 78,
        "endChar": 23
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d65fa795_da856708",
        "filename": "include/TachSensor.hpp",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-08-05T15:44:07Z",
      "side": 1,
      "message": "nice.",
      "parentUuid": "1d9a296d_43044fc7",
      "range": {
        "startLine": 78,
        "startChar": 19,
        "endLine": 78,
        "endChar": 23
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa9841f5_e975f05d",
        "filename": "include/TachSensor.hpp",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-08-06T07:29:04Z",
      "side": 1,
      "message": "OK, you convinced me, I changed it, see next patchset. However, there are lots of places in the existing code (not touched by this patch) that use `(void)` to indicate a function that takes no arguments. Those should probably get an additional patch, to clean up all this usage.",
      "parentUuid": "d65fa795_da856708",
      "range": {
        "startLine": 78,
        "startChar": 19,
        "endLine": 78,
        "endChar": 23
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b0c649d_6ee561f7",
        "filename": "include/TachSensor.hpp",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-06T16:25:52Z",
      "side": 1,
      "message": "Feel free to push a patch so we can be more consistent, or I can add it to my list of things to clean up.",
      "parentUuid": "fa9841f5_e975f05d",
      "range": {
        "startLine": 78,
        "startChar": 19,
        "endLine": 78,
        "endChar": 23
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ddeaf2c_f580af22",
        "filename": "src/FanMain.cpp",
        "patchSetId": 1
      },
      "lineNbr": 495,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-08-05T15:44:07Z",
      "side": 1,
      "message": "is this needed?\n\nI thought it would be implicit.",
      "range": {
        "startLine": 493,
        "startChar": 12,
        "endLine": 495,
        "endChar": 24
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b27b783d_e819bd68",
        "filename": "src/FanMain.cpp",
        "patchSetId": 1
      },
      "lineNbr": 495,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2022-08-05T17:25:16Z",
      "side": 1,
      "message": "This ensures the order - old sensor destructs before creating new one.\nOtherwise, old sensor destructs after new sensor is created and there will be two objects with same name on the dbus, which can cause undefined behavior.",
      "parentUuid": "1ddeaf2c_f580af22",
      "range": {
        "startLine": 493,
        "startChar": 12,
        "endLine": 495,
        "endChar": 24
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd59e427_41bd2a06",
        "filename": "src/FanMain.cpp",
        "patchSetId": 1
      },
      "lineNbr": 495,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-05T18:05:48Z",
      "side": 1,
      "message": "The problem here is that:\n1. New sensor constructed\n2. Old sensor destroyed\n3. New sensor std::move()ed into map\n\nmeans that between 1 and 2, because there\u0027s shared resources between them (if it\u0027s the same object) stuff goes wrong in a hurry.  The order we have to have is\n\n1. Old sensor destroyed\n2. New sensor constructed\n3. New sensor std::moved()ed into map\n\nIn theory this is possible with emplace and std::piecewise, but getting that right is waaaaaaaay more subtle in code, and very likely to go wrong in non-obvious ways, so we do it explicitly like this so there\u0027s no way to make a mistake.",
      "parentUuid": "b27b783d_e819bd68",
      "range": {
        "startLine": 493,
        "startChar": 12,
        "endLine": 495,
        "endChar": 24
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61401151_b93d309c",
        "filename": "src/FanMain.cpp",
        "patchSetId": 1
      },
      "lineNbr": 495,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-08-05T18:47:13Z",
      "side": 1,
      "message": "got it. Thanks.",
      "parentUuid": "dd59e427_41bd2a06",
      "range": {
        "startLine": 493,
        "startChar": 12,
        "endLine": 495,
        "endChar": 24
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dab63639_e239ebd7",
        "filename": "src/FanMain.cpp",
        "patchSetId": 1
      },
      "lineNbr": 495,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-08-06T07:29:04Z",
      "side": 1,
      "message": "Yes, this got me as well earlier. I like explicitly setting it to nullptr, to make sure the old is blown away first, before creating the new, as Ed said.",
      "parentUuid": "61401151_b93d309c",
      "range": {
        "startLine": 493,
        "startChar": 12,
        "endLine": 495,
        "endChar": 24
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11bc82b5_199e42ac",
        "filename": "src/TachSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-08-04T00:31:04Z",
      "side": 1,
      "message": "rm for consistency",
      "range": {
        "startLine": 117,
        "startChar": 55,
        "endLine": 117,
        "endChar": 60
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6094e647_543cb2d0",
        "filename": "src/TachSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-08-04T03:14:47Z",
      "side": 1,
      "message": "Same, I copied this from HwmonTempSensor and wanted to maintain the consistent style. Also, I think including \"std::\" is clearer.",
      "parentUuid": "11bc82b5_199e42ac",
      "range": {
        "startLine": 117,
        "startChar": 55,
        "endLine": 117,
        "endChar": 60
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b05b13a_db558ec1",
        "filename": "src/TachSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-05T15:34:52Z",
      "side": 1,
      "message": "I have no strong opinion here;  We have both, they\u0027re both pretty clear, and the coding standard says nothing about using one or the other.  Unless the author wants to change it, I\u0027m fine with it.",
      "parentUuid": "6094e647_543cb2d0",
      "range": {
        "startLine": 117,
        "startChar": 55,
        "endLine": 117,
        "endChar": 60
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13006083_f5950995",
        "filename": "src/TachSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-08-05T15:44:07Z",
      "side": 1,
      "message": "feel free to leave it as is.",
      "parentUuid": "4b05b13a_db558ec1",
      "range": {
        "startLine": 117,
        "startChar": 55,
        "endLine": 117,
        "endChar": 60
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0d289dc_eb94e9c3",
        "filename": "src/TachSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-08-04T00:31:04Z",
      "side": 1,
      "message": "do we have to check the data length?",
      "range": {
        "startLine": 170,
        "startChar": 33,
        "endLine": 170,
        "endChar": 59
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5e5f7fa_d429d473",
        "filename": "src/TachSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-08-04T03:14:47Z",
      "side": 1,
      "message": "I don\u0027t believe so. readBuf is std::array\u003cchar, 128\u003e and std::array is smart enough to know its own size (I think), unlike classic C arrays. The buffer is a boost::asio::buffer which is a view that also knows its own size, and it is passed into boost::asio::random_access_file::async_read_some_at() which fills in the buffer. The original code in HwmonTempSensor did not do this, so if it\u0027s a bug, it is a bug in both places.",
      "parentUuid": "f0d289dc_eb94e9c3",
      "range": {
        "startLine": 170,
        "startChar": 33,
        "endLine": 170,
        "endChar": 59
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39c8d413_0ba383ac",
        "filename": "src/TachSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-05T15:34:52Z",
      "side": 1,
      "message": "\u003e std::array is smart enough to know its own size (I think), unlike classic C arrays.\n\noperator[] on std::array does not enforce size limits.\n\nWith that said, josh is right, technically the size was already passed into boost, which does know the size, and will never return a value thats greater than 128.  With that said, in this context, that part isn\u0027t clear, because we\u0027re one function deep.\n\nI wonder if this function should be passed in a std::span from the calling function so that this pointer arithmetic is done in the caller, which is guaranteed to ensure that it can\u0027t run off the end.\n\nI\u0027m probably fine with what\u0027s there;  it\u0027s unlikely to be used wrong, and the code itself is correct, ever if it\u0027s a little unweildy, and relies on boost to do the right thing.",
      "parentUuid": "d5e5f7fa_d429d473",
      "range": {
        "startLine": 170,
        "startChar": 33,
        "endLine": 170,
        "endChar": 59
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "518ddfbf_aff7f940",
        "filename": "src/TachSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2022-08-06T07:29:04Z",
      "side": 1,
      "message": "OK, I will leave it unchanged, for now. (If we put in error-catching here, and we do encounter something that\u0027s over 128 bytes, how should it be handled? Immediately abort?) If we make a change here, we will need to change it in HwmonTempSensor also (and perhaps other places that have the same usage) to be consistent.",
      "parentUuid": "39c8d413_0ba383ac",
      "range": {
        "startLine": 170,
        "startChar": 33,
        "endLine": 170,
        "endChar": 59
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7368aee2_e5a7dfb5",
        "filename": "src/TachSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-06T16:25:52Z",
      "side": 1,
      "message": "\u003e OK, I will leave it unchanged, for now. (If we put in error-catching here, and we do encounter something that\u0027s over 128 bytes, how should it be handled?\n\nMy suggestion was to not do length checking here, move it to the calling scope, by changing the argument to a std::span, which, in the calling scope, doesn\u0027t need length checked, because we know the buffer we passed in.\n\n\u003e Immediately abort?) If we make a change here, we will need to change it in HwmonTempSensor also (and perhaps other places that have the same usage) to be consistent.\n\nACK.",
      "parentUuid": "518ddfbf_aff7f940",
      "range": {
        "startLine": 170,
        "startChar": 33,
        "endLine": 170,
        "endChar": 59
      },
      "revId": "eb7beae7e9f09e1f0752a725e635ca1e35874200",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}