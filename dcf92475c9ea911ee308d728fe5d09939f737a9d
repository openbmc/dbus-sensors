{
  "comments": [
    {
      "key": {
        "uuid": "3e4a48c6_e9642f2b",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-10-25T16:08:03Z",
      "side": 1,
      "message": "I suspect these need to be combined into a single \"hasThresholdInterface\" method, that accepts an enum for the level (we already have the enum).\n\nSimply continuing to make more of these per type gets messy in a hurry.",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 132,
        "endChar": 63
      },
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a5f911d_44890dd5",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-10-20T11:52:56Z",
      "side": 1,
      "message": "Can we DRY up all this logic?  Optionally you could look at what was done in phosphor-virtual-sensors because there we implemented a small template class to abstract this and make the inline code much less cluttered.\n\n// optionally turn this into an unordered_map-lookup.\nswitch (threshold.level) {\n    case Critical:\n        iface \u003d thresholdInterfaceCritical;\n        level \u003d \"Critical\";\n        break;\n\n    case Warning:\n        iface \u003d thresholdInterfaceWarning;\n        level \u003d \"Warning\";\n        break;\n\n    ....\n}\nalarm \u003d level + \"Alarm\";\nif (direction \u003d\u003d HIGH) {\n    level +\u003d \"High\";\n    alarm +\u003d \"High\";\n} else {\n    level +\u003d \"Low\";\n    alarm +\u003d \"Low\";\n}",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 299,
        "endChar": 13
      },
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5f93dad_d9aebee3",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 1000546
      },
      "writtenOn": "2021-10-20T12:09:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3a5f911d_44890dd5",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 299,
        "endChar": 13
      },
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5490ee1_3a680dec",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 1000546
      },
      "writtenOn": "2021-10-22T15:12:05Z",
      "side": 1,
      "message": "If we go with template class, we need to refactor the code and code changes will be more. we need to change the places where we used the threshold levels, properties and interfaces. Optionally, code changes are minimal in the map lookup. just need to lookup the interfaces, properties, level based on the threshold levels and get those values from map.\n\nCould you please suggest the better approach to follow.",
      "parentUuid": "d5f93dad_d9aebee3",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 299,
        "endChar": 13
      },
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef810598_62a3474c",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-10-22T20:36:41Z",
      "side": 1,
      "message": "I\u0027m not entirely sure what your asking.\n\n\u003e If we go with template class, we need to refactor the code and code changes will be more.\n\nMinimizing the amount of code touched is not something we should optimize for; improving the readability and maintainability  is.  Which ever approach is more readable is probably what I\u0027d go for.\n\nIf you are going to do refactoring, it might be helpful to do the refactoring commit first and then add your new threshold feature on top of the refactored code.",
      "parentUuid": "a5490ee1_3a680dec",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 299,
        "endChar": 13
      },
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "520e9ae1_63b78220",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 1000546
      },
      "writtenOn": "2021-10-23T05:40:16Z",
      "side": 1,
      "message": "Thanks Patrick. I will refactor the code and commit first. then will add this feature.",
      "parentUuid": "ef810598_62a3474c",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 299,
        "endChar": 13
      },
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c3dc8b1_162a4220",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-10-25T16:08:03Z",
      "side": 1,
      "message": "+1 to patricks comment, especially about \"Minimizing the amount of code touched is not something we should optimize for\"\n\nIt was pointed out in another review that this code would need to be refactored to support more than two interfaces, and we shouldn\u0027t just be adding to the existing so hopefully this isn\u0027t a surprise.",
      "parentUuid": "520e9ae1_63b78220",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 299,
        "endChar": 13
      },
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe884ca4_730e0d30",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 351,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-10-20T11:52:56Z",
      "side": 1,
      "message": "At some point I wonder if it is useful to have N variables for each threshold or if you should hold them in an array/vector.",
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ad54507_d35eab1b",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 351,
      "author": {
        "id": 1000546
      },
      "writtenOn": "2021-10-20T12:09:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fe884ca4_730e0d30",
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf2e65ce_c6bc62ca",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-10-20T11:52:56Z",
      "side": 1,
      "message": "Can you capture this in a variable?  It looks relatively expensive.",
      "range": {
        "startLine": 137,
        "startChar": 17,
        "endLine": 138,
        "endChar": 49
      },
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23dc6bed_0a80bd96",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1000546
      },
      "writtenOn": "2021-10-20T12:09:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bf2e65ce_c6bc62ca",
      "range": {
        "startLine": 137,
        "startChar": 17,
        "endLine": 138,
        "endChar": 49
      },
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e884d980_d5795e7b",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-10-20T11:52:56Z",
      "side": 1,
      "message": "Suggest DRYing this out also.",
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45496e20_ab1df31e",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 1000546
      },
      "writtenOn": "2021-10-20T12:09:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e884d980_d5795e7b",
      "revId": "dcf92475c9ea911ee308d728fe5d09939f737a9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}