{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "80d9502a_aa649b66",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-10-31T19:46:16Z",
      "side": 1,
      "message": "We should be able to read the current state before the polling. Have you looked into read line status in constructor?",
      "range": {
        "startLine": 16,
        "startChar": 3,
        "endLine": 18,
        "endChar": 41
      },
      "revId": "1f73ea1d77b5c3a876e65b472f13b546cd9411a4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adab4ae1_0cb18313",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-11-01T02:09:31Z",
      "side": 1,
      "message": "We can, but I see that it makes this type stand out from the others because they should all be able to call readSensor() as their own way to read. Moreover, I think let them 3 all use timer polling will make pollSensorStatus() to be implemented by the base class instead of being overriden by the 3 and also get rid of the need to read the intial state.\n\nI\u0027m not sure if there will be other types coming that prefer another method to poll over using timer. Do you suggest that I should leave it like that and just read the initial state for this type in its constructor?",
      "parentUuid": "80d9502a_aa649b66",
      "range": {
        "startLine": 16,
        "startChar": 3,
        "endLine": 18,
        "endChar": 41
      },
      "revId": "1f73ea1d77b5c3a876e65b472f13b546cd9411a4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f28b567_4a517181",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-11-08T22:40:30Z",
      "side": 1,
      "message": "I do think for system implemented the intrusion with GPIO and supports interrupt. Take advantage of the hardware capability makes the code more efficient.\n\n\u003e make pollSensorStatus() to be implemented by the base class instead of being overriden by the 3\n\nI don\u0027t understand why it can not be only overridden by GPIOSensor type",
      "parentUuid": "adab4ae1_0cb18313",
      "range": {
        "startLine": 16,
        "startChar": 3,
        "endLine": 18,
        "endChar": 41
      },
      "revId": "1f73ea1d77b5c3a876e65b472f13b546cd9411a4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82fc3054_51e34f69",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-11-09T10:04:39Z",
      "side": 1,
      "message": "You\u0027re right about the hw ability we should enlist. Updated to just initially update value for GPIO type and let pollSensorStatus be overridden by the GPIO class only, other classes will directly use the definition in the base class.",
      "parentUuid": "3f28b567_4a517181",
      "range": {
        "startLine": 16,
        "startChar": 3,
        "endLine": 18,
        "endChar": 41
      },
      "revId": "1f73ea1d77b5c3a876e65b472f13b546cd9411a4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4bd5717_a0e6a3bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2023-11-01T02:51:10Z",
      "side": 1,
      "message": "The change in GPIO reading from event to polling looks good for me. It is the sensor, not the signal, therefore, we don\u0027t have to monitor the GPIO\u0027s events.",
      "revId": "1f73ea1d77b5c3a876e65b472f13b546cd9411a4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "485f0630_93af7fc3",
        "filename": "src/ChassisIntrusionSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1001496
      },
      "writtenOn": "2023-11-03T16:13:02Z",
      "side": 1,
      "message": "Please remove commented code",
      "revId": "1f73ea1d77b5c3a876e65b472f13b546cd9411a4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f3e8fdc_94480bb1",
        "filename": "src/ChassisIntrusionSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-11-09T10:04:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "485f0630_93af7fc3",
      "revId": "1f73ea1d77b5c3a876e65b472f13b546cd9411a4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ca8ed15_2cc752c8",
        "filename": "src/ChassisIntrusionSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 211,
      "author": {
        "id": 1001322
      },
      "writtenOn": "2023-11-06T08:31:19Z",
      "side": 1,
      "message": "Please add a precise error message which is easily understandable",
      "revId": "1f73ea1d77b5c3a876e65b472f13b546cd9411a4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84bf10f1_d0802e93",
        "filename": "src/ChassisIntrusionSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 211,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-11-09T10:04:39Z",
      "side": 1,
      "message": "This one is from the previous commit so I didn\u0027t change it here.",
      "parentUuid": "2ca8ed15_2cc752c8",
      "revId": "1f73ea1d77b5c3a876e65b472f13b546cd9411a4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64f37bab_ac40b92e",
        "filename": "src/ChassisIntrusionSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 289,
      "author": {
        "id": 1001322
      },
      "writtenOn": "2023-11-06T08:31:19Z",
      "side": 1,
      "message": "autoRearm : can you name it which is understandable? What will this value signify?",
      "revId": "1f73ea1d77b5c3a876e65b472f13b546cd9411a4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e43a062_114bf521",
        "filename": "src/ChassisIntrusionSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 289,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-11-09T10:04:39Z",
      "side": 1,
      "message": "This one is from the previous commit also (https://github.com/openbmc/dbus-sensors/commit/b318dcaeaf0e847b6f0e2bc9365873ebe4e5dabd) which adds the Rearm property. Can you please refer to that commit which tells more about the definition. To sum up, it shows whether we have to rearm the sensor after intrusion or let it rearm automatically when the chassis cover is closed again.",
      "parentUuid": "64f37bab_ac40b92e",
      "revId": "1f73ea1d77b5c3a876e65b472f13b546cd9411a4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}