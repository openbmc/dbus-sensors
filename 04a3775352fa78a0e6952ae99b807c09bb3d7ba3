{
  "comments": [
    {
      "key": {
        "uuid": "4dd50d2b_73040508",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 23,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-12-16T05:53:35Z",
      "side": 1,
      "message": "Seems like an odd place to link. I feel like it would be more reliable to point to the actual git repo?\n\nhttps://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git/",
      "range": {
        "startLine": 23,
        "startChar": 33,
        "endLine": 23,
        "endChar": 79
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a36c853_e2dec7ff",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 60,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-08T20:45:49Z",
      "side": 1,
      "message": "This daemon should not be part of asserting LEDs.  There\u0027s already an LED daemon.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 55
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7b72256_24481a33",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 71,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-08T20:45:49Z",
      "side": 1,
      "message": "Generaly we don\u0027t separate \"Class\" and \"Type\".  There\u0027s a couple cases where we do it for devices that support the same protocol, but need different read modes, but that\u0027s not this case.\n\nIn this case, \"Type\" should be \"GpioCablePresence\" and Class should be deleted.",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 71,
        "endChar": 23
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ba2ac24_91931490",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 73,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-08T20:45:49Z",
      "side": 1,
      "message": "Please check and verify that this is the same way (name and casing) we represent polarity in other places.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 31
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cec11087_975e7ca0",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-08T20:45:49Z",
      "side": 1,
      "message": "Generally this daemon wouldn\u0027t be responsible for publishing the item interface itself, it would only publish the manufacturer and part nubmer interfaces that entity-manager would then expose.  Your EM config file would likely not have any exposes in it at this point.",
      "range": {
        "startLine": 87,
        "startChar": 27,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ce3f834_b3342a9e",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-12-08T21:15:39Z",
      "side": 1,
      "message": "So EM publishes the config for this daemon to consume (gpio line, name, etc) then this daemon in turns publishes mfg/PN..\nand then EM in turn probes off this and publishes another inventory item decorated with the item interface (specified via json config)..\n\nand then this daemon mutates present via d-bus?\n\nIf I understand correctly : that seems really complex in comparison to this daemon just owning the item interface. All in the name of having a single daemon manage inventories?\n\nIf I am mis-interpreting your comment: can you elaborate please?",
      "parentUuid": "cec11087_975e7ca0",
      "range": {
        "startLine": 87,
        "startChar": 27,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fada31f_9d0a1283",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:43:26Z",
      "side": 1,
      "message": "\u003e So EM publishes the config for this daemon to consume (gpio line, name, etc) then this daemon in turns publishes mfg/PN..\n\u003e and then EM in turn probes off this and publishes another inventory item decorated with the item interface (specified via json config)..\n\nYou got it.\n\n\u003e \n\u003e and then this daemon mutates present via d-bus?\n\nToday, present isn\u0027t really implemented in entity-manager (all things are implicitly present by existing).  A \"Not present\" thing would be an unfilled slot, which we don\u0027t really have an abstraction for today, but vijay is looking at it for PCIe.\n\n\u003e \n\u003e If I understand correctly : that seems really complex in comparison to this daemon just owning the item interface. All in the name of having a single daemon manage inventories?\n\nIt\u0027s not about having a single daemon manage inventory (although that\u0027s a byproduct).  It\u0027s about being able to enable model-specific hacks across hardware in one place, as well as being able to publish the containedby and connected associations (and the equivalent Redfish links).\n\n3 weeks from now, when we figure out that manufacturer XYZ module has some crazy behavior we need to workaround, we have one place where we can enable that workaround.\n\n\u003e \n\u003e If I am mis-interpreting your comment: can you elaborate please?",
      "parentUuid": "7ce3f834_b3342a9e",
      "range": {
        "startLine": 87,
        "startChar": 27,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b01757b2_37aadc12",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-12-15T16:38:24Z",
      "side": 1,
      "message": "Okay, let\u0027s assume EM is responsible for the creation of the item interface.\n\nWouldn\u0027t it be better for EM to unconditionally publish a cable object with an item interface based on a FRU associated with the board?\n\nThen gpio sensing daemon can mutate present based on the config provided by EM.\n\nThe point being, we need it explicitly stated that a cable is absent ..e.g via the Present property in the Item interface.\n\nOne motivating use case for this is that this is how the discrete events in a cable presence entry in IPMI figures out which bits to set.\n\nAnother motivating use case is that the LED daemon needs to look at a specific property to determine whether it should blink or not (could be done by searching for the presence or absence of a dbus-object but I find that approach very clunky)",
      "parentUuid": "1fada31f_9d0a1283",
      "range": {
        "startLine": 87,
        "startChar": 27,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "754bbd05_1212709a",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-12-16T05:53:35Z",
      "side": 1,
      "message": "\u003e Today, present isn\u0027t really implemented in entity-manager (all things are implicitly present by existing)\n\nThe refactor that I did where I pulled out PerformProbe and PerformScan was the start of me trying to understand how to make EM pay attention to the Present property, so I have some desire to see it implemented.\n\n\u003e A \"Not present\" thing would be an unfilled slot, which we don\u0027t really have an abstraction for today, but vijay is looking at it for PCIe.\n\nThis is also something I\u0027ve concerned myself with: I modeled this kind of thing with Connectors and PolledDevicePresence classes in platform-fru-detect:\n\n* https://github.com/ibm-openbmc/platform-fru-detect/blob/5e83e98f9a8476e61ad464b51dac3d4120de47b7/src/platform.hpp#L27-L62\n* https://github.com/ibm-openbmc/platform-fru-detect/blob/5e83e98f9a8476e61ad464b51dac3d4120de47b7/src/platform.hpp#L91-L223\n\nIt\u0027d be great to see support in EM for the concept.\n\nI\u0027d like to delete all the code in platform-fru-detect by having equivalent functionality in EM. platform-fru-detect is my executable mental model of how our hardware works and I hope to use that to help translate some of the concepts into something EM can represent.",
      "parentUuid": "b01757b2_37aadc12",
      "range": {
        "startLine": 87,
        "startChar": 27,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91d96fce_5c7f2cb7",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 87,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-12-23T00:46:46Z",
      "side": 1,
      "message": "So there were some offline discussions with Ed on how to get EM to publish a dbus object corresponding and then mutate present based on what gpio-presence does.\n\nChu, can you summarize what was discussed in this thread and then update the documentation based on this?\nI think it\u0027s pretty important for users of gpio-presence to understand exactly what is going on: The approach is not obvious.\nAlso it\u0027d be nice to touch on the motivating use case - otherwise others will likely ask the same question I asked, \"Why such a complicated approach?\"",
      "parentUuid": "754bbd05_1212709a",
      "range": {
        "startLine": 87,
        "startChar": 27,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e643becb_505607bf",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 91,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-08T20:45:49Z",
      "side": 1,
      "message": "This should not be a direct translation.  entity-manager configs should own the class of the device and be limited to use cases we know are real Item.* interfaces.",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 69
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63169d51_2c00518a",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 109,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-08T20:45:49Z",
      "side": 1,
      "message": "I see no mention of associations that would show what this is connected to.  That will be required.",
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40035225_b6310532",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 119,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-08T20:45:49Z",
      "side": 1,
      "message": "Lets leave this off until we have use cases.  Riser cards and drives already have support in other applications, and while this might be a good use of it, lets evaluate it when the time comes.  Riser cards and drives have the complexity that they might have both a FRU and a Gpio, so another design is somewhat needed to figure out how to do the \"merge\"",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 119,
        "endChar": 50
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3559fe5c_09ddc4a0",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 119,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-12-16T05:53:35Z",
      "side": 1,
      "message": "I want to get rid of my pile of hacks here:\n\nhttps://github.com/ibm-openbmc/platform-fru-detect\n\nThe drive presence is exposed by GPIOs that are connected to PCA9552s that are are on pluggable cards. There\u0027s no way for this arrangement to have a statically declared configuration. This sounds like a step in the direction of enabling my use case in EM?",
      "parentUuid": "40035225_b6310532",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 119,
        "endChar": 50
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22f67c5b_34ebd766",
        "filename": "docs/gpio-based-presence-detection.md",
        "patchSetId": 31
      },
      "lineNbr": 129,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-08T20:45:49Z",
      "side": 1,
      "message": "Remove.",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 129,
        "endChar": 21
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48851375_a04732c6",
        "filename": "include/GPIOPresenceSensor.hpp",
        "patchSetId": 31
      },
      "lineNbr": 47,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "Most of these variables are only used in one place.  Please inline them when there\u0027s only one use.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 47,
        "endChar": 0
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dea63e10_587490df",
        "filename": "include/GPIOPresenceSensor.hpp",
        "patchSetId": 31
      },
      "lineNbr": 72,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "Please define your variables in the scope where they\u0027re used.  I don\u0027t see any of these used in this file, which means they\u0027re not really in the interfaces for this translation unit, and could easily be in the",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 72,
        "endChar": 73
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "229f22f1_f33a4361",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 31
      },
      "lineNbr": 33,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "Is this necessary?  Doesn\u0027t the RAII objects call this automatically?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 33,
        "endChar": 1
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "927cfbe9_9f3017e7",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 31
      },
      "lineNbr": 53,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "Please remove.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 53,
        "endChar": 0
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3ba58f0_f98d9558",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "These kinds of generic things should be done in generic places, not specific to presence daemon.",
      "range": {
        "startLine": 14,
        "startChar": 2,
        "endLine": 14,
        "endChar": 17
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3c92a5f_3c05d0c1",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 20,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "Use the visitor pattern here.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 41
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "693781fb_40c279a1",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 51,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "there are no dbus interfaces that use int.  This will break when compiled for 64 bit.  Use the visitor pattern we use elsewhere.",
      "range": {
        "startLine": 51,
        "startChar": 28,
        "endLine": 51,
        "endChar": 31
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "870b077f_4b8627db",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 55,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "Considering this case isn\u0027t exceptional, and expected, should we not use exceptions here?",
      "range": {
        "startLine": 55,
        "startChar": 8,
        "endLine": 55,
        "endChar": 63
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cb92d43_b63c6cc7",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 99,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "This is a blocking IO call, which you shouldn\u0027t be doing in an async daemon.  Use async_method_call like others do.",
      "range": {
        "startLine": 99,
        "startChar": 8,
        "endLine": 99,
        "endChar": 37
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37f1ce4d_e93278f7",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 138,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "This name kind of implies that this will be called when an interface is removed, when in reality its registering the onInterfaceRemoved callback.  Maybe setupInterfaceRemoved?",
      "range": {
        "startLine": 138,
        "startChar": 5,
        "endLine": 138,
        "endChar": 23
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "633c49c4_339d382c",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 139,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "There\u0027s only one use of this, can we just inline this callback to call the method that needs called?",
      "range": {
        "startLine": 139,
        "startChar": 24,
        "endLine": 139,
        "endChar": 50
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23160e79_6fb52a5d",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 148,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "Can this just be rolled into the primary callback (inline once the previous comment is done)  Having two levels of lambda is really tough to read, when this is doing something relatively simple.",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 148,
        "endChar": 10
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "660a299a_58bcecf0",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 156,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "Can we do this in one construction, instead of a construct and move?  Basically, move the constructor arguments into the make_unique call.",
      "range": {
        "startLine": 149,
        "startChar": 0,
        "endLine": 156,
        "endChar": 71
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d295a544_45a33e10",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 163,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "This is a little odd that this is reentrant.  That means that when configurations change at runtime, this isn\u0027t going to restart.",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 163,
        "endChar": 34
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b06d5c61_0d7b89c0",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 172,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "nit, take error_code by value.",
      "range": {
        "startLine": 172,
        "startChar": 64,
        "endLine": 172,
        "endChar": 66
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee09f839_ecf03310",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 202,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "use sdbusplus::message::object_path with operator/ to construct this path.",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 202,
        "endChar": 28
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfa915fb_0221e796",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 204,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "This doesn\u0027t look right.  Any new changes made should REPLACE the old config, so I would expect something like\n\ncontroller-\u003eremoveObject(objectPath);\n\nThen construct the new one.\n\nInterfacesAdded can happen multiple times on a startup.",
      "range": {
        "startLine": 204,
        "startChar": 12,
        "endLine": 204,
        "endChar": 45
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d9bcd27_dae2a49f",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 220,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "This isn\u0027t generally something that dbus-sensors daemons publish.",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 220,
        "endChar": 72
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52646ba7_36084334",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 220,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-12-20T17:50:28Z",
      "side": 1,
      "message": "want to clarify: your objection here is the publishing of the item interface and not the \"PrettyName\" property.. right?",
      "parentUuid": "7d9bcd27_dae2a49f",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 220,
        "endChar": 72
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ae7e2c0_99f0e75c",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 222,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "?  Shouldn\u0027t this be true?",
      "range": {
        "startLine": 222,
        "startChar": 70,
        "endLine": 222,
        "endChar": 75
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3456b4d6_f2b75866",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 222,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-12-20T17:50:28Z",
      "side": 1,
      "message": "Chu, correct me if I\u0027m wrong..\n\nbut default state of present is false until the daemon reads a GPIO pin and confirms that the cable (or whatever) is actually present. Then this gets updated to true.",
      "parentUuid": "7ae7e2c0_99f0e75c",
      "range": {
        "startLine": 222,
        "startChar": 70,
        "endLine": 222,
        "endChar": 75
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb0bf158_99b87b0f",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 226,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T17:38:16Z",
      "side": 1,
      "message": "I thought the design doc called for this to be interrupts?",
      "range": {
        "startLine": 226,
        "startChar": 50,
        "endLine": 226,
        "endChar": 58
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b02961e6_623b5c04",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 226,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-12-15T16:38:24Z",
      "side": 1,
      "message": "If we\u0027re going to support interrupts please make it an option to force polling in the EM config and update the design doc appropriately.\n\nSometimes interrupt support isn\u0027t feasible (gpio expander without the interrupt pin connected)",
      "parentUuid": "fb0bf158_99b87b0f",
      "range": {
        "startLine": 226,
        "startChar": 50,
        "endLine": 226,
        "endChar": 58
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "035e7ef0_9cdd06d6",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 226,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-15T22:11:51Z",
      "side": 1,
      "message": "\u003e If we\u0027re going to support interrupts please make it an option to force polling in the EM config and update the design doc appropriately.\n\u003e \n\u003e Sometimes interrupt support isn\u0027t feasible (gpio expander without the interrupt pin connected)\n\n\nInterrupt vs polling should not be system specific.  I\u0027m fine if this wants to poll, I was just asking because the requirements explicitly stated interrupts, so maybe that doc is out of date now?",
      "parentUuid": "b02961e6_623b5c04",
      "range": {
        "startLine": 226,
        "startChar": 50,
        "endLine": 226,
        "endChar": 58
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bb8fbed_1e6dc48d",
        "filename": "src/GPIOPresenceSensorMain.cpp",
        "patchSetId": 31
      },
      "lineNbr": 226,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-12-20T17:50:28Z",
      "side": 1,
      "message": "Okay, Chu - can we see if the gpio subsystem (libgpio) can determine whether a pin supports interrupts or not? \n\nPerhaps - best effort to configure interrupts and if that fails then fall-back to polling?",
      "parentUuid": "035e7ef0_9cdd06d6",
      "range": {
        "startLine": 226,
        "startChar": 50,
        "endLine": 226,
        "endChar": 58
      },
      "revId": "04a3775352fa78a0e6952ae99b807c09bb3d7ba3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}