{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4a027f9a_2b1fabef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2023-04-05T18:08:54Z",
      "side": 1,
      "message": "I think the code change and the explanation for it both make sense.\n\nMy question: If you powered the host back on with no further changes, will thresholds be re-asserted, and the status changed back to \u0027critical\u0027 in the webUI?\n\nBased on my read of surrounding code, I believe the normal threshold behavior will be restored when PowerState-linked sensors have ThresholdTimer::startTimer called after power is restored --and that this change *will not* break normal threshold responses for affected sensors once host power is back on.\n\nCan someone with a better understanding, or hardware to check confirm that this is the case?",
      "revId": "033f8448e2cc71ba14000380a9b87774a28293da",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7d88643_adf593e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-04-05T20:53:41Z",
      "side": 1,
      "message": "```\nMy question: If you powered the host back on with no further changes, will thresholds be re-asserted, and the status changed back to \u0027critical\u0027 in the webUI?\n```\nGenerally it depends on the sensor value at that time.\n\nIf the host is powered off, the value is no longer sampled, and therefore is not checked against its thresholds. This is why we need to disable thresholds manually.\nWhen the host is powered on, the value sampling process starts again, and each value is compared against the thresholds. So as soon as it crosses limits, threshold will be re-asserted.\n\nIn the example described in the commit thresholds correctly re-assert after power off/power on cycle.",
      "parentUuid": "4a027f9a_2b1fabef",
      "revId": "033f8448e2cc71ba14000380a9b87774a28293da",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0c2d655_a972f1da",
        "filename": "src/sensor.hpp",
        "patchSetId": 1
      },
      "lineNbr": 495,
      "author": {
        "id": 1000934
      },
      "writtenOn": "2023-04-10T03:17:56Z",
      "side": 1,
      "message": "This change sounds reasonable, but I think the result in sel event log might looks weird.\n\nCould you share the result in command \"ipmitool sel elist\"?\n\nThanks.",
      "range": {
        "startLine": 495,
        "startChar": 39,
        "endLine": 495,
        "endChar": 44
      },
      "revId": "033f8448e2cc71ba14000380a9b87774a28293da",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b161b620_bfcd5929",
        "filename": "src/sensor.hpp",
        "patchSetId": 1
      },
      "lineNbr": 495,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-04-10T08:00:55Z",
      "side": 1,
      "message": "I have a patch for the `phosphor-sel-logger`, which I\u0027m planning to upstream depending on the reaction to this patchset.\n\nThe commit message have examples of the SEL messages before/after, so I think I just post it for you:\n```\nCorrect message for threshold events\n\nThresholds can be deasserted not only because of the actual sensor\ndata, but also because of the change in the general system state.\nFor example some sensors can be configured to be measured only when\nthe system is powered on.\nIn such cases current messages can be confusing:\n\"PVPP_ABCD_CPU2 sensor crossed a critical low threshold going high.\nReading\u003d0.033000 Threshold\u003d2.410000\".\nReplace message template to be more generic to cover discussed cases:\n\"PVPP_ABCD_CPU2 critical low threshold deassert.\nReading\u003d0.033000 Threshold\u003d2.410000\".\n\nSigned-off-by: Konstantin Aladyshev \u003caladyshev22@gmail.com\u003e\n---\n include/threshold_event_monitor.hpp | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/include/threshold_event_monitor.hpp b/include/threshold_event_monitor.hpp\nindex ba2a20b..5d8583e 100644\n--- a/include/threshold_event_monitor.hpp\n+++ b/include/threshold_event_monitor.hpp\n@@ -277,8 +277,8 @@ inline static sdbusplus::bus::match_t startThresholdAssertMonitor(\n             }\n         }\n\n-        std::string journalMsg(std::string(sensorName) + \" sensor crossed a \" +\n-                               threshold + \" threshold going \" + direction +\n+        std::string journalMsg(std::string(sensorName) + \" \" + threshold +\n+                               \" threshold \" + ( assert? \"assert\" : \"deassert\" ) +\n                                \". Reading\u003d\" + std::to_string(assertValue) +\n                                \" Threshold\u003d\" + std::to_string(thresholdVal) +\n                                \".\");\n--\n```",
      "parentUuid": "e0c2d655_a972f1da",
      "range": {
        "startLine": 495,
        "startChar": 39,
        "endLine": 495,
        "endChar": 44
      },
      "revId": "033f8448e2cc71ba14000380a9b87774a28293da",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}