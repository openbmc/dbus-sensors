{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f778fad5_6873145f",
        "filename": "src/nvidia-gpu/NvidiaGpuDevice.cpp",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-01T22:49:44Z",
      "side": 1,
      "message": "Rather than having these all try to update in parallel, does it make more sense for the GPUDevice class to \"own\" the order these things are queried, to ensure that only one is queried at at time?  That might simplify some of the queing operations.\n\nDoesn\u0027t need fixed in this patch.",
      "revId": "170feb5d1e96007b607677a1667c93209066354e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "871cc288_05ab6a6d",
        "filename": "src/nvidia-gpu/NvidiaGpuDevice.cpp",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-07-02T12:59:00Z",
      "side": 1,
      "message": "In ordered to that I think we need some sort of polymorphic container - as member data of the Device class - that contains all Sensor objects of different derived types and to update them we can iterate over that container calling a virtual member function of each object. It would be awkward to do ordered update with current implementation where we have each sensor individually as member data of the Device class.",
      "parentUuid": "f778fad5_6873145f",
      "revId": "170feb5d1e96007b607677a1667c93209066354e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6936848_b15f4674",
        "filename": "src/nvidia-gpu/NvidiaGpuDevice.cpp",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-10T14:58:27Z",
      "side": 1,
      "message": "You\u0027re over thinking it a little:\n\nvoid updateSensors(){\n  updateTempSensors();\n  updatePowerSensors();\n  updateOtherSensors();\n  call timer(updateSensors);\n\n}\\\n\nPlease fix in next patchset.",
      "parentUuid": "871cc288_05ab6a6d",
      "revId": "170feb5d1e96007b607677a1667c93209066354e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebccb0d7_a643f463",
        "filename": "src/nvidia-gpu/NvidiaGpuDevice.cpp",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-07-17T06:22:20Z",
      "side": 1,
      "message": "How is it different from what is implemented currently?",
      "parentUuid": "d6936848_b15f4674",
      "revId": "170feb5d1e96007b607677a1667c93209066354e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdb854f7_c6215ad0",
        "filename": "src/nvidia-gpu/NvidiaGpuEnergySensor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-01T22:49:44Z",
      "side": 1,
      "message": "nit: This seems like a really excessive way to say \"0.0\"",
      "range": {
        "startLine": 38,
        "startChar": 4,
        "endLine": 38,
        "endChar": 40
      },
      "revId": "170feb5d1e96007b607677a1667c93209066354e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15eff760_c4c2a291",
        "filename": "src/nvidia-gpu/NvidiaGpuEnergySensor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-07-02T12:59:00Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "fdb854f7_c6215ad0",
      "range": {
        "startLine": 38,
        "startChar": 4,
        "endLine": 38,
        "endChar": 40
      },
      "revId": "170feb5d1e96007b607677a1667c93209066354e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}