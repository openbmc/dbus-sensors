{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "88b13700_b0de9636",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 241,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-11T04:44:34Z",
      "side": 1,
      "message": "size_t should be passed by value, as should the const double\u0026 value below.",
      "range": {
        "startLine": 241,
        "startChar": 30,
        "endLine": 241,
        "endChar": 37
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "addd723b_1cc2564e",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 241,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2022-02-15T21:15:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "88b13700_b0de9636",
      "range": {
        "startLine": 241,
        "startChar": 30,
        "endLine": 241,
        "endChar": 37
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22ba717a_fcdcba01",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-11T04:49:30Z",
      "side": 1,
      "message": "I don\u0027t see found ever getting set to true?",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 27
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8a51825_225d3ca6",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2022-02-15T21:15:35Z",
      "side": 1,
      "message": "seems that I loose it somewhere",
      "parentUuid": "22ba717a_fcdcba01",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 27
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d5d475d_66af422a",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 249,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2022-02-18T01:04:19Z",
      "side": 1,
      "message": "Check request is different than current value?",
      "range": {
        "startLine": 249,
        "startChar": 16,
        "endLine": 249,
        "endChar": 42
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a891394_179bcc95",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 255,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-11T04:49:30Z",
      "side": 1,
      "message": "The old mechanism that just captured threshold was better than having to search for it.  We should aim to do that still if we can.  Having to search for a threshold is kinda messy, especially when we know exactly what threshold it was when we created it.",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 255,
        "endChar": 9
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf9cee7e_7dff6a4d",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 255,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2022-02-15T21:15:35Z",
      "side": 1,
      "message": "Probably, I can deal without search here for this patch, but in my following proposal (switchable thresholds) this would be required anyway.",
      "parentUuid": "9a891394_179bcc95",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 255,
        "endChar": 9
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc399b3b_1fcbba89",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 257,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-11T04:49:30Z",
      "side": 1,
      "message": "Lets leave this off for now;  I\u0027m happy to entertain this as a request,",
      "range": {
        "startLine": 256,
        "startChar": 0,
        "endLine": 257,
        "endChar": 19
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee7d2904_376c889c",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 257,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2022-02-15T21:15:35Z",
      "side": 1,
      "message": "do you mean, I should not leave TODO item?",
      "parentUuid": "cc399b3b_1fcbba89",
      "range": {
        "startLine": 256,
        "startChar": 0,
        "endLine": 257,
        "endChar": 19
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f67e8cb4_6b799fa1",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-11T04:44:34Z",
      "side": 1,
      "message": "Why did this get moved up?  It seems like we\u0027d want to initalize all the interfaces right next to eachother?",
      "range": {
        "startLine": 294,
        "startChar": 0,
        "endLine": 297,
        "endChar": 9
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df80be48_d0b6587c",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 297,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2022-02-15T21:15:35Z",
      "side": 1,
      "message": "not a functional change, just to group sensorInterface operations",
      "parentUuid": "f67e8cb4_6b799fa1",
      "range": {
        "startLine": 294,
        "startChar": 0,
        "endLine": 297,
        "endChar": 9
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fbf514a_389ecfda",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 328,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-11T04:44:34Z",
      "side": 1,
      "message": "Please abstract this to something approximating findThresholdDirection here https://github.com/openbmc/dbus-sensors/blob/c8fed20b29ec8a33190a02860bfa3b44cfb828ed/src/Thresholds.cpp#L34\n\nAnd put it in the same file to keep all our conversions in one spot.",
      "range": {
        "startLine": 315,
        "startChar": 0,
        "endLine": 328,
        "endChar": 13
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ea9a6a6_020a1081",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 328,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2022-02-15T21:15:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8fbf514a_389ecfda",
      "range": {
        "startLine": 315,
        "startChar": 0,
        "endLine": 328,
        "endChar": 13
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ff9f04d_4019eacc",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 328,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2022-02-18T01:04:19Z",
      "side": 1,
      "message": "Can this be a compile timer check? size of thresholdInterfaces, threshold level enum and constexpr struct thresProp (https://github.com/openbmc/dbus-sensors/blob/master/include/Thresholds.hpp#L133)\nare expected to be consistent.\n1. index of thresholdInterfaces are maps 1:1 threshold level \n2. threshold level enum is 0 - highest consecutive\n3. struct thresProp include one entry for each supported level.\n\nSince Level converts to index for \u003cthresholdIntefaces\u003e, I don\u0027t see added advantage of keeping \"struct thresProp\" to be flexible, where index does not have to match Level. These lookups are not needed if we ensure \"struct thresProp\"\n1. Level match index\n2. Has an entry for each supported Level\n\nThe code would be a lot simpler without all the matching and look up at the cost of ensuring couple const structures are defined correctly.",
      "parentUuid": "6ea9a6a6_020a1081",
      "range": {
        "startLine": 315,
        "startChar": 0,
        "endLine": 328,
        "endChar": 13
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fdbc48d_309f4804",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 350,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-11T04:44:34Z",
      "side": 1,
      "message": "What if both are Nan?  It\u0027s still going to create a threshold.  I realize from some of the other conversations that might be what you want, but for the moment, lets stick a \n\nif (!std::isfinite(thLowValue) \u0026\u0026 !std::Isfinite(thHighValue)){\n   continue;\n}\n\nin there.  creating 5 threshold interfaces for every sensor needs discussed, and it\u0027s a big enough API change, and unrelated enough to this patch (which is just making the dbus interfaces correct) that I\u0027d like to see it in a different patch.  As you\u0027ve written it, it likely going to have some consequences, as it means system designers no longer have the ability to spec which thresholds are supported on which sensors, which might be important, so we\u0027ll need to discuss if we should blanket do this for all systems (which will have some impact) or if this should go in the per-entity configuration information, so component designers have some compile-time control over it.\n\nI\u0027d rather not hold up this patch while that discussion happens.",
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8700c1d_348286e9",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 350,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2022-02-15T21:15:35Z",
      "side": 1,
      "message": "Only in case interface already initialized (not NULL). Probably, good idea would be move entire initialization here. This will reduce code duplication in every constructor, wee just need to pass objServer here.\n\nAnd no, I don\u0027t want to create all 5 interfaces for every sensor yet.",
      "parentUuid": "5fdbc48d_309f4804",
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75ee0fd5_09bf256e",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 350,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2022-02-18T01:04:19Z",
      "side": 1,
      "message": "+1 only create interface if at least one of them not nan",
      "parentUuid": "f8700c1d_348286e9",
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caff0633_14567f67",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 367,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-11T04:44:34Z",
      "side": 1,
      "message": "This is already covered in the propertyAlarm() method.  I suspect we should be using that to avoid duplication of logic.",
      "range": {
        "startLine": 367,
        "startChar": 42,
        "endLine": 367,
        "endChar": 64
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c0a7aa1_d31653ec",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 367,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-11T04:44:34Z",
      "side": 1,
      "message": "These two are essentially the same code, can we loop over something like\n\n\nstd::array\u003cDirection, 2\u003e{Direction::High, Direction::Low} to avoid this duplication?  The only things that I see that are different are about to be using helpers\nSomething like:\n\nfor (Direction dir: std::array\u003cDirection, 2\u003e(Direction::High, Direction::Low)){\n    thresIface-\u003eregister_property(\n        propertyLevel(dir), thHighValue,\n        [\u0026, level, thresSize, label, dir](const double\u0026 request,\n                                          double\u0026 oldValue) {\n            return updateThreshold(level, dir, thresSize,\n                                    label, request, oldValue);\n        });\n    thresIface-\u003eregister_property(propertyAlarm(dir), false);",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 367,
        "endChar": 73
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08cfdd94_99d23606",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 367,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2022-02-15T21:15:35Z",
      "side": 1,
      "message": "I don\u0027t like to use propertyLevel/propertyAlarm here: we will have to run same loop 4 times, while we can do this once. Will it be optimized out at compile time?\nAnd I think, it is not that much of duplication...",
      "parentUuid": "2c0a7aa1_d31653ec",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 367,
        "endChar": 73
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93179d4f_bf9c2509",
        "filename": "include/sensor.hpp",
        "patchSetId": 2
      },
      "lineNbr": 367,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2022-02-18T01:04:19Z",
      "side": 1,
      "message": "How about extend the ThresholdDefinition to add property string array to reflect threshold dbus interface and iterate through the array to call register_property().\nThe added advantage is that we have one central place to define the consts that reflect what is in phosphor-dbus-interfaces for thresholds.\n\nSomething like:\nhttps://github.com/openbmc/dbus-sensors/blob/master/include/Thresholds.hpp#L126\nstruct ThresholdDefinition\n{\n    Level level;\n    uint8_t sevOrder;\n    const char* levelName;\n    std::array\u003cconst char *, 4\u003e propStr;\n\n};\n\nconstexpr static std::array\u003cthresholds::ThresholdDefinition, 5\u003e thresProp \u003d {\n    {{Level::WARNING, 0, \"Warning\", {\"High\", \"Low\", \"AlarmHigh\", AlarmLow\"}},\n ...\n}",
      "parentUuid": "caff0633_14567f67",
      "range": {
        "startLine": 367,
        "startChar": 42,
        "endLine": 367,
        "endChar": 64
      },
      "revId": "4e302b3ced9bcf2c0ee49a3eceb5fd9157bfd55d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}