{
  "comments": [
    {
      "key": {
        "uuid": "15bc8736_5dbbe88c",
        "filename": "include/ExitAirTempSensor.hpp",
        "patchSetId": 16
      },
      "lineNbr": 51,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:19:33Z",
      "side": 1,
      "message": "Is there something unique about ExitAirTempSensor that makes it still require std::enable_shared_from_this()? The other sensor daemons do not.",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20af8383_350450c1",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 16
      },
      "lineNbr": 13,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:19:33Z",
      "side": 1,
      "message": "A forward declaration! :)",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31275f27_1f537698",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 16
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T17:28:40Z",
      "side": 1,
      "message": "I didn\u0027t write it, and it\u0027s a sign that this file needs refactored. ðŸ˜Š\n\nIn theory, I don\u0027t think assertThresholds needs the Sensor object itself, just a couple of fields from it, which would fix this forward declaration.\n\nIt should be noted, this is also clogging up the global namespace, which is equally as bad.\n\n\nps, the irony here is that you actually pointed out the design issue (taking sensor by reference in a timer) that caused this to have to be forward declared.  If this code were submitted today, I probably wouldn\u0027t accept it.",
      "parentUuid": "20af8383_350450c1",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe2c1c54_ab7167df",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 16
      },
      "lineNbr": 13,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-06T10:28:16Z",
      "side": 1,
      "message": "Good to know, makes sense.",
      "parentUuid": "31275f27_1f537698",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfdd4594_33009feb",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 16
      },
      "lineNbr": 152,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:19:33Z",
      "side": 1,
      "message": "What is the lifetime of this? Member variables that are references always make me uneasy. Especially when they are used in a lambda passed elsewhere. Do we guarantee Boost won\u0027t call it after the lifetime ends?",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5cb584c_67361f4b",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 16
      },
      "lineNbr": 152,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T17:28:40Z",
      "side": 1,
      "message": "\u003e What is the lifetime of this?\n\nLonger than the lifetime of the ThresholdTimer class\n\n\u003e Member variables that are references always make me uneasy.\n\nAgreed.  I\u0027m not in love with this one, but this is no worse than it was before, and in normal use (putting a ThresholdTimer within a sensor instance) the lifetimes are correct, even if it\u0027s easy to get wrong if this were a generic thing.  It\u0027s ripe for improvement if you wanted to refactor it.\n\n\u003e Especially when they are used in a lambda passed elsewhere. Do we guarantee Boost won\u0027t call it after the lifetime ends?\n\nYes, this is one of boost asios guarantees.  Some others are:\n1. All async operations callback handlers will be called exactly once per async_* call.\n2. On destruction of the underlying object, the callback will be called from the destructor with an \"operation aborted\" error message.",
      "parentUuid": "bfdd4594_33009feb",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46fa6465_6b267d4a",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 16
      },
      "lineNbr": 152,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-06T10:28:16Z",
      "side": 1,
      "message": "Interesting. As for #2 above, despite the supposed design guarantee, I remember we finding this wasn\u0027t seeming to be happening as intended. In PSUSensor, there were strange crashes/misbehaviors that would happen if the sensors were reloaded during the run, and this was because Boost was calling stale callbacks after their underlying objects had been destroyed. The workaround was to add weak_ptr that would stretch the lifetime if needed, and cleanly let the callback become a no-op once it realized that its underlying object had already been destroyed by the time it was called: https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/30763",
      "parentUuid": "a5cb584c_67361f4b",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d628de8c_f6ab7327",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 16
      },
      "lineNbr": 152,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-09T01:46:57Z",
      "side": 1,
      "message": "\u003e Interesting. As for #2 above, despite the supposed design guarantee, I remember we finding this wasn\u0027t seeming to be happening as intended. In PSUSensor, there were strange crashes/misbehaviors that would happen if the sensors were reloaded during the run, and this was because Boost was calling stale callbacks after their underlying objects had been destroyed.\n\nYep.  The root cause of this is that Sensor is destroyed in the wrong order, and because it owns callbacks on the super class, might get called back on memory that no longer exists.  Having Sensor as a member variable instead of an inherited class actually gives us some ability to fix this, although I suspect fixing the check_thresholds thing probably fixes a lot of stuff.\n\n\u003e The workaround was to add weak_ptr that would stretch the lifetime if needed, and cleanly let the callback become a no-op once it realized that its underlying object had already been destroyed by the time it was called: https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/30763\n\nYep, I recall that fix.  IMO it\u0027s a bit of a bandaid, as the ownership model is still wrong, it\u0027s just no longer fatal with the weak_ptr stuff, and you\u0027re forcing shared ownership on some things that really don\u0027t need it.\n\nOnce this lands, looking at the ownership model is on my short list to go look at here.",
      "parentUuid": "46fa6465_6b267d4a",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "711f57f8_1de532b4",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 16
      },
      "lineNbr": 152,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-02-22T17:10:54Z",
      "side": 1,
      "message": "This is good timing. We discovered crashes from adcsensor due to threshold and threshold timer lifetime issue also. Using the weak_ptr approach fixed it. But the patch was ugly. Refactor and cleanup the ownership would be a cleaner approach.",
      "parentUuid": "d628de8c_f6ab7327",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a8d5f36_e646316f",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 16
      },
      "lineNbr": 152,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-23T23:19:26Z",
      "side": 1,
      "message": "Does this patchset fix them?  Also, good timing is relative, this patchset has been hanging around for a loooooong time.\n\nAny testing you could help give would be great.  I don\u0027t have as many systems as I once did.",
      "parentUuid": "711f57f8_1de532b4",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e76140a6_cab37e9d",
        "filename": "include/sensor.hpp",
        "patchSetId": 16
      },
      "lineNbr": 55,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:19:33Z",
      "side": 1,
      "message": "I like this syntax! Using a lambda inline avoids having to make a dummy function. It also can be replaced, like any other member variable, without having to use inheritance. And good to rename it as well, to make it easy to catch all previous usages.\n\nHowever, shouldn\u0027t there be something like the below in the constructor of each sensor daemon\u0027s WhateverSensor object?\nsensor.checkThresholdsFunc \u003d [this]() { this-\u003echeckThresholds(); };\n\nI see this for most, but not all, sensor daemons. Have all existing usages of checkThresholds() been audited?",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f8711f2_9ffa9e54",
        "filename": "include/sensor.hpp",
        "patchSetId": 16
      },
      "lineNbr": 55,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T17:28:40Z",
      "side": 1,
      "message": "\u003e I like this syntax! Using a lambda inline avoids having to make a dummy function. It also can be replaced, like any other member variable, without having to use inheritance. And good to rename it as well, to make it easy to catch all previous usages.\n\n\u003e \n\u003e However, shouldn\u0027t there be something like the below in the constructor of each sensor daemon\u0027s WhateverSensor object?\n\u003e sensor.checkThresholdsFunc \u003d [this]() { this-\u003echeckThresholds(); };\n\nYes, there should.  If I missed one, it\u0027s a mistake.\n\n\u003e \n\u003e I see this for most, but not all, sensor daemons. Have all existing usages of checkThresholds() been audited?\n\nAt the time I originally authored this patch, I thought I had covered all of them, but it\u0027s quite possible I messed it up somewhere in one of the rebases.  I\u0027ll take another look.",
      "parentUuid": "e76140a6_cab37e9d",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93033c50_9db42e0f",
        "filename": "src/CPUSensorMain.cpp",
        "patchSetId": 16
      },
      "lineNbr": 381,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:19:33Z",
      "side": 1,
      "message": "I\u0027m curious why the new syntax, and why it needs to be laundered through a tuple. What advantage does this bring, versus the increase in the difficulty of understanding what it does?",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5766f4aa_c976b09d",
        "filename": "src/CPUSensorMain.cpp",
        "patchSetId": 16
      },
      "lineNbr": 381,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T17:28:40Z",
      "side": 1,
      "message": "This is a long story, but the short version is:\n\nBecause of the way dbus interfaces work, old sensors with the same name need to be destroyed before the new sensor is created.  Originally this code was something like\n\ngCpuSensors[sensorName] \u003d std::make_unique\u003cCPUSensor\u003e....\n\nWhich is exactly what a sane person would write.  In practice, this caused a really bad bug, where on reconfigure events, dbus would see.\n\nSensor Foo added sensor.value interface\n\nThen later on a reconfigure\nSensor Foo added sensor.value interface\nSensor Foo removed sensor.value interface\n\n\nEven though the sensor is still alive, the second add happened before the first remove, so the mapper removes it, and the sensor disappears.\n\nTo combat this, James wrote the code on the left, which destroys the old object (thus sending the removed events) explicitly before creating the new object.  He only had to do this because him and I stared at the compiler for several hours, and couldn\u0027t figure out the syntax to do an in-place replace of an object, rather than a construct and a move.\n\nThe code below, is the code we couldn\u0027t figure out at the time (turns out it needed c++14).   While complicated, is simpler in execution, and does exactly what we want here, destroys the old sensor object if it exists, and constructs a new one, all in one step.\n\nAs far as why it needs to use tuple, that\u0027s a question for the standards committee.  I\u0027m sure they had their reasons.",
      "parentUuid": "93033c50_9db42e0f",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9cb8012_380bcefd",
        "filename": "src/CPUSensorMain.cpp",
        "patchSetId": 16
      },
      "lineNbr": 381,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-06T10:28:16Z",
      "side": 1,
      "message": "OK, wow, that is pretty deep. Perhaps add the above note in a comment? I didn\u0027t know the below code would make a difference with respect to sequencing:  that it could change how the container works, to destroy the old sensor, and unmap it, then add the new sensor, and map it, in the proper sequence.",
      "parentUuid": "5766f4aa_c976b09d",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ba0db0c_1c61d958",
        "filename": "src/CPUSensorMain.cpp",
        "patchSetId": 16
      },
      "lineNbr": 381,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-09T01:46:57Z",
      "side": 1,
      "message": "I can add a comment.  Technically the old code had a kind of OK comment, so best not to go backwards.\n\nACK.",
      "parentUuid": "f9cb8012_380bcefd",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3255928b_529052fc",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 208,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:19:33Z",
      "side": 1,
      "message": "Does it still require a std::move() of the lambda object, when passing it into setupSensorMatch() here? I am curious why the old code used std::move() but the new code no longer does.",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b2068cb_9ead6890",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 208,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T17:28:40Z",
      "side": 1,
      "message": "in this usage the lambda is already an rvalue.  std::move is meant to turn an lvalue into an rvalue, so wrapping this in std::move does nothing here, except add code.  This throws a warning in clang-tidy, because it\u0027s clear you intended something, but you operated on the wrong thing.\n\nIt should be noted, I really wish they had made this a compiler error in the c++ standard, but I\u0027m sure they had their reasons.",
      "parentUuid": "3255928b_529052fc",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27091f21_3a18ce71",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 208,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-06T10:28:16Z",
      "side": 1,
      "message": "OK, makes sense. The idea of moving (versus copying) was added late in the language\u0027s syntax development, and it shows.",
      "parentUuid": "9b2068cb_9ead6890",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26e22265_dcbec225",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 243,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:19:33Z",
      "side": 1,
      "message": "I\u0027m curious, with all the recent refactoring of pointers into references, should dbusConnection also be similarly refactored?",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69f815bd_b7ad2adc",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 243,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T17:28:40Z",
      "side": 1,
      "message": "if I remember right, dbusConnection is a shared_ptr, because it needs to be shared among all the various sensors in this daemon.  In theory, it\u0027s really a singleton, and we could probably move to a pattern like\n\nstatic DbusConnection\u0026 getDbus(){\n    static DbusConnection;\n    return DbusConnection;\n} \n\nSo we can avoid passing the connection around everywhere, but that would be for a future refactoring.",
      "parentUuid": "26e22265_dcbec225",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c3c9b1f_d7ca9dc6",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 243,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-06T10:28:16Z",
      "side": 1,
      "message": "OK, makes sense.",
      "parentUuid": "69f815bd_b7ad2adc",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cd9ea07_b40917fc",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 438,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:19:33Z",
      "side": 1,
      "message": "Curious why this renaming, it doesn\u0027t seem to change anything except the name, and creates a substantial blast radius below.",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "176b5dd6_4b4ba694",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 438,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T17:28:40Z",
      "side": 1,
      "message": "because all sensors now have a \"sensor\" member, this was a shadowed variable, which the compiler flagged, and had to be renamed to something that didn\u0027t shadow.  I could\u0027ve named all the other sensor member variables to something different, but changing this seemed like it would keep more consistency between sensors.",
      "parentUuid": "9cd9ea07_b40917fc",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "610da84a_ecb419d7",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 438,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-06T10:28:16Z",
      "side": 1,
      "message": "The name \"sensor\" does seem to be a rather simplistic name, for such an important object that\u0027s a long-lived member variable. If it were me, I would have called it \"sensorBase\" or \"sensorImpl\" or \"sensorMain\" or \"sensorCommon\" instead. This would also solve the name clash we see here, with local variables also named \"sensor\".\n\nI prefer to use simple all-lowercase words for temporaries and local variables instead, as the original code did here when it allocated a new Sensor object.",
      "parentUuid": "176b5dd6_4b4ba694",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f002db4_7586b512",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 438,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-09T01:46:57Z",
      "side": 1,
      "message": "\u003e The name \"sensor\" does seem to be a rather simplistic name, for such an important object that\u0027s a long-lived member variable. If it were me, I would have called it \"sensorBase\"\n\nSensorBase implies it\u0027s a base class, which it is not.\n\n\u003e or \"sensorImpl\"\n\nSensorImpl implies it\u0027s an implementation of a virtual class, which it is not.\n\n\u003e or \"sensorMain\"\n\nSensorMain makes it collide with all the main() method filenames (PSUSensorMain, ect).  \n\n\u003e or \"sensorCommon\"\n\nThis name I can get behind.  Will fix.\n\n\u003e instead. This would also solve the name clash we see here, with local variables also named \"sensor\".\n\u003e \n\u003e I prefer to use simple all-lowercase words for temporaries and local variables instead, as the original code did here when it allocated a new Sensor object.\n\nunfortunately the coding standard doesn\u0027t have any such preference, but it\u0027s certainly something to consider for the future.",
      "parentUuid": "610da84a_ecb419d7",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08577e06_c556edbd",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 47,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:19:33Z",
      "side": 1,
      "message": "Does PSUSensor require std::enable_shared_from_this anymore? I remember some complicated code that was added earlier, to clean up ownership and deal with lingering callbacks. I wonder if that complicated code is still necessary, now that \"sensor\" is a member and no longer subclassed.",
      "revId": "a62c462af1b7d57354af4e892662e056cfa9a8a2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}