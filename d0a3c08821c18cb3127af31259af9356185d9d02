{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "38f6a221_58a39817",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-04-07T20:13:25Z",
      "side": 1,
      "message": "Simple change. +2 now and submit. Happy yo discuss if there are concerns",
      "revId": "d0a3c08821c18cb3127af31259af9356185d9d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0a004ce_c1c2a7ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2023-04-07T20:33:13Z",
      "side": 1,
      "message": "The problem statement makes sense, and from what I\u0027ve seen as I dig through surrounding code, the solution seems like it should work as expected too. I do have some mild reservations about how the threshold-Hysteresis \u00270\u0027 value is set, though.\n\nI think I would feel more comfortable with the change if it was set via a parameter (maybe with a default value?) in the function header.\n\nWhat do you folks more experienced with dbus-sensors code think?",
      "revId": "d0a3c08821c18cb3127af31259af9356185d9d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae317e69_f94d13c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2023-04-07T20:34:49Z",
      "side": 1,
      "message": "Funny timing :)\n\nYou posted as I was writing up some questions about setting the \u00270\u0027 value in the function body vs. maybe doing it through a parameter in the function header.\n\nAny thoughts about that?",
      "parentUuid": "38f6a221_58a39817",
      "revId": "d0a3c08821c18cb3127af31259af9356185d9d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64af7b08_168a6185",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2023-04-07T20:45:34Z",
      "side": 1,
      "message": "I currently have the impression that a \u0027standard\u0027 threshold hysteresis is ((127 - (128) * .01) \u003d 2.55, based on code @ \n\nhttps://github.com/openbmc/dbus-sensors/blob/master/src/sensor.hpp#L277\n\nand that the \u00270\u0027 value being set in the body here is specific to a component that happens to be the only one currently making use of the function, but isn\u0027t guaranteed to be the only one forever.",
      "parentUuid": "ae317e69_f94d13c6",
      "revId": "d0a3c08821c18cb3127af31259af9356185d9d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66bbffe4_ada35f51",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2023-04-07T20:54:44Z",
      "side": 1,
      "message": "This code is flagged for merge, so I\u0027m thinking I\u0027ll submit a separate change to moves the threshold hysteresis setting into the function header with a default value of \u00270.\u0027 \n\nThe intent would be just so that devs aren\u0027t surprised with a hardcoded threshold hysteresis value that might disagree with various devices I assume could decide to use this function someday.\n\nAny objections, questions, or other comments?",
      "parentUuid": "64af7b08_168a6185",
      "revId": "d0a3c08821c18cb3127af31259af9356185d9d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33278e36_1798bdf7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000934
      },
      "writtenOn": "2023-04-10T02:43:02Z",
      "side": 1,
      "message": "\u003e This code is flagged for merge, so I\u0027m thinking I\u0027ll submit a separate change to moves the threshold hysteresis setting into the function header with a default value of \u00270.\u0027 \n\u003e \n\u003e The intent would be just so that devs aren\u0027t surprised with a hardcoded threshold hysteresis value that might disagree with various devices I assume could decide to use this function someday.\n\u003e \n\u003e Any objections, questions, or other comments?\n\nThanks for the commend!\n\nI think it\u0027s fine to set default in that function, but the default value might be a good question.\n\nIn most of temperature sensors in dbus-sensors, their default hysteresis is 2.55 not 0.",
      "parentUuid": "66bbffe4_ada35f51",
      "revId": "d0a3c08821c18cb3127af31259af9356185d9d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "441a01e1_978d2110",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 3
      },
      "lineNbr": 519,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2023-04-07T20:33:13Z",
      "side": 1,
      "message": "I think this change makes a lot of sense, but setting the value via magic number in a general function (even if it\u0027s only being used by one component at the moment) makes me feel a bit nervous. \n\nCould it make sense to change the function header to something like \n\nbool parseThresholdsFromAttr(\n    std::vector\u003cthresholds::Threshold\u003e\u0026 thresholdVector,\n    const std::string\u0026 inputPath, const double\u0026 scaleFactor,\n    const double\u0026 offset, const double\u0026  thresholdHysteresis \u003d 0)\n\nthen explicity set that param \u003d 0 from the calls in IntelCPUSensor::handleResponse?",
      "revId": "d0a3c08821c18cb3127af31259af9356185d9d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26525ae2_92d3b262",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 3
      },
      "lineNbr": 519,
      "author": {
        "id": 1000934
      },
      "writtenOn": "2023-04-10T02:43:02Z",
      "side": 1,
      "message": "\u003e I think this change makes a lot of sense, but setting the value via magic number in a general function (even if it\u0027s only being used by one component at the moment) makes me feel a bit nervous. \n\u003e \n\u003e Could it make sense to change the function header to something like \n\u003e \n\u003e bool parseThresholdsFromAttr(\n\u003e     std::vector\u003cthresholds::Threshold\u003e\u0026 thresholdVector,\n\u003e     const std::string\u0026 inputPath, const double\u0026 scaleFactor,\n\u003e     const double\u0026 offset, const double\u0026  thresholdHysteresis \u003d 0)\n\u003e \n\u003e then explicity set that param \u003d 0 from the calls in IntelCPUSensor::handleResponse?\n\nThis change looks fine, but this default \u00270\u0027 is still a magic number base on IntelCPUSensor\u0027s constructor.\n\nIMO, the default of hysteresis is (max - min) * 0.01 in dbus-sensors.\n\nIf we give the default value to 0 in parseThresholdsFromAttr, I\u0027m afraid that might make someone confuse that there are two kinds of hysteresis\u0027s default in this code.\n\nBut I\u0027m fine with this change, this should works as well as before.",
      "parentUuid": "441a01e1_978d2110",
      "revId": "d0a3c08821c18cb3127af31259af9356185d9d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}