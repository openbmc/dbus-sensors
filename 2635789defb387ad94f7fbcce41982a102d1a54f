{
  "comments": [
    {
      "key": {
        "uuid": "6f7a0303_a55b725b",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000164
      },
      "writtenOn": "2020-09-30T21:46:56Z",
      "side": 1,
      "message": "why can\u0027t this just be added to the base destructor?",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 113,
        "endChar": 0
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1978480_a314f73f",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2020-09-30T21:52:26Z",
      "side": 1,
      "message": "This needs to be called after inputDev close and waitTimer cancel",
      "parentUuid": "6f7a0303_a55b725b",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 113,
        "endChar": 0
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "293843b4_a1de9d68",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000164
      },
      "writtenOn": "2020-10-02T20:47:48Z",
      "side": 1,
      "message": "It would https://stackoverflow.com/questions/654428/what-is-the-order-in-which-the-destructors-and-the-constructors-are-called-in-c",
      "parentUuid": "a1978480_a314f73f",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 113,
        "endChar": 0
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91b88573_37f362ca",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2020-10-02T22:14:30Z",
      "side": 1,
      "message": "But I think the interfaces (below) still are needed, maybe these can be moved into base destructor.",
      "parentUuid": "293843b4_a1de9d68",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 113,
        "endChar": 0
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27b06da0_2505e07b",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000164
      },
      "writtenOn": "2020-10-05T17:09:38Z",
      "side": 1,
      "message": "yeah that\u0027d be a great idea.",
      "parentUuid": "91b88573_37f362ca",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 113,
        "endChar": 0
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b19c1a3a_5b885e5d",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2020-11-16T16:38:19Z",
      "side": 1,
      "message": "Since base class - sensors.hpp is neither a dbus object_server or has a dbus object_server, the following lines can\u0027t be moved into sensor\u0027s base destructor. I am open to other suggestions or thoughts on whether to add object_server into sensor\u0027s base construct.",
      "parentUuid": "27b06da0_2505e07b",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 113,
        "endChar": 0
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "485b9c37_a3505e22",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 456,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-16T16:56:58Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 456,
        "startChar": 3,
        "endLine": 456,
        "endChar": 14
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85300150_7e5f3ed3",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 457,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-16T16:56:58Z",
      "side": 1,
      "message": "Why isn\u0027t is called in the Threshold Destructor?",
      "range": {
        "startLine": 457,
        "startChar": 35,
        "endLine": 457,
        "endChar": 47
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8fd10c6_b97bb6f1",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 457,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2020-11-16T17:11:23Z",
      "side": 1,
      "message": "Threshold currently does not link back to the sensor that owns it.",
      "parentUuid": "85300150_7e5f3ed3",
      "range": {
        "startLine": 457,
        "startChar": 35,
        "endLine": 457,
        "endChar": 47
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6060198_1faf8dd9",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 457,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-16T17:17:44Z",
      "side": 1,
      "message": "Ah, fair point.  I\u0027d like to see this deduplicated, so we don\u0027t have to edit every sensor to get the behavior we\u0027re looking for.\n\nYou might need this to land ahead of you, so you\u0027ll get access to the Sensor destructor as a generalized element.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/37313",
      "parentUuid": "f8fd10c6_b97bb6f1",
      "range": {
        "startLine": 457,
        "startChar": 35,
        "endLine": 457,
        "endChar": 47
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da9216d6_fb038fa0",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 461,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-16T16:56:58Z",
      "side": 1,
      "message": "Shouldn\u0027t this only be asserting thresholds if the threshold is asserted?  This seems like it would indiscriminately deassert the threshold.",
      "range": {
        "startLine": 461,
        "startChar": 4,
        "endLine": 461,
        "endChar": 69
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e9b82f6_fe4c7be7",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 461,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2020-11-16T17:11:23Z",
      "side": 1,
      "message": "It is the intend for this function to force the de-assert and should only be called on sensor destruct.\nWhen the new sensor get created again, the threshold will be reset based on new values.",
      "parentUuid": "da9216d6_fb038fa0",
      "range": {
        "startLine": 461,
        "startChar": 4,
        "endLine": 461,
        "endChar": 69
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80cf57a4_3aa35276",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 461,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-16T17:17:44Z",
      "side": 1,
      "message": "\u003e It is the intend for this function to force the de-assert and should only be called on sensor destruct.\n\nBut it should only be deasserted if it\u0027s asserted, correct?  Otherwise we\u0027re sending an extra event out.\n\n\u003e When the new sensor get created again, the threshold will be reset based on new values.",
      "parentUuid": "0e9b82f6_fe4c7be7",
      "range": {
        "startLine": 461,
        "startChar": 4,
        "endLine": 461,
        "endChar": 69
      },
      "revId": "2635789defb387ad94f7fbcce41982a102d1a54f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}