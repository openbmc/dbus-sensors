{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9155ab47_5d654bc4",
        "filename": "src/ChassisIntrusionSensor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 141,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-04-27T01:45:01Z",
      "side": 1,
      "message": "This part can be common for different types",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 141,
        "endChar": 23
      },
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d46f8fe2_03a882b3",
        "filename": "src/ChassisIntrusionSensor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 141,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-05-04T04:04:06Z",
      "side": 1,
      "message": "I moved the value conversion into the updateValue() and called updateValue() from pollSensorStatus() when the readSensor() function returns positive values. Can you please check?",
      "parentUuid": "9155ab47_5d654bc4",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 141,
        "endChar": 23
      },
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c768107d_7a8a224e",
        "filename": "src/ChassisIntrusionSensor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 267,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-04-27T01:45:01Z",
      "side": 1,
      "message": "we want to be consistent in all types, either throw on error and use try/catch in createSensor or just return an inactive sensor",
      "range": {
        "startLine": 264,
        "startChar": 0,
        "endLine": 267,
        "endChar": 5
      },
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ed5b0c8_f04a1377",
        "filename": "src/ChassisIntrusionSensor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 267,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-05-04T04:04:06Z",
      "side": 1,
      "message": "I throw error when there\u0027s failure in initializing attributes for both sensor types, and try/catch in createSensorsFromConfig. Is there any missing detail that I didn\u0027t notice?",
      "parentUuid": "c768107d_7a8a224e",
      "range": {
        "startLine": 264,
        "startChar": 0,
        "endLine": 267,
        "endChar": 5
      },
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c74c3449_e6acef0c",
        "filename": "src/ChassisIntrusionSensor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 267,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-05-06T00:33:33Z",
      "side": 1,
      "message": "For the gpio you have try/catch inside constructor, your constructor would never throw. What I am suggesting is to be consistent, for non-recoverable errors, throw inside constructor or all outside the constructor for all sensor types.",
      "parentUuid": "0ed5b0c8_f04a1377",
      "range": {
        "startLine": 264,
        "startChar": 0,
        "endLine": 267,
        "endChar": 5
      },
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8638a9b8_5d2045ea",
        "filename": "src/ChassisIntrusionSensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 38,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2023-04-24T03:21:10Z",
      "side": 1,
      "message": "I think it is better if this method is not virtual. I expect that all of the sensor have the same behavior for this.",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33b9b440_ce766251",
        "filename": "src/ChassisIntrusionSensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 38,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-04-24T03:43:36Z",
      "side": 1,
      "message": "Are you think about having timer polling for all the method?",
      "parentUuid": "8638a9b8_5d2045ea",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd653c99_f1c934d6",
        "filename": "src/ChassisIntrusionSensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 38,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2023-04-24T04:28:51Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "33b9b440_ce766251",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61d50021_00b05ced",
        "filename": "src/ChassisIntrusionSensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 38,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-04-27T01:45:01Z",
      "side": 1,
      "message": "I think there could be\n1. one private read() function that is virtual, where it just reads the GPIO or PCH into a binary value\n2. one common setStatus(value), where convert the 0/1 to \"HardwareIntrusion\" or \"normal\"",
      "parentUuid": "cd653c99_f1c934d6",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63219949_57700759",
        "filename": "src/ChassisIntrusionSensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 49,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2023-04-24T03:21:10Z",
      "side": 1,
      "message": "Why the default value is \"pch\"?",
      "range": {
        "startLine": 49,
        "startChar": 53,
        "endLine": 49,
        "endChar": 56
      },
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57b9e5df_01fe7e8b",
        "filename": "src/ChassisIntrusionSensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 49,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-04-24T03:43:36Z",
      "side": 1,
      "message": "This is the expectation from the old design, pch is the first element in the enum which is zero and can be automatically assigned to mType without explicitly doing so, but I have to do this because of the CI failure asking for initial value setting.",
      "parentUuid": "63219949_57700759",
      "range": {
        "startLine": 49,
        "startChar": 53,
        "endLine": 49,
        "endChar": 56
      },
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25fbc259_ae808f53",
        "filename": "src/ChassisIntrusionSensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 49,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-04-27T01:45:01Z",
      "side": 1,
      "message": "This is not needed.",
      "parentUuid": "57b9e5df_01fe7e8b",
      "range": {
        "startLine": 49,
        "startChar": 53,
        "endLine": 49,
        "endChar": 56
      },
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "379527e1_c0cf3e56",
        "filename": "src/ChassisIntrusionSensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 49,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-05-04T04:04:06Z",
      "side": 1,
      "message": "Since I changed to re-initializing every re-scan, removed this.",
      "parentUuid": "25fbc259_ae808f53",
      "range": {
        "startLine": 49,
        "startChar": 53,
        "endLine": 49,
        "endChar": 56
      },
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "404f2c1c_c1f3a453",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 109,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2023-04-24T03:21:10Z",
      "side": 1,
      "message": "I think you should not dynamic cast from ChassisIntrusionSensor to ChassisIntrusionGpioSensor. You can define a new method compareSensor in the ChassisIntrusionSensor class. If you do that, you don\u0027t have to define getGpioInverted, getBusId and getSlaveAddr methods",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d32df0ca_7ac9b769",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 109,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-04-24T03:43:36Z",
      "side": 1,
      "message": "If compareSensor function is used, it has to take different type and number of params for each derived class which is I think not neccessary.",
      "parentUuid": "404f2c1c_c1f3a453",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f10bbf4e_3c2d5e8a",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 109,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2023-04-24T04:28:51Z",
      "side": 1,
      "message": "you can pass baseConfiguration to this method.",
      "parentUuid": "d32df0ca_7ac9b769",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69f15e2b_f1f58500",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 109,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-04-24T05:01:01Z",
      "side": 1,
      "message": "Then it has to extract configs which I think is not suitable to be executed in the sensor class.",
      "parentUuid": "f10bbf4e_3c2d5e8a",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a1af9a9_574bcfe8",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 109,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2023-04-25T06:57:01Z",
      "side": 1,
      "message": "I don\u0027t think it is ok to pass configuration to a function. If you don\u0027t want to do that, you can pass a variant argument.",
      "parentUuid": "69f15e2b_f1f58500",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d09f9b2_9a927dce",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 109,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-04-25T10:29:13Z",
      "side": 1,
      "message": "Somehow I think this is a little cumbersome, and I also wonder if we do need to handle rescaning intrusion sensor config. Because this is a sensor on BMC, we won\u0027t have a chance to rescan if the BMC is replaced...?!",
      "parentUuid": "9a1af9a9_574bcfe8",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9376e642_d51076c0",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 109,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-04-27T01:45:01Z",
      "side": 1,
      "message": "Looks like only a single intrusion sensor is supported. Why not always re-initialize?",
      "parentUuid": "7d09f9b2_9a927dce",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c83116a0_21215de7",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 109,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2023-05-04T04:04:06Z",
      "side": 1,
      "message": "I removed the comparison stuffs and let it re-initialize every rescan if there\u0027s a sensor config.",
      "parentUuid": "9376e642_d51076c0",
      "revId": "d6b76a2cf77af58612dcb1b1d675e276ebc39d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}