{
  "comments": [
    {
      "key": {
        "uuid": "7b6a963c_c3a126a9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T23:12:37Z",
      "side": 1,
      "message": "why would this happen outside of a debug context?  This would imply that the PSUsensor modeling is wrong, and other pieces need to be combined with psusensor, or psusensor functionally merged with whatever function is unbinding the driver.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 55
      },
      "revId": "eb6378234b64b81bcf5936069019a0dd516d911b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3029003_9e863642",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-08-24T00:11:17Z",
      "side": 1,
      "message": "yeah, so this is in a \"debug\" context. That is hardware engineers perform voltage margining by unbinding a driver, using iotools to modify pmbus registers and then rebind the drivers and expect the sensors to report sensible values.\n\nWe initially just told the HW engineers to restart the service but their margining operations would adjust the voltage many times across several devices.. waiting seconds for the service to restart and become available ended up drastically increasing the test time.",
      "parentUuid": "7b6a963c_c3a126a9",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 55
      },
      "revId": "eb6378234b64b81bcf5936069019a0dd516d911b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9bd5b39_231cefd6",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T23:12:37Z",
      "side": 1,
      "message": "this potentially would flood the journal.  Please remove it.",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 172,
        "endChar": 49
      },
      "revId": "eb6378234b64b81bcf5936069019a0dd516d911b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f18b37d_b4a9f1ae",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-08-19T23:52:24Z",
      "side": 1,
      "message": "If this fails, the read call below will happen on an invalid FD, so it will return EBADF below. Is the intention to retry every timer tick, until that file is ready again? If so, might want to catch EBADF as well as ENODEV. Or, is the intention to retry only once and then give up?\n\nAlso, if retrying every timer tick, it might generate a large amount of logging text if the device has been removed and not quickly replaced.",
      "revId": "eb6378234b64b81bcf5936069019a0dd516d911b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51ac940c_42292ce0",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-08-20T20:30:40Z",
      "side": 1,
      "message": "+1 avoid flooding journal log.\nAlso should not go continue to read at line 188+",
      "parentUuid": "7f18b37d_b4a9f1ae",
      "revId": "eb6378234b64b81bcf5936069019a0dd516d911b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8123e4ac_5375a853",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T23:12:37Z",
      "side": 1,
      "message": "+1 to the +1",
      "parentUuid": "51ac940c_42292ce0",
      "revId": "eb6378234b64b81bcf5936069019a0dd516d911b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c06cbed_ace505fc",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 181,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T23:12:37Z",
      "side": 1,
      "message": "Doesn\u0027t this branch need to return somewhere?  otherwise, we end up calling seek on a negative fd on line 190.  That seems wrong.",
      "revId": "eb6378234b64b81bcf5936069019a0dd516d911b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c46ec7a_cf5ceaaf",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 185,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-08-19T23:52:24Z",
      "side": 1,
      "message": "I am concerned about doing the read immediately after the reopen. This bypasses the flow of ASIO, which is to typically wait for an asynchronous event, to be sure the read buffer has content in it, and then to do the read. Otherwise, this risks blocking on the read call.\n\nIt might be preferable to do the reopen immediately after the close, instead of doing the reopen immediately before the read.",
      "revId": "eb6378234b64b81bcf5936069019a0dd516d911b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "649c81ca_bbae14b4",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 185,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-08-20T20:30:40Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "6c46ec7a_cf5ceaaf",
      "revId": "eb6378234b64b81bcf5936069019a0dd516d911b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e212698_8e363f4c",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 6
      },
      "lineNbr": 185,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-23T23:12:37Z",
      "side": 1,
      "message": "+1 in principal.  In practice, all reads out of this daemon are blocking, so it doesn\u0027t matter than much.",
      "parentUuid": "649c81ca_bbae14b4",
      "revId": "eb6378234b64b81bcf5936069019a0dd516d911b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}