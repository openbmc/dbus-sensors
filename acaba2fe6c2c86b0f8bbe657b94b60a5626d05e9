{
  "comments": [
    {
      "key": {
        "uuid": "22315e4f_b2775794",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-08T22:33:35Z",
      "side": 1,
      "message": "what test cases.  Walk though what you did to test this.",
      "range": {
        "startLine": 16,
        "startChar": 39,
        "endLine": 16,
        "endChar": 56
      },
      "revId": "acaba2fe6c2c86b0f8bbe657b94b60a5626d05e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75be2638_75a7b624",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-08T22:33:35Z",
      "side": 1,
      "message": "Is it correct?  What are the limit values.  More information needed here.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 57
      },
      "revId": "acaba2fe6c2c86b0f8bbe657b94b60a5626d05e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef8ba414_21925896",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2021-01-11T16:22:52Z",
      "side": 1,
      "message": "Not sure what you meant by limit values?",
      "parentUuid": "75be2638_75a7b624",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 57
      },
      "revId": "acaba2fe6c2c86b0f8bbe657b94b60a5626d05e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "874cc2eb_93a728d2",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 155,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-08T22:28:58Z",
      "side": 1,
      "message": "can we make this into an actual struct?  Tuple was fine when it was 2 elements, but now that it\u0027s continuing to get bigger, and we don\u0027t actually use tuple for its intended purpose (variadic template construction) this would be much more clear as a hardened struct.",
      "range": {
        "startLine": 154,
        "startChar": 19,
        "endLine": 155,
        "endChar": 74
      },
      "revId": "acaba2fe6c2c86b0f8bbe657b94b60a5626d05e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08f456fc_aba31650",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 187,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-08T22:33:35Z",
      "side": 1,
      "message": "If the read returned a valid value, how is it possible for the newMin \u003c newMax check to fail?\n\nIf we\u0027re having cases where we hit the branch on 179, but this check fails, we need to go investigate the driver, not add more userspace checks.",
      "range": {
        "startLine": 187,
        "startChar": 66,
        "endLine": 187,
        "endChar": 81
      },
      "revId": "acaba2fe6c2c86b0f8bbe657b94b60a5626d05e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44de6a77_c63b8759",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 187,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2021-01-11T16:22:52Z",
      "side": 1,
      "message": "How do you know if the read returned a valid value? I mean, a file read could be successful but can we be sure about data provided by hardware?\n\nOn the other hand, talking about previous version of that function, why do we set a 0 value in the case when read fails but power is on? Shouldn\u0027t we have an additional property to signal the current reading status and not use this one to set some special values \n(0 or NaN in that particular case) which corresponds to some error cases?",
      "parentUuid": "08f456fc_aba31650",
      "range": {
        "startLine": 187,
        "startChar": 66,
        "endLine": 187,
        "endChar": 81
      },
      "revId": "acaba2fe6c2c86b0f8bbe657b94b60a5626d05e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f38c961_ca50b032",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 187,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-11T18:32:27Z",
      "side": 1,
      "message": "\u003e How do you know if the read returned a valid value? I mean, a file read could be successful but can we be sure about data provided by hardware?\n\nI\u0027m not following this question.  The hardware has lots of error handling mechanisms (checksums, parity, ect).  if any of those fail, the file should not read successfully.  If the file read successfully, and we trust the driver, we can trust the value it gave us.  If we don\u0027t trust the driver, we need to fix the driver.\n\n\u003e \n\u003e On the other hand, talking about previous version of that function, why do we set a 0 value in the case when read fails but power is on? Shouldn\u0027t we have an additional property to signal the current reading status and not use this one to set some special values \n\u003e (0 or NaN in that particular case) which corresponds to some error cases?\n\nThe problem here becomes that these values aren\u0027t meant to ever be able to \"fail\" to read, given that they\u0027re being used to generate the SDR.  In most daemons they\u0027re a hardcoded value for the precision that sensor requires.  This is the only sensor that generates precision at runtime in a way that can fail.  Part of me wonders if we should roll this back and go back to the fixed precision.\n\nIs there a reason the added sub-degree precision is needed in this use case?",
      "parentUuid": "44de6a77_c63b8759",
      "range": {
        "startLine": 187,
        "startChar": 66,
        "endLine": 187,
        "endChar": 81
      },
      "revId": "acaba2fe6c2c86b0f8bbe657b94b60a5626d05e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bbbe49c_93bed06a",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 188,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-08T22:28:58Z",
      "side": 1,
      "message": "Please separate these and add appropriate logging if they\u0027re found to be incorrect.",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 188,
        "endChar": 13
      },
      "revId": "acaba2fe6c2c86b0f8bbe657b94b60a5626d05e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3987078b_57b91ac8",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 188,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2021-01-11T16:22:52Z",
      "side": 1,
      "message": "As indicated by one of the first comments, printing error message here, in a loop (that function is also called on a regular basis), in the case of a permanent problem, would make journal useless since it will be flooded with that particular error message.",
      "parentUuid": "6bbbe49c_93bed06a",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 188,
        "endChar": 13
      },
      "revId": "acaba2fe6c2c86b0f8bbe657b94b60a5626d05e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82bdc586_b9b5af01",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 188,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-11T18:32:27Z",
      "side": 1,
      "message": "Fair point.  How do you think we should log the error back?",
      "parentUuid": "3987078b_57b91ac8",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 188,
        "endChar": 13
      },
      "revId": "acaba2fe6c2c86b0f8bbe657b94b60a5626d05e9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}