{
  "comments": [
    {
      "key": {
        "uuid": "4e6d141d_26d75317",
        "filename": "src/IIOMain.cpp",
        "patchSetId": 70
      },
      "lineNbr": 110,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2021-07-23T14:34:21Z",
      "side": 1,
      "message": "Nit: spelling errors.  Also, I\u0027m not sure what drive is.  driver?",
      "range": {
        "startLine": 110,
        "startChar": 19,
        "endLine": 110,
        "endChar": 44
      },
      "revId": "dca157750e827e6a211828c3d36e127c8edd4350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97c5a71f_871bbebc",
        "filename": "src/IIOMain.cpp",
        "patchSetId": 70
      },
      "lineNbr": 110,
      "author": {
        "id": 1000524
      },
      "writtenOn": "2021-07-23T14:37:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e6d141d_26d75317",
      "range": {
        "startLine": 110,
        "startChar": 19,
        "endLine": 110,
        "endChar": 44
      },
      "revId": "dca157750e827e6a211828c3d36e127c8edd4350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "563acd65_269ac28f",
        "filename": "src/IIOMain.cpp",
        "patchSetId": 70
      },
      "lineNbr": 201,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2021-07-23T14:34:21Z",
      "side": 1,
      "message": "Does this invalidate the iterator it?\n\nI couldn\u0027t tell from the boost documentation.  It just says \"Returns an iterator pointing to the element immediately following q prior to the element being erased. ... Note: Invalidates elements with keys not less than the erased element.\"\n\nstd::set::erase() states that it invalidates the iterator.\n\nIf the iterator is invalidated, then the it++ in the for loop might not work properly?",
      "range": {
        "startLine": 201,
        "startChar": 28,
        "endLine": 201,
        "endChar": 54
      },
      "revId": "dca157750e827e6a211828c3d36e127c8edd4350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0296fea2_b7937f18",
        "filename": "src/IIOMain.cpp",
        "patchSetId": 70
      },
      "lineNbr": 201,
      "author": {
        "id": 1000524
      },
      "writtenOn": "2021-07-23T14:41:49Z",
      "side": 1,
      "message": "I honestly do not know; but it is the same code as from dbus-sensors/src/HwmonTempMain.cpp; we should check with Matt Spinler.\n\n                // on rescans, only update sensors we were signaled by\n                auto findSensor \u003d sensors.find(sensorName);\n                if (!firstScan \u0026\u0026 findSensor !\u003d sensors.end())\n                {\n                    bool found \u003d false;\n                    for (auto it \u003d sensorsChanged-\u003ebegin();\n                         it !\u003d sensorsChanged-\u003eend(); it++)\n                    {\n                        if (boost::ends_with(*it, findSensor-\u003esecond-\u003ename))\n                        {\n                            sensorsChanged-\u003eerase(it);\n                            findSensor-\u003esecond \u003d nullptr;\n                            found \u003d true;\n                            break;\n                        }\n                    }\n                    if (!found)\n                    {\n                        continue;\n                    }\n                }",
      "parentUuid": "563acd65_269ac28f",
      "range": {
        "startLine": 201,
        "startChar": 28,
        "endLine": 201,
        "endChar": 54
      },
      "revId": "dca157750e827e6a211828c3d36e127c8edd4350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e711b3a_42ab8af6",
        "filename": "src/IIOMain.cpp",
        "patchSetId": 70
      },
      "lineNbr": 201,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2021-07-23T15:23:56Z",
      "side": 1,
      "message": "I just did a quick sample program on my local computer (so it might be older/newer boost), but it didn\u0027t work properly.  I think after the first erase the iterator is no longer valid.\n\n  #include \u003ciostream\u003e\n  #include \u003cboost/container/flat_set.hpp\u003e\n\n  int main(void)\n  {\n      boost::container::flat_set\u003cstd::string\u003e fruits{\"apple\",  \"banana\", \"berry\",\n                                                     \"orange\", \"pear\",   \"plum\"};\n      for (auto it \u003d fruits.begin(); it !\u003d fruits.end(); it++)\n      {\n          if ((*it)[0] \u003d\u003d \u0027b\u0027)\n          {\n              fruits.erase(it);\n          }\n      }\n      for (auto\u0026 fruit : fruits)\n      {\n          std::cout \u003c\u003c fruit \u003c\u003c std::endl;\n      }\n      return 0;\n  }\n\nOutput when run\n\n  apple\n  berry\n  orange\n  pear\n  plum\n\n\"berry\" should have been erased too.\n\nerase() is always dodgy when iterating through containers.  It often invalidates the iterator.  I think that is why erase() returns an iterator to the next element.  Then you can write the code like this (one option):\n\n  #include \u003ciostream\u003e\n  #include \u003cboost/container/flat_set.hpp\u003e\n\n  int main(void)\n  {\n      boost::container::flat_set\u003cstd::string\u003e fruits{\"apple\",  \"banana\", \"berry\",\n                                                     \"orange\", \"pear\",   \"plum\"};\n      auto it \u003d fruits.begin();\n      while (it !\u003d fruits.end())\n      {\n          if ((*it)[0] \u003d\u003d \u0027b\u0027)\n          {\n              it \u003d fruits.erase(it);\n          }\n          else\n          {\n              ++it;\n          }\n      }\n      for (auto\u0026 fruit : fruits)\n      {\n          std::cout \u003c\u003c fruit \u003c\u003c std::endl;\n      }\n      return 0;\n  }\n\nOutput when run\n\n  apple\n  orange\n  pear\n  plum",
      "parentUuid": "0296fea2_b7937f18",
      "range": {
        "startLine": 201,
        "startChar": 28,
        "endLine": 201,
        "endChar": 54
      },
      "revId": "dca157750e827e6a211828c3d36e127c8edd4350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1126cd4b_5f69f00d",
        "filename": "src/IIOMain.cpp",
        "patchSetId": 70
      },
      "lineNbr": 201,
      "author": {
        "id": 1000524
      },
      "writtenOn": "2021-07-23T15:33:35Z",
      "side": 1,
      "message": "Within dbus-sensors/src all of these have have the same code \nADCSensorMain.cpp ExternalSensorMain.cpp FanMain.cpp HwmonTempMain.cpp\n\nSo are they all broken?",
      "parentUuid": "5e711b3a_42ab8af6",
      "range": {
        "startLine": 201,
        "startChar": 28,
        "endLine": 201,
        "endChar": 54
      },
      "revId": "dca157750e827e6a211828c3d36e127c8edd4350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd802380_703af893",
        "filename": "src/IIOMain.cpp",
        "patchSetId": 70
      },
      "lineNbr": 201,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2021-07-23T16:06:59Z",
      "side": 1,
      "message": "Sorry, this is the first time I\u0027ve reviewed code in this repository before, so I am not familiar with the other files.\n\nI was just pointing out a probable bug in this commit.",
      "parentUuid": "1126cd4b_5f69f00d",
      "range": {
        "startLine": 201,
        "startChar": 28,
        "endLine": 201,
        "endChar": 54
      },
      "revId": "dca157750e827e6a211828c3d36e127c8edd4350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bf86535_e30ee88e",
        "filename": "src/IIOMain.cpp",
        "patchSetId": 70
      },
      "lineNbr": 201,
      "author": {
        "id": 1000524
      },
      "writtenOn": "2021-07-23T16:09:07Z",
      "side": 1,
      "message": "Thanks Shawn!",
      "parentUuid": "fd802380_703af893",
      "range": {
        "startLine": 201,
        "startChar": 28,
        "endLine": 201,
        "endChar": 54
      },
      "revId": "dca157750e827e6a211828c3d36e127c8edd4350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf327e44_f5e72874",
        "filename": "src/IIOMain.cpp",
        "patchSetId": 70
      },
      "lineNbr": 201,
      "author": {
        "id": 1000524
      },
      "writtenOn": "2021-07-23T17:39:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5bf86535_e30ee88e",
      "range": {
        "startLine": 201,
        "startChar": 28,
        "endLine": 201,
        "endChar": 54
      },
      "revId": "dca157750e827e6a211828c3d36e127c8edd4350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0836875_08f5d5bc",
        "filename": "src/IIOMain.cpp",
        "patchSetId": 70
      },
      "lineNbr": 201,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-07-26T16:13:44Z",
      "side": 1,
      "message": "Technically shawn is correct.  In practice this is undefined behavior that we just happen to rely on.  The short version is that std::flat_map is based on a vector.  for some vector implementations, end() points to the element past the last element.  When we call erase on the last item, we just happen to rely on this fact.\n\nTechnically this code should be resetting it, as should the rest of them.",
      "parentUuid": "bf327e44_f5e72874",
      "range": {
        "startLine": 201,
        "startChar": 28,
        "endLine": 201,
        "endChar": 54
      },
      "revId": "dca157750e827e6a211828c3d36e127c8edd4350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}