{
  "comments": [
    {
      "key": {
        "uuid": "f144bd9e_421e8d3e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T05:37:34Z",
      "side": 1,
      "message": "This looks like you tried to line wrap this by hand?  Can you try to rewrap this in your editor to make it look more reasonable?",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 19,
        "endChar": 42
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "332e7dc5_a5fe43a8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-01T11:42:53Z",
      "side": 1,
      "message": "Yep, I did. How long should lines be, in commit messages? Also, the first line is a special case, compared to subsequent lines, right?",
      "parentUuid": "f144bd9e_421e8d3e",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 19,
        "endChar": 42
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3113ba8_ef03e87e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T17:28:16Z",
      "side": 1,
      "message": "https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53#:~:text\u003dWrap%20it%20to%2072%20characters,git%20merge%20and%20git%20revert.\n\nIf you use vim, it will wrap lines automatically for you.",
      "parentUuid": "332e7dc5_a5fe43a8",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 19,
        "endChar": 42
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cbc4fb3_6b982abd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-01T18:30:32Z",
      "side": 1,
      "message": "Nice, thanks. 72 characters for every line? I thought the first line was a special case and should be slightly less long? Upon further search, I found this: https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting\nRegardless, these arbitrary line length limitations bring back memories of old BBS description files....",
      "parentUuid": "e3113ba8_ef03e87e",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 19,
        "endChar": 42
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21cdd4c2_23275454",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T18:35:21Z",
      "side": 1,
      "message": "yep, first line is generally 50, but that\u0027s considerably less important for readability.",
      "parentUuid": "4cbc4fb3_6b982abd",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 19,
        "endChar": 42
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c6c5eea_3e3405dd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-08T14:12:43Z",
      "side": 1,
      "message": "OK, wrapped the second paragraph. The first paragraph was intended to be more of a sequence of bullet points, instead of prose, so it should not be wrapped, as it becomes harder to read that way. Put a period at the end of each line, to make it clearer, though.",
      "parentUuid": "21cdd4c2_23275454",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 19,
        "endChar": 42
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c29e3fb_c83e3846",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T05:37:34Z",
      "side": 1,
      "message": "Considering we\u0027re modifying both, can you please test this as well?",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 27
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e88fe3e7_aed619df",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-01T11:42:53Z",
      "side": 1,
      "message": "OK, I will. Question: why do we have two parallel interfaces for fan speed control, when in other sensors, we have chosen to migrate away from uint64_t in favor of double? Is fan speed a special case?",
      "parentUuid": "8c29e3fb_c83e3846",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 27
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "381b4d93_29a9d585",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T17:28:16Z",
      "side": 1,
      "message": "\u003e OK, I will. Question: why do we have two parallel interfaces for fan speed control, when in other sensors, we have chosen to migrate away from uint64_t in favor of double? Is fan speed a special case?\n\nFan speed is a special case, as there\u0027s an \"official\" interface (the sensor interface) and the original interface (the uint64 interface).  When we created the sensor, it was easier just to leave both, as it simplifies the lookup procedure for them.\n\nWe could certainly move it to double, but the motivating example for sensors was IPMI, where we needed to build the SDR with multiple sub-int ranges, and people historically sucked at building it correctly.",
      "parentUuid": "e88fe3e7_aed619df",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 27
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b08a898_0ef03e86",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-01T18:30:32Z",
      "side": 1,
      "message": "Thanks for the background. As for building the IPMI SDR with arbitrary sub-integer ranges, happily, I made this: https://github.com/openbmc/intel-ipmi-oem/commit/17e21c20148c8c250b902e4807f3b9a7a81af0b3",
      "parentUuid": "381b4d93_29a9d585",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 27
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2886d56d_c1ed7889",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T18:35:21Z",
      "side": 1,
      "message": "yep, that looks like a significant improvement for sensors.",
      "parentUuid": "2b08a898_0ef03e86",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 27
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5989e61_bf3043b0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-08T14:12:43Z",
      "side": 1,
      "message": "OK, will test both, and revise commit message accordingly.",
      "parentUuid": "2886d56d_c1ed7889",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 27
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db98b46b_00230d4e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T05:37:34Z",
      "side": 1,
      "message": "I\u0027m assuming you tested on a fan instance, and not a PSU instance, but you should mention that in your commit message.",
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2dd33dd_3f2a2c27",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-01T11:42:53Z",
      "side": 1,
      "message": "Good point. Yes, I did, tested on fan instance only. I\u0027m curious why the string \"PSU\" makes it a special case, scaling the underlying system file from 0 to 100 instead of 0 to 255?",
      "parentUuid": "db98b46b_00230d4e",
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbc81fef_cdcf6d01",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T17:28:16Z",
      "side": 1,
      "message": "\u003e Good point. Yes, I did, tested on fan instance only. I\u0027m curious why the string \"PSU\" makes it a special case, scaling the underlying system file from 0 to 100 instead of 0 to 255?\n\nPower supply fan drivers are ranged differently for whatever reason.  Setting that to 100 allows us to coerce them to a 0-100 range.",
      "parentUuid": "f2dd33dd_3f2a2c27",
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4508228_3311b4ba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-01T18:30:32Z",
      "side": 1,
      "message": "Thanks, makes sense. I made sure to keep the original logic intact, so it can select 0-100 or 0-255 for the underlying file integer content range, same as before.",
      "parentUuid": "fbc81fef_cdcf6d01",
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "713c3764_258e9b37",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T18:35:21Z",
      "side": 1,
      "message": "Yup, it looks like it\u0027s trivial, just worth mentioning in the commit message.",
      "parentUuid": "c4508228_3311b4ba",
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a918e77_29c85c21",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-08T14:12:43Z",
      "side": 1,
      "message": "Thanks for the background. Will also add this to the commit message.",
      "parentUuid": "713c3764_258e9b37",
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acbbc15c_4b28ed70",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T05:37:34Z",
      "side": 1,
      "message": "I suspect we shouldn\u0027t be ignoring this silently?  Was there a specific reason for not returning -1?  Accepting the write \"silently\" arguably breaks dbus properties rules.",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 69
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a0fb497_fe782150",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-01T11:42:53Z",
      "side": 1,
      "message": "Good point, I can return -1 instead. Is -1 what should be returned when user tries to write a value and we\u0027re not accepting it for whatever reason, but it\u0027s not considered a fatal error? Will the sdbusplus library be annoyed if we return -1 when it is expecting a return of 1? Also, below, the original code throws a std::runtime_error exception, which to me seems overkill. Do we really want users to be able to crash out the daemon by writing out-of-range values to it over D-Bus?",
      "parentUuid": "acbbc15c_4b28ed70",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 69
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e51b647_93cc4c1d",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-08T14:12:43Z",
      "side": 1,
      "message": "Revised to return -1 upon error, so caller knows that there has been an error. Took a note for the future, about whether or not to throw exception if out of range.",
      "parentUuid": "5a0fb497_fe782150",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 69
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53f2ba9a_e1eb2f5a",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T05:37:34Z",
      "side": 1,
      "message": "Any specific reason this is uint32 and not int?",
      "range": {
        "startLine": 78,
        "startChar": 38,
        "endLine": 78,
        "endChar": 46
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb1a7c32_7c141885",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-01T11:42:53Z",
      "side": 1,
      "message": "Yes, there is. This variable is passed into setValue() below, and it saves having to do yet another static_cast to it. I could make these int if wanted, but it wouldn\u0027t really buy anything.",
      "parentUuid": "53f2ba9a_e1eb2f5a",
      "range": {
        "startLine": 78,
        "startChar": 38,
        "endLine": 78,
        "endChar": 46
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05574d95_53651b0a",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-08T14:12:43Z",
      "side": 1,
      "message": "Leaving this as uint32_t, unless any objection.",
      "parentUuid": "cb1a7c32_7c141885",
      "range": {
        "startLine": 78,
        "startChar": 38,
        "endLine": 78,
        "endChar": 46
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1441a6f_0e2cd65d",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T05:37:34Z",
      "side": 1,
      "message": "This is going to change behavior a little.  Previously we effectively did floor on this value.  I\u0027m not sure it matters much here, but worth pointing out in the commit message as being different.",
      "range": {
        "startLine": 79,
        "startChar": 49,
        "endLine": 79,
        "endChar": 59
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6406bac5_be5d53a6",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-01T11:42:53Z",
      "side": 1,
      "message": "I thought about floor, but the below integer code used std::round and it seemed like a good idea to be symmetrical with it. Also, there\u0027s a problem if proper rounding is not used: the round trip of int-float-int will result in a different int number, in some situations, leading to an endless loop of needless changes, as it bounces back and forth between two nearby int numbers! I found this in my testing, before changing it to use rounding instead of truncation.",
      "parentUuid": "f1441a6f_0e2cd65d",
      "range": {
        "startLine": 79,
        "startChar": 49,
        "endLine": 79,
        "endChar": 59
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "877d7739_941e1795",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-08T14:12:43Z",
      "side": 1,
      "message": "OK, put a note in the commit message, to mention that rounding behavior is different, so observed integer PWM might be different in some edge cases.",
      "parentUuid": "6406bac5_be5d53a6",
      "range": {
        "startLine": 79,
        "startChar": 49,
        "endLine": 79,
        "endChar": 59
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1177dc23_bd964801",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-01-05T21:11:58Z",
      "side": 1,
      "message": "nit: it is little misleading the variable name is currFloat and type is double",
      "range": {
        "startLine": 93,
        "startChar": 11,
        "endLine": 93,
        "endChar": 28
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55b77a1f_8a572c1a",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-08T14:12:43Z",
      "side": 1,
      "message": "I meant \"Float\" as in floating-point, not the literal type \"float\". But, I could see how this would be misleading. Renamed it to \"Scaled\".",
      "parentUuid": "1177dc23_bd964801",
      "range": {
        "startLine": 93,
        "startChar": 11,
        "endLine": 93,
        "endChar": 28
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "beaaa9ed_1fb59097",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T05:37:34Z",
      "side": 1,
      "message": "nit, can we roll this out into at least one intermediate variable to improve the readability.  The old one was arguably too much to be doing on one line already, this just a little bit worse.",
      "range": {
        "startLine": 125,
        "startChar": 20,
        "endLine": 126,
        "endChar": 68
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23b9702b_65fcf8c2",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-01T11:42:53Z",
      "side": 1,
      "message": "OK, will do. As you can see by other lines, I\u0027m a big fan of spreading out complicated expressions into separate intermediate variables.",
      "parentUuid": "beaaa9ed_1fb59097",
      "range": {
        "startLine": 125,
        "startChar": 20,
        "endLine": 126,
        "endChar": 68
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "addb737d_c8ee67c1",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-08T14:12:43Z",
      "side": 1,
      "message": "Split it up, and also split up the similar-looking math that\u0027s done in the getter function.",
      "parentUuid": "23b9702b_65fcf8c2",
      "range": {
        "startLine": 125,
        "startChar": 20,
        "endLine": 126,
        "endChar": 68
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a2874d5_e3b0a70c",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-01T05:37:34Z",
      "side": 1,
      "message": "Can this just be replaced with uint64_t \u003d lround(...)?\n\nLooks like it should, and would be simpler, but I haven\u0027t tried it.",
      "range": {
        "startLine": 135,
        "startChar": 25,
        "endLine": 135,
        "endChar": 58
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b69fe70_abe55e92",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-01T11:42:53Z",
      "side": 1,
      "message": "lround() is \"long int\" which may or may not be uint64_t, depending on your platform. std::round also looks more C++ than lround() which looks more C.",
      "parentUuid": "9a2874d5_e3b0a70c",
      "range": {
        "startLine": 135,
        "startChar": 25,
        "endLine": 135,
        "endChar": 58
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11dd7ef8_9faa0409",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-08T14:12:43Z",
      "side": 1,
      "message": "Split this up, but left the call to std::round() unchanged, for symmetry with the other rounding functions that are used elsewhere in this code.",
      "parentUuid": "4b69fe70_abe55e92",
      "range": {
        "startLine": 135,
        "startChar": 25,
        "endLine": 135,
        "endChar": 58
      },
      "revId": "a0870768629f5b2c32893bd1690af5b670aeabed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}