{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6b97e63f_8d26c493",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-16T19:24:55Z",
      "side": 1,
      "message": "Please wrap your commit properly 50/72 please",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 11
      },
      "revId": "ba0b68cc320c6d4c0d48b4ab848dd9ddd2eff15f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80020001_8d4a667d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-01-16T22:14:12Z",
      "side": 1,
      "message": "To confirm- this was an issue with the body width being lower than it should be, correct? If so, I believe it should be corrected now. Thanks for the help!",
      "parentUuid": "6b97e63f_8d26c493",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 11
      },
      "revId": "ba0b68cc320c6d4c0d48b4ab848dd9ddd2eff15f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9ed7c6a_42dc6c5a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-16T19:24:55Z",
      "side": 1,
      "message": "Isn\u0027t 0 grossly incorrect though?  Or do intel processors have some magic that make them not require hysteresis?  Please answer in your commit message.",
      "revId": "ba0b68cc320c6d4c0d48b4ab848dd9ddd2eff15f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "882ea526_b192e32c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-01-16T22:11:22Z",
      "side": 1,
      "message": "You are correct. \n\nOriginally the function in question had no parameter for hysteresis, and was (in the body) implicitly applying hysteresis\u003d0 to any sensors relying on the function. This caused an issue for Intel platforms, which are currently the only ones making use of the function in question.\n\nSomeone from Intel corrected the \u0027hysteresis\u003d0 always\u0027 issue by hardcoding the function so that it would always use \u00271\u0027 for hysteresis-- but that\u0027s an Intel-specific value, and wouldn\u0027t likely make sense for other platforms.\n\nThere was another Gerrit issue open where there\u0027s an attempt to add a Hysteresis parameter and set a value of \u0027NaN\u0027 but there\u0027s a level of complexity re: making sure some of the code changes required to use \u0027NaN\u0027 there wouldn\u0027t break other things.\n\nThis Gerrit submission attempts to sidestep that last bit of uncertainty by adding a parameter for hysteresis and setting default hysteresis\u003d0 in the function header in hopes of making the implicit (and overridable) behavior of the function more apparent to future users without the added complexity of changing how things work today.",
      "parentUuid": "a9ed7c6a_42dc6c5a",
      "revId": "ba0b68cc320c6d4c0d48b4ab848dd9ddd2eff15f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "195b3d72_434a75df",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-01-16T22:29:21Z",
      "side": 1,
      "message": "Sorry -I\u0027ve just realized I\u0027d mixed up which parseThresholdsFromAttr() Gerrit entry I was replying to.\n\nI thought I was needing to justify using \u0027hysteresis\u003d0\u0027 in praseThresholdsFromAttr header-- but it turns out you\u0027ve actually caught a typo I made in the Intel calls to parseThresholdsFromAttr\n\nYou are absolutely correct that \u003d0 is not the correct default hysteresis value for Intel platforms. I\u0027ll submit a new version with the fix.",
      "parentUuid": "882ea526_b192e32c",
      "revId": "ba0b68cc320c6d4c0d48b4ab848dd9ddd2eff15f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6eb029e_34663f89",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-01-16T22:35:12Z",
      "side": 1,
      "message": "Actually after refreshing myself on this topic further, it looks like Intel *is* explicitly using Hysteresis\u003d0 as their value.\n\nThe original version of parseThresholdsFromAttr() implicitly set hysteresis\u003dNaN, which caused issues for Intel, who changed it so that parseThresholdsFromAttr() now implicitly sets hysteresis\u003d0 for all callers.\n\nThis changes turns the implicit setting into something explicit and overridable.\n\nThis is the accepted intel fix that changed the implicit hysteresis\u003dNAN to hysteresis\u003d0 : https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/61744/comments/38f6a221_58a39817",
      "parentUuid": "195b3d72_434a75df",
      "revId": "ba0b68cc320c6d4c0d48b4ab848dd9ddd2eff15f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68863051_26ef8fe9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-05-10T21:19:16Z",
      "side": 1,
      "message": "Depends on https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/62825.",
      "revId": "ba0b68cc320c6d4c0d48b4ab848dd9ddd2eff15f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}