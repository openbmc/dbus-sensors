{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "10e8ba98_36b838e8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-01-29T21:54:34Z",
      "side": 1,
      "message": "Wouldn\u0027t this reintroduce the issue that threshold can not get de-asserted with NaN hysteresis?",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 37
      },
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f222398_6c504e2f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-01-29T22:40:50Z",
      "side": 1,
      "message": "The idea here is callers *should* override the hysteresis value -- but if they do not specify a hysteresis, the function will behave the same way it did before the \u0027Intel Fix\u0027 was accepted. \n\nThe \u0027Intel Fix\u0027 solved their hysteresis NaN issue by hardcoding hysteresis\u003d0 into the function body, but that value doesn\u0027t make sense for other hardware, and finding a different sensible number to use default hysteresis value has a fair number of challenges.\n\nBasically, this fix aims to make pre-existing behavior explicit + mutable, rather than using hardcoded values with implicit behavior (ie always setting hysteresis to NaN behind the scenes, or always using \u0027hysteresis\u003d0\u0027 when the function is called)",
      "parentUuid": "10e8ba98_36b838e8",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 37
      },
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3159421d_18ad0a39",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-01-31T20:53:47Z",
      "side": 1,
      "message": "I agree that this is better way than hardcode inside the function. Is there a real issue/failure this change is to address? Or you are trying to fix the same issue with a better approach? I don\u0027t think we want to introduce a regression.  Pass 0.0 at https://github.com/openbmc/dbus-sensors/blob/16d6f17bec38b6c095dfb6bed224f17d941fb9b3/src/IntelCPUSensor.cpp#L291 would avoid the regression",
      "parentUuid": "4f222398_6c504e2f",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 37
      },
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efdd4575_5087cc24",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-02-01T21:38:30Z",
      "side": 1,
      "message": "This patchset now has Intel calls pass in hysteresis\u003d0.\n\nThere\u0027s no active failures at this time, this is an attempt to head off issues with a fix I saw get accepted a little while back. Without this change, if anyone other than Intel makes use of this function, the hysteresis will be incorrectly set for the non-Intel HW.\n\nI originally attached myself to the (now merged) issue @ https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/61744/comments/38f6a to gain some experience helping with other people\u0027s projects. \n\nI dug into the code and posted a comment about an issue I found with the fix-- but by coincidence, the fix was accepted maybe minutes before my comment was posted.\n\nI\u0027m mostly just pushing on this \nA) for the experience with helping with OBMC stuff outside my own projects\nB) I happened to notice an issue I think will likely cause issues in the future (IF this function ever sees use outside of Intel\u0027s usage), and I\u0027m willing to keep pushing on it if folks agree that\u0027s the right way to go.",
      "parentUuid": "3159421d_18ad0a39",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 37
      },
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee28d6be_2f1c8451",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-02-09T01:57:07Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "efdd4575_5087cc24",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 37
      },
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cdea7c3_6e74984d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 16,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-01-29T21:54:34Z",
      "side": 1,
      "message": "What is this referring to?",
      "range": {
        "startLine": 16,
        "startChar": 22,
        "endLine": 16,
        "endChar": 67
      },
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c203c5a_53bf3117",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 16,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-01-29T22:40:50Z",
      "side": 1,
      "message": "I\u0027m specifically referring to this fix: https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/61744/comments/38f6a?tab\u003dcomments\n\nThe original behavior was that the function always implicitly set hysteresis\u003dNaN, and there was no way to change that value.\n\nThe \u0027Intel Fix\u0027 was to implicitly set hysteresis\u003d0 by hardcoding it into the function body.\n\nThis fix is to set hysteresis\u003dNaN in the header and have it be overridable. This effectively rollbacks the hardcoded Intel Fix and make the original behavior explicit instead of implicit. \n\nThis fix comes with a sister-fix so that existing Intel calls to the function will now explicitly specify hysteresis\u003d0, instead of relying on hardcoded Intel-specific behavior in the function (https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/62826/12)",
      "parentUuid": "9cdea7c3_6e74984d",
      "range": {
        "startLine": 16,
        "startChar": 22,
        "endLine": 16,
        "endChar": 67
      },
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "142823c1_c9ac3da1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-01-29T21:54:34Z",
      "side": 1,
      "message": "Test done?",
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b19fb373_f3a29ec5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-01-29T22:40:50Z",
      "side": 1,
      "message": "In theory we\u0027d probably like to get someone from Intel with access to Intel HW to take a look -- especially if I can get the original \u0027Intel Fix\u0027 engineer\u0027s attention.\n\nThat said, using Hysteresis\u003dNaN as a default value is the old behavior from before hysteresis\u003d0 was hardcoded in for the Intel Fix.\n\nIn practice, I\u0027m not sure heavy testing is needed, since this pair of relationship-chained fixes (in practice) simply moves where the hysteresis value is being set -- moving it from being hardcoded in the body of parseThresholdsFromAttr() and instead setting it through a function parameter when the function is called.\n\nIn practice, nothing is actually calling parseThresholdsFromAttr() and using the default Hysteresis\u003dNaN value.",
      "parentUuid": "142823c1_c9ac3da1",
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c87680b5_b2b8fc3d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-01-31T20:53:47Z",
      "side": 1,
      "message": "Please add test section in the commit message. Refer https://github.com/openbmc/docs/blob/master/CONTRIBUTING.md#testing",
      "parentUuid": "b19fb373_f3a29ec5",
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a86947a3_1778dbe9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-02-01T21:38:30Z",
      "side": 1,
      "message": "The new Tested section states\n\n\"Tested: Confirmed the code builds and doesn\u0027t throw errors with OBMC\n\u0027local CI\u0027 testing. I believe heavier testing with actual Intel HW\nisn\u0027t needed because this change simple moves where a value is specified\n(from hardcode in function body to passed-in parameter) without\naffecting any existing in-use functionality.\"\n\nWill this work, or do you feel more \u0027actual\u0027 testing should be required here?",
      "parentUuid": "c87680b5_b2b8fc3d",
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11818a6c_302fc6dc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-02-09T01:57:07Z",
      "side": 1,
      "message": "That is fair",
      "parentUuid": "a86947a3_1778dbe9",
      "revId": "156f165189cdd029f4a951a653cf388592b4cba6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}