{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "070b1a87_6eca8372",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-12-06T00:35:56Z",
      "side": 1,
      "message": "Nice, though I wonder whether we instead fork omnisensor from Zev and carry on maintaining that?",
      "revId": "0a45aedc9b061b3a69099d3758839451b448750a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a316bd5d_1bfd23b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001289
      },
      "writtenOn": "2024-12-06T07:23:26Z",
      "side": 1,
      "message": "Sure! Yeah I can go resurrect that: I guess I just wonder, what would be the best place for the code to live. It could be added directly in dbus-sensors, but it might be more appropriate to create an openbmc/omnisensor fork. Idk, not that important, more important that I actually just go try using it for some stuff and extending it, and then incorporate it into a machine image in openbmc/openbmc for demonstration purposes.",
      "parentUuid": "070b1a87_6eca8372",
      "revId": "0a45aedc9b061b3a69099d3758839451b448750a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "498e5943_5ceb132f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-14T01:57:17Z",
      "side": 1,
      "message": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/76545\n\nFYI, I asked Aushim to push our version of this into a review just to have something to compare against.  It\u0027s rough, needs some work before merge, but might get us what we need.  Nothing against rust, I just don\u0027t know it well enough to review.",
      "revId": "0a45aedc9b061b3a69099d3758839451b448750a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63076b59_cd2eec49",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-14T01:57:17Z",
      "side": 1,
      "message": "Do people use omnisensor?  I don\u0027t see a lot of PRs/comments/bugs that would make me think folks are actively working on it or using it.  I really do want to see it succeed, but even Zev seems to have dropped it at this point.  Could really use motivated people to break it out and start using it in a real production capacity.",
      "parentUuid": "a316bd5d_1bfd23b3",
      "revId": "0a45aedc9b061b3a69099d3758839451b448750a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebdb4431_1329ab8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001289
      },
      "writtenOn": "2024-12-14T02:35:06Z",
      "side": 1,
      "message": "\u003e Do people use omnisensor?\n\nProbably not: however, at Meta, we’re unlikely to use anything downstream unless it’s unblocking some critical functionality. So there’s a chicken and egg problem, at least for me.\n\nIn other words like, I need a place to write code and work on it. Our team prefers working upstream: it feels like the project doesn’t want to take on code that’s incomplete or unproven. I like doing things incrementally, but probably can’t do that upstream. I’m a little stuck figuring out what development and contribution process everyone is comfortable with.\n\nAlso, bottom-line: I just want to find a path to introducing Rust into OpenBMC. I don’t mind using a separate repository, or doing more legwork on proving it as a viable option, or just marking the whole thing completely unstable and “beware using in prod” on it, where you guys delete it later if it turns out bad. I just really strongly believe in the productivity benefits of Rust, especially because of its third-party library ecosystem and how easy it is for me to cross-compile pure Rust applications linked statically with musl and test them on a BMC.",
      "parentUuid": "63076b59_cd2eec49",
      "revId": "0a45aedc9b061b3a69099d3758839451b448750a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9cb9142_248b42ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001289
      },
      "writtenOn": "2024-12-14T02:35:06Z",
      "side": 1,
      "message": "Oh, that’s great, that will be very useful to us!",
      "parentUuid": "498e5943_5ceb132f",
      "revId": "0a45aedc9b061b3a69099d3758839451b448750a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}