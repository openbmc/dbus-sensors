{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "afa6dcc6_6a79bf0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-10T23:41:24Z",
      "side": 1,
      "message": "The threshold code has been significantly refactored recently, which should make this patch a lot cleaner.  Is this still desired or required?",
      "revId": "e65e47ce5cdc67e7f74e43776892166121e295c9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be4dade5_7451a21b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2022-01-11T14:47:55Z",
      "side": 1,
      "message": "I\u0027ve checked the modern codebase, the issue is still present. And the patch still fixes it.\nI thought that not having some properties is the interface violation, so from my perspective, this change is desired and required.\nI don\u0027t know about every OpenBMC app, but at least phosphor-host-ipmid doesn\u0027t work properly without this patchset.",
      "parentUuid": "afa6dcc6_6a79bf0f",
      "revId": "e65e47ce5cdc67e7f74e43776892166121e295c9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "678652a7_09b18a61",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-11T19:00:18Z",
      "side": 1,
      "message": "Great, can you please take a look at how the threshold interfaces were refactored, and work them into your patch?  At the moment there is now a common structure for all threshold interfaces, so there\u0027s no need to explicitly hardcode every single possible pair of properties, and in the current one, should be done as part of the newly created thresholdInterfaces struct.  Otherwise, this patch will immediately break when https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/47996 is merged.",
      "parentUuid": "be4dade5_7451a21b",
      "revId": "e65e47ce5cdc67e7f74e43776892166121e295c9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ec120a2_613587a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-12T20:35:21Z",
      "side": 1,
      "message": "Latest patchset looks like it ignored this comment?",
      "parentUuid": "678652a7_09b18a61",
      "revId": "e65e47ce5cdc67e7f74e43776892166121e295c9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e96aef0_f626b193",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2022-01-12T21:48:01Z",
      "side": 1,
      "message": "Maybe I\u0027ve misunderstood it?\nI\u0027ve updated my patchset exactly to use this new threshold interface (`thresholdInterfaces`) and adapt to possibilities of another threshold levels besides Critical and Warning.\nI just thought that is what I needed to do. If it is wrong, can you elaborate more what I need to do?",
      "parentUuid": "3ec120a2_613587a0",
      "revId": "e65e47ce5cdc67e7f74e43776892166121e295c9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e9b5b38_57f67248",
        "filename": "include/sensor.hpp",
        "patchSetId": 1
      },
      "lineNbr": 460,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-13T15:23:10Z",
      "side": 1,
      "message": "The fact that we\u0027re looping over in a second pass would kind of imply that our data structure (vector\u003cthreshold\u003e) is wrong, and we should be pairing together the thresholds such that we\u0027re not unrolling the second stage of this loop by hand.\n\nsomething like\n\nstd::vector\u003cstd::pair\u003cThreshold, Threshold\u003e\u003e\n\nor maybe even move the severity to the higher level container so it can be shared.\n\nflat_map\u003cSeverity, std::pair\u003cThreshold, Threshold\u003e\u003e\n\nWhich would allow us to initialize the paired threshold at the same time we initialize the first threshold, instead of having to add a second pass to sweep through and do it.  Additionally, it prepares us for having 5 thresholds in the future.\n\nI need to give this more thought, but I don\u0027t like that this method is going to double in size once we get the next three threshold severities supported (which is already in review).",
      "revId": "e65e47ce5cdc67e7f74e43776892166121e295c9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73ef4c05_9cee6699",
        "filename": "include/sensor.hpp",
        "patchSetId": 1
      },
      "lineNbr": 460,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-08-16T23:52:24Z",
      "side": 1,
      "message": "Feels like the issue is that the dbus objects is manually registered to match the yaml definition. Auto generated sdbusplus::server::object_t \u003cSensor::Threshold::Critical\u003e etc. can be used to ensure all properties are initialized.\nDownside is that it requires a bigger change of existing code and different thresholds will be different object Critical/Warning/...",
      "parentUuid": "3e9b5b38_57f67248",
      "revId": "e65e47ce5cdc67e7f74e43776892166121e295c9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7322d621_2d38b6c0",
        "filename": "include/sensor.hpp",
        "patchSetId": 1
      },
      "lineNbr": 460,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-01-12T20:35:00Z",
      "side": 1,
      "message": "\u003e Feels like the issue is that the dbus objects is manually registered to match the yaml definition. Auto generated sdbusplus::server::object_t \u003cSensor::Threshold::Critical\u003e etc. can be used to ensure all properties are initialized.\n\nFor the moment, dbus-sensors intentionally doesn\u0027t take a hard dependency on the yaml definitions.  We could discuss changing that (I\u0027d probably be opposed for reasons I\u0027ve sent on the mailing list in the past), but I\u0027m happy to talk about it outside the context of this patch, which is using the existing mechanisms to fix a bug.\n\n\u003e Downside is that it requires a bigger change of existing code and different thresholds will be different object Critical/Warning/...\n\nYep, exactly.  Lets split the discussions.",
      "parentUuid": "73ef4c05_9cee6699",
      "revId": "e65e47ce5cdc67e7f74e43776892166121e295c9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}