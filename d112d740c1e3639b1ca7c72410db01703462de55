{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9e702155_ac911029",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-01-20T02:07:23Z",
      "side": 1,
      "message": "+1 on the basis that this no-longer has a funky DSL. Deferring to Ed for other concerns.",
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2ed85a4_c593cb4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-01-24T23:48:28Z",
      "side": 1,
      "message": "I think this is an improvement. It does provide a solution where drivers have specific limits.",
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "556dfff5_e4f56de4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-31T19:34:27Z",
      "side": 1,
      "message": "Ok, overall, I\u0027m understanding the feature, and I think there\u0027s a use case, and definitely think it\u0027s valid.  I do think we need to simplify the const structure a bit.  Ideally it should be something like:\n\nconstexpr std::array\u003cPSURangeEntry, number\u003e lookup \u003d {\n....\n\n}.\n\nThat way, we\u0027re not mallocing a huge structure on startup.",
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1686674f_768a4c63",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-31T19:34:27Z",
      "side": 1,
      "message": "?  Why friend?",
      "range": {
        "startLine": 77,
        "startChar": 4,
        "endLine": 77,
        "endChar": 10
      },
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38254041_38c583a9",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2023-02-01T15:08:34Z",
      "side": 1,
      "message": "Doesn\u0027t matter if friend or const member afaict.",
      "parentUuid": "1686674f_768a4c63",
      "range": {
        "startLine": 77,
        "startChar": 4,
        "endLine": 77,
        "endChar": 10
      },
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76b191a3_e71228cd",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-01T22:45:43Z",
      "side": 1,
      "message": "The coding standard would normally make this not a friend.",
      "parentUuid": "38254041_38c583a9",
      "range": {
        "startLine": 77,
        "startChar": 4,
        "endLine": 77,
        "endChar": 10
      },
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18696ff6_abe40f71",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-31T19:34:27Z",
      "side": 1,
      "message": "Can we do this the easier to read way?\n\nif (l.label !\u003d r.label){\n    return false;\n}\nreturn l.driver \u003d\u003d r.driver;",
      "range": {
        "startLine": 79,
        "startChar": 15,
        "endLine": 79,
        "endChar": 72
      },
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32bfa940_7236d02a",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2023-01-31T19:57:50Z",
      "side": 1,
      "message": "\u003e Can we do this the easier to read way?\n\u003e \n\u003e if (l.label !\u003d r.label){\n\u003e     return false;\n\u003e }\n\u003e return l.driver \u003d\u003d r.driver;\n\nMy implementation is taken literally from https://en.cppreference.com/w/cpp/language/operators#Comparison_operators . We need to implement operator\u003c for the map to work, the set requires ordering. Why exactly it needs to be friend I\u0027m not sure, C++ is still surprising to me so I just trust cppreference.",
      "parentUuid": "18696ff6_abe40f71",
      "range": {
        "startLine": 79,
        "startChar": 15,
        "endLine": 79,
        "endChar": 72
      },
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50c21836_7a64e16c",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2023-02-01T15:08:34Z",
      "side": 1,
      "message": "FWIW it looks like to provide total ordering (which is required for std::map and similar containers) one can either give a friend operator\u003c function or a const member operator\u003c function, both should be equivalent, and using std::tie is considered the right ideomatic way for the purpose.",
      "parentUuid": "32bfa940_7236d02a",
      "range": {
        "startLine": 79,
        "startChar": 15,
        "endLine": 79,
        "endChar": 72
      },
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3594199_ae6982e0",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-01T22:45:43Z",
      "side": 1,
      "message": "We shouldn\u0027t be using std::map here.  PLease take a look at the WIP patches I\u0027ve pushed.",
      "parentUuid": "50c21836_7a64e16c",
      "range": {
        "startLine": 79,
        "startChar": 15,
        "endLine": 79,
        "endChar": 72
      },
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec4bbc40_346838cd",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 939,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-01-31T19:34:27Z",
      "side": 1,
      "message": "If this structure becomes per-system, it explodes it in a really bad way.\n\nThis struct already suffers from the fact that it:\n1. Takes up a ton of memory.\n2. Is allocated on startup.\n3. Includes tons of redundant data that could be easily just matched (vout1, vout2, vout3, ect)\n\nI don\u0027t like to require cleaning up someone elses code, but I don\u0027t see how we can afford to make this structure 20 times larger (assuming 20 different VR types) without some simplification.",
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93437c37_92e50f54",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 939,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2023-01-31T19:57:50Z",
      "side": 1,
      "message": "\u003e If this structure becomes per-system, it explodes it in a really bad way.\n\u003e \n\u003e This struct already suffers from the fact that it:\n\u003e 1. Takes up a ton of memory.\n\u003e 2. Is allocated on startup.\n\u003e 3. Includes tons of redundant data that could be easily just matched (vout1, vout2, vout3, ect)\n\u003e \n\u003e I don\u0027t like to require cleaning up someone elses code, but I don\u0027t see how we can afford to make this structure 20 times larger (assuming 20 different VR types) without some simplification.\n\nHm, probably it would be enough to match something like ``pin[0-9]*`` instead of the exact match, and that would simplify it enough?\n\nI\u0027ll see what I can do.",
      "parentUuid": "ec4bbc40_346838cd",
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a08579a1_dbcc4e6f",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 939,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2023-02-01T15:08:34Z",
      "side": 1,
      "message": "Guess you meant something like my last changeset, it seems to satisfy all your requirements.",
      "parentUuid": "93437c37_92e50f54",
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c22b252_b486bc9f",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 939,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-01T22:45:43Z",
      "side": 1,
      "message": "I pushed a patch series that conveys what needs to change, please help to review it, and if it works for you, we can just stack your changes ontop.",
      "parentUuid": "a08579a1_dbcc4e6f",
      "revId": "d112d740c1e3639b1ca7c72410db01703462de55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}