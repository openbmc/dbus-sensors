{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "765f9f05_2c5493ef",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 519,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-16T19:15:20Z",
      "side": 0,
      "message": "This looks like it\u0027s just a bug.  I suspect this should\u0027ve been std::numeric_limits\u003cdouble\u003e::quiet_NaN()",
      "range": {
        "startLine": 519,
        "startChar": 73,
        "endLine": 519,
        "endChar": 74
      },
      "revId": "9a472e8ed1a0da677d2e28446db87b55677b8d83",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c43ac13d_644a16e8",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 2
      },
      "lineNbr": 519,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2023-08-28T16:14:29Z",
      "side": 0,
      "message": "If I remember correctly, the fix @ https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/61744/comment/441a01e1_978d2110/ solved an issue where NaN was always being written to a Sensor hysteresis field during Sensor \u0027update\u0027 calls using data return from parseThresholdFromAttr().\n\nThe accepted fix (I think my comments came juuust barely too late) there was to hardcode hysteresis value \u00270\u0027 in a way that would apply to anything calling parseThrsholdFromAttr() then using Sensor \u0027update\u0027 with the returned data.\n\nAt last check, Intel code is the only one currently making use of that function, and that \u00270\u0027 value is a hysteresis value that makes sense for Intel devices, but potentially not other devices (which I understand generally use a value of \u00272.55\u0027 during an \u0027populate empty fields\u0027 step if no other hysteresis value is specified).\n\nMy current thinking/investigation path here is to look into the \u0027update\u0027 function (currently only used by Intel code after calling parseThresholdFromAttr, I believe - but need to confirm again) and maybe see if it makes sense to have it *not* overwrite fields if \u0027NaN\u0027 is specified.\n\nI think overwriting hysteresis fields with \u0027NaN\u0027 is what caused the original issue being solved in https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/61744/3",
      "parentUuid": "765f9f05_2c5493ef",
      "range": {
        "startLine": 519,
        "startChar": 73,
        "endLine": 519,
        "endChar": 74
      },
      "revId": "9a472e8ed1a0da677d2e28446db87b55677b8d83",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}