{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c44bf22b_a228b398",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-16T19:41:28Z",
      "side": 1,
      "message": "A dbus level test isn\u0027t really sufficient here, as this is very likely to break both IPMI and/or Redfish (both of which rely on these names).  I would expect we need to test each of those, and ensure that in Redfish, walking the tree isn\u0027t broken, and in IPMI, that the SDR generates properly.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 29,
        "endChar": 65
      },
      "revId": "461a6f605c6dbe04bc109d214a41af8b080cb603",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f50a7acc_6fe787b8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-08-16T22:36:26Z",
      "side": 1,
      "message": "For the most part, we just need to make sure that all of them are using filename() to decode the name, right?\n\nI will do a more detailed system integration tests.\n\nRedfish: RedfishValidator\n\nIPMI: ipmisdr with dynamic sensor stack.",
      "parentUuid": "c44bf22b_a228b398",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 29,
        "endChar": 65
      },
      "revId": "461a6f605c6dbe04bc109d214a41af8b080cb603",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "152f9aa6_4ef5df19",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-08-17T15:59:26Z",
      "side": 1,
      "message": "\u003e For the most part, we just need to make sure that all of them are using filename() to decode the name, right?\n\nIn theory, that\u0027s part of it, but there\u0027s other things like, redfish uses the name field in the URI.  If the name can now include spaces, bmcweb needs to ensure that the URI is being encoded.  so in practice, we also need to make sure the redfish tree is walkable and sane.\n\n\u003e \n\u003e I will do a more detailed system integration tests.\n\u003e \n\u003e Redfish: RedfishValidator\n\nThat would work.\n\n\u003e \n\u003e IPMI: ipmisdr with dynamic sensor stack.\n\nalso an \"IPMI sensor list\" and make sure that the names of the sensors are correct.  Considering that IPMI is also limited to ascii (I think, verify this with the spec) we should also verify non-ascii characters get escaped to something reasonable.",
      "parentUuid": "f50a7acc_6fe787b8",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 29,
        "endChar": 65
      },
      "revId": "461a6f605c6dbe04bc109d214a41af8b080cb603",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a29c7f2_20b30de0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-08-19T14:42:33Z",
      "side": 1,
      "message": "I was testing it out and ipmitool sdr/sensor are fine but bmcweb will fail because it cannot support spaces in the URI.\n\nipmitool sdr/sensor can havne names with spaces so it doesn\u0027t break anything.\n\nI wonder if we want to force people to not have any spaces in their sensors.\n\nreplace ` ` with `_` like before on top of the the encoding. then does not convert it back to spaces on the client side.",
      "parentUuid": "152f9aa6_4ef5df19",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 29,
        "endChar": 65
      },
      "revId": "461a6f605c6dbe04bc109d214a41af8b080cb603",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a5098f9_69679f63",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-09-22T00:30:25Z",
      "side": 1,
      "message": "\u003e I was testing it out and ipmitool sdr/sensor are fine but bmcweb will fail because it cannot support spaces in the URI.\n\nYep.....  This was what I expected.\n\n\u003e \n\u003e ipmitool sdr/sensor can havne names with spaces so it doesn\u0027t break anything.\n\nI think it causes the wrong names in the SDR for spaces though.  The decode mechanisms in IPMI are different than the encode mechanisms you\u0027re using here.\n\n\u003e \n\u003e I wonder if we want to force people to not have any spaces in their sensors.\n\nThat\u0027s a non-starter;  Google systems are unique in their non-use of spaces, almost all other systems have spaces in the name.  These are human-readable names, and humans read spaces not underscores.\n\n\u003e \n\u003e replace ` ` with `_` like before on top of the the encoding. then does not convert it back to spaces on the client side.\n\nNot really going to work.  Lets think of other ways to solve this.",
      "parentUuid": "7a29c7f2_20b30de0",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 29,
        "endChar": 65
      },
      "revId": "461a6f605c6dbe04bc109d214a41af8b080cb603",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a1642a7_25d94ea0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-09-22T00:53:22Z",
      "side": 1,
      "message": "oh yeah, needs to get back to this at some point.\n\num.. lets see.\n\nCan we just not decode the dbus path when populating the Bmcweb URI for sensors. And only decode for the \"Name\" field and such?",
      "parentUuid": "1a5098f9_69679f63",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 29,
        "endChar": 65
      },
      "revId": "461a6f605c6dbe04bc109d214a41af8b080cb603",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52cfb708_68c8bb77",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-09-24T17:56:43Z",
      "side": 1,
      "message": "\u003e oh yeah, needs to get back to this at some point.\n\u003e \n\u003e um.. lets see.\n\u003e \n\u003e Can we just not decode the dbus path when populating the Bmcweb URI for sensors. And only decode for the \"Name\" field and such?\n\nYep, you\u0027re on the right track.  Keep in mind, in implementation it\u0027s not that simple because we need to go free-form string -\u003e dbus path -\u003e http uri -\u003e dbus path in a way that round trips properly, and encodes each step properly in a all cases.\n\n\n\u003e And only decode for the \"Name\" field and such?\n\n\"Name\" is actually the easy one, it\u0027s the URI that is odd, because we need to both form a well-specified Redfish URI (and redfish has recommendations about URI semantics that we need to follow) as well as be able to convert that back into a dbus path on the other side.\n\nIt\u0027s all doable, just tricky to get right.  Getting boost::urls integrated and stable was a pre-req for this work.",
      "parentUuid": "5a1642a7_25d94ea0",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 29,
        "endChar": 65
      },
      "revId": "461a6f605c6dbe04bc109d214a41af8b080cb603",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}