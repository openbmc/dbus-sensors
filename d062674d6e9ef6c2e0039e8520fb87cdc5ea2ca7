{
  "comments": [
    {
      "key": {
        "uuid": "bb4ee0ba_26f9eca8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2021-03-24T05:55:50Z",
      "side": 1,
      "message": "I did not have too much background, but why no use the \"Label\" to specify the sensor? That is already support by Thresholds.cpp",
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "802d50d7_7cbc46ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-03-24T13:28:57Z",
      "side": 1,
      "message": "That was what my first patch set did.  The feedback was that hwmon terms like \u0027hwmon1\u0027 were not wanted in the entity-manager JSON.",
      "parentUuid": "bb4ee0ba_26f9eca8",
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0716d03_3997e009",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-23T19:10:58Z",
      "side": 1,
      "message": "Can integer be used here?",
      "range": {
        "startLine": 157,
        "startChar": 45,
        "endLine": 157,
        "endChar": 76
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4a0588b_cc77b714",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-03-24T13:28:57Z",
      "side": 1,
      "message": "hmm, I don\u0027t think I understand the question?  Are you asking if it matchIndex should be an integer or something else?",
      "parentUuid": "d0716d03_3997e009",
      "range": {
        "startLine": 157,
        "startChar": 45,
        "endLine": 157,
        "endChar": 76
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f00186e7_956d3e80",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-24T17:49:14Z",
      "side": 1,
      "message": "The code works as is. It is just a style question. raw integer pointer can be avoided with:   \nOption 1: const int matchIndex? If matchIndex is \u003c\u003d 0 , skip match index. (equivalent to nullptr)\nOption 2: use std::optional \u003cint\u003e, if nullopt, skip match index",
      "parentUuid": "e4a0588b_cc77b714",
      "range": {
        "startLine": 157,
        "startChar": 45,
        "endLine": 157,
        "endChar": 76
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72e8d0ea_213f4e88",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-03-24T19:13:09Z",
      "side": 1,
      "message": "I was matching the style of the previous argument, which was also a pointer which defaulted to nullptr.  I agree though that probably a raw pointer isn\u0027t the best, but in this case it\u0027s probably more important to keep it consistent.",
      "parentUuid": "f00186e7_956d3e80",
      "range": {
        "startLine": 157,
        "startChar": 45,
        "endLine": 157,
        "endChar": 76
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3a87af6_8bfd998f",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-03-30T13:57:37Z",
      "side": 1,
      "message": "Is this OK how I have it?  Do you want me to change?",
      "parentUuid": "72e8d0ea_213f4e88",
      "range": {
        "startLine": 157,
        "startChar": 45,
        "endLine": 157,
        "endChar": 76
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63642632_62e1e249",
        "filename": "include/Thresholds.hpp",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-30T19:15:15Z",
      "side": 1,
      "message": "I am ok with this implementation. Consistent is good.",
      "parentUuid": "b3a87af6_8bfd998f",
      "range": {
        "startLine": 157,
        "startChar": 45,
        "endLine": 157,
        "endChar": 76
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b3f0104_e3e2b291",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 284,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-03T16:47:25Z",
      "side": 1,
      "message": "I\u0027m not quite following why this is here.  Wouldn\u0027t we just assume that indexes that are unspcified are index 1?  Having different behavior if all the indexes are specified seems like it would be confusing.",
      "range": {
        "startLine": 284,
        "startChar": 0,
        "endLine": 284,
        "endChar": 75
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8400df09_6eb70e56",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 284,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-05-03T18:52:32Z",
      "side": 1,
      "message": "I think I can remove this as you suggest and just assume that a Threshold JSON entry without an Index only applies to index 1.",
      "parentUuid": "3b3f0104_e3e2b291",
      "range": {
        "startLine": 284,
        "startChar": 0,
        "endLine": 284,
        "endChar": 75
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "738db4be_52718de7",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 284,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-05-03T21:50:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8400df09_6eb70e56",
      "range": {
        "startLine": 284,
        "startChar": 0,
        "endLine": 284,
        "endChar": 75
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d12d79e8_0b0a1d50",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-03T16:47:25Z",
      "side": 1,
      "message": "This is different than I would\u0027ve expected.  Requiring taking an index at a higher scope seems odd;  I would\u0027ve expected something like\n\nint index \u003d 1;\nauto indexFind \u003d item.second.find(\"Index\");\nif (indexFind !\u003d item.second.end()){\n  index \u003d std::visit(VariantToIntVisitor(), indexFind-\u003esecond);\n}\n\nif (index !\u003d matchIndex){\n    ....\n}\n\n\nThis removes the need for the matchIndex parameter to be optional.  Also, unless I\u0027m missing something, it\u0027s not really a \"match\" index, it\u0027s a sensor index, maybe a better variable name like sensorIndex?",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 85,
        "endChar": 34
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29748863_2540ad61",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-05-03T18:52:32Z",
      "side": 1,
      "message": "The previous parameter, matchLabel, is pretty much the same thing done for the Label property, and is also optional so that only psusensor actually had a code change for it. That seemed like a reasonable way to proceed here as well (my code is very similar to the matchLabel block above).  There is like 15 total callers of this function, and most of which also don\u0027t pass in the matchLabel argument, so to me  it still makes sense to do the same here and keep matchIndex/sensorIndex defaulting to a nullptr.  Or, is there a better way to handle it that I missed?\n\n\nAs far as the code in this commit goes, I think I can  do as you suggest and always pass it in, and assume 1 if \"Index\" isn\u0027t found.\n\n\nI called it matchIndex to match the naming of the previous parameter, but will change it.",
      "parentUuid": "d12d79e8_0b0a1d50",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 85,
        "endChar": 34
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11e5f522_272099db",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-05-03T21:50:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29748863_2540ad61",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 85,
        "endChar": 34
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d21baf04_1fcd975e",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-03T16:47:25Z",
      "side": 1,
      "message": "See above, I suspect this can be entirely removed.",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 159,
        "endChar": 1
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a81fcce2_fed6a1ce",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-05-03T18:52:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d21baf04_1fcd975e",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 159,
        "endChar": 1
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea9770b8_8d7f8447",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-05-03T21:50:38Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "a81fcce2_fed6a1ce",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 159,
        "endChar": 1
      },
      "revId": "d062674d6e9ef6c2e0039e8520fb87cdc5ea2ca7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}