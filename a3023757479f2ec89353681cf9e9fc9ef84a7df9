{
  "comments": [
    {
      "key": {
        "uuid": "5ffcbcb2_cc626900",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-09-21T08:35:59Z",
      "side": 1,
      "message": "So, is it more \"Cable Sensor\" or \"GPIO sensor\"? Is it something generic, like phosphor-gpio-monitor?\nThis commit catastrophically lack of any documentation. I know, dbus-sensors lack of docs at all, but we should start fixing this.\nI propose you to add \"docs\" subdirectory and put there description of the daemon: purpose, expected configuration options, exported dbus objects, emitted events, etc.",
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff1b2504_4082ccb0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-21T17:44:05Z",
      "side": 1,
      "message": "For reference,\n\nhttps://github.com/openbmc/docs/blob/master/designs/gpio-based-cable-presence.md\n\nWhat do you think about adding a reference to the design doc in the root README.md?",
      "parentUuid": "5ffcbcb2_cc626900",
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a029c7e2_7b50c8da",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "I added the link to the doc in the commit message.",
      "parentUuid": "ff1b2504_4082ccb0",
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1541ac2_ba9cb51a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-09-24T12:44:31Z",
      "side": 1,
      "message": "Design doc is for top-level overview (design), but I talking about implementation documentation. The doc, you referenced to contains configuration example, but I prefer to have more detailed description here.\n\nBTW, no one will found link to documentation in commit message when he will try to understand what is this daemon for, lets say, in one year ;).",
      "parentUuid": "a029c7e2_7b50c8da",
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16c4f0b9_4dd7b1ef",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-27T22:00:01Z",
      "side": 1,
      "message": "Will add one.",
      "parentUuid": "a1541ac2_ba9cb51a",
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2bd3076_43551259",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-28T21:32:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16c4f0b9_4dd7b1ef",
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb7ebb2e_f663f1e9",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "nit:\nis get property from dbus a better name?",
      "range": {
        "startLine": 77,
        "startChar": 6,
        "endLine": 77,
        "endChar": 22
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bb480ef_b4242588",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb7ebb2e_f663f1e9",
      "range": {
        "startLine": 77,
        "startChar": 6,
        "endLine": 77,
        "endChar": 22
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "759c71f0_7d3616ab",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 81,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-20T22:53:43Z",
      "side": 1,
      "message": "so what happens when the key isn\u0027t found? Shouldn\u0027t the caller be informed that `fromDbusProperty` failed? \nShould an exception be thrown?\n(this function already throws an exception if std::get fails)",
      "range": {
        "startLine": 81,
        "startChar": 8,
        "endLine": 81,
        "endChar": 38
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fde795e8_263cb8fa",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 81,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "I changed the implementation to handle the exception from the caller function.",
      "parentUuid": "759c71f0_7d3616ab",
      "range": {
        "startLine": 81,
        "startChar": 8,
        "endLine": 81,
        "endChar": 38
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "772fbdad_8e9a456a",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 83,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "Add check for std::get, use std::get_if or use the code below\n\nif(std::holds_alternative\u003cT\u003e(found-\u003esecond))\n{\n  ret \u003d std::get\u003cT\u003e(found-\u003esecond);\n}\n\nalso log error for this failure too, as Jason Ling has mentioned in that previous comment.",
      "range": {
        "startLine": 83,
        "startChar": 18,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "333861b9_3c3a0eb8",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 83,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "I changed the implementation to handle the exception from the caller function.",
      "parentUuid": "772fbdad_8e9a456a",
      "range": {
        "startLine": 83,
        "startChar": 18,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b495f32_e0796c97",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "nit:\n\nI would suggest to make the function bool to indicate if the function has failed. \nSo the caller can use if condition to check success before using ret value.",
      "range": {
        "startLine": 85,
        "startChar": 8,
        "endLine": 85,
        "endChar": 19
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aa019cb_edf2a5e5",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "I changed the implementation to handle the exception from the caller function.",
      "parentUuid": "3b495f32_e0796c97",
      "range": {
        "startLine": 85,
        "startChar": 8,
        "endLine": 85,
        "endChar": 19
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af78bbfa_2568f919",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 88,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-20T22:47:41Z",
      "side": 1,
      "message": "doesn\u0027t look like properties is mutated so use const qualifier?",
      "range": {
        "startLine": 88,
        "startChar": 20,
        "endLine": 88,
        "endChar": 35
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3c6b9aa_690f4be8",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 88,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "nit:\n\nis get config a better name?",
      "range": {
        "startLine": 88,
        "startChar": 11,
        "endLine": 88,
        "endChar": 19
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a54dd77c_f97ff2d7",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 88,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af78bbfa_2568f919",
      "range": {
        "startLine": 88,
        "startChar": 20,
        "endLine": 88,
        "endChar": 35
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea75d671_f1102d58",
        "filename": "include/GPIOSensor.hpp",
        "patchSetId": 8
      },
      "lineNbr": 88,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3c6b9aa_690f4be8",
      "range": {
        "startLine": 88,
        "startChar": 11,
        "endLine": 88,
        "endChar": 19
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "041d94f8_de040000",
        "filename": "src/GPIOSensor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "nit:\n\nWhat if found \u003d\u003d ifcAndProperties.end()? \nShouldn\u0027t we handle this situation?",
      "range": {
        "startLine": 16,
        "startChar": 12,
        "endLine": 16,
        "endChar": 48
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deead0f2_577b0136",
        "filename": "src/GPIOSensor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 18,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-20T22:53:43Z",
      "side": 1,
      "message": "this can throw, is that OK?",
      "range": {
        "startLine": 18,
        "startChar": 52,
        "endLine": 18,
        "endChar": 75
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "985cec47_d6aefab6",
        "filename": "src/GPIOSensor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "nit:\n\nif conn is null will this crash?",
      "range": {
        "startLine": 23,
        "startChar": 15,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ba0d27d_571cbe86",
        "filename": "src/GPIOSensor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "is this used? if not, remove this.",
      "range": {
        "startLine": 26,
        "startChar": 4,
        "endLine": 26,
        "endChar": 30
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0fa665c_44f96ddf",
        "filename": "src/GPIOSensor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 40,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "Out of these lines, which is expected to throw an error? \nCan keep only the required statements in try and move everything outside the try statement? \nLike the for loop and it\u0027s contents.",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 40,
        "endChar": 9
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0fa84cd_b5b69b8b",
        "filename": "src/GPIOSensor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "nit:\n\nHow are we achieving this? we are still going ahead and making ifcAdded in line 55 rt?",
      "range": {
        "startLine": 46,
        "startChar": 11,
        "endLine": 46,
        "endChar": 49
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8632a74_476cdedb",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 12,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "use lower camel case",
      "range": {
        "startLine": 12,
        "startChar": 53,
        "endLine": 12,
        "endChar": 65
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "923ff50d_649af150",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 12,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8632a74_476cdedb",
      "range": {
        "startLine": 12,
        "startChar": 53,
        "endLine": 12,
        "endChar": 65
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef2ef127_3a91d80c",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 17,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "nit:\n\nCan we use boost flat map?",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 18
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99fc3ef7_82f9113a",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 17,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef2ef127_3a91d80c",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 18
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "682f2a5a_09180e1c",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "nit:\n\ndo you think it will be a cleaner code if we use bool return type and passed value as argument? \nSo all failure path can return false.\n\nyou can use std::tuple\u003cbool, int\u003e as return type too.",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98b75d8d_b219679f",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T22:02:23Z",
      "side": 1,
      "message": "I converted to exception for error handling.",
      "parentUuid": "682f2a5a_09180e1c",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51681f98_c31ab34f",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-20T22:47:41Z",
      "side": 1,
      "message": "forceUpdate, coding standards.",
      "range": {
        "startLine": 85,
        "startChar": 55,
        "endLine": 85,
        "endChar": 67
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1036216_396d9bf9",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-20T22:47:41Z",
      "side": 1,
      "message": "Unless there are multiple io contexts you should be able to just call bus.get_io_context()\n(And if there are multiple IO contexts I\u0027d be very surprised)\n\nsee\nhttps://github.com/openbmc/sdbusplus/blob/master/include/sdbusplus/asio/connection.hpp#L321",
      "range": {
        "startLine": 85,
        "startChar": 21,
        "endLine": 85,
        "endChar": 48
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2ff3e61_8b9f9ab0",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51681f98_c31ab34f",
      "range": {
        "startLine": 85,
        "startChar": 55,
        "endLine": 85,
        "endChar": 67
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e95a6ee_45aab85c",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f1036216_396d9bf9",
      "range": {
        "startLine": 85,
        "startChar": 21,
        "endLine": 85,
        "endChar": 48
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27cb7ade_7c1eb2b8",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 88,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "??",
      "range": {
        "startLine": 88,
        "startChar": 4,
        "endLine": 88,
        "endChar": 65
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8b7c7f4_862eab5f",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 88,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "changed it to 1 second polling interval.",
      "parentUuid": "27cb7ade_7c1eb2b8",
      "range": {
        "startLine": 88,
        "startChar": 4,
        "endLine": 88,
        "endChar": 65
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38b2dc66_4bc581fa",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 95,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-21T17:44:05Z",
      "side": 1,
      "message": "a bit more descriptive? mention that the timer is canceled, print the stringified EC and something to identify which GPIO object it corresponds to. Maybe the dbus path is a good starter point?",
      "range": {
        "startLine": 95,
        "startChar": 16,
        "endLine": 95,
        "endChar": 58
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da654851_2501aafd",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 95,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "There is only one timer for all dbus objects but I changed it to include the error message.",
      "parentUuid": "38b2dc66_4bc581fa",
      "range": {
        "startLine": 95,
        "startChar": 16,
        "endLine": 95,
        "endChar": 58
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a558cec6_e5a4840a",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 100,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-21T17:44:05Z",
      "side": 1,
      "message": "This should be an impossible scenario according to Boost documentation.\nhttps://www.boost.org/doc/libs/1_66_0/doc/html/boost_asio/reference/basic_waitable_timer/async_wait.html\n\n Can we be a bit more loud with the error message?",
      "range": {
        "startLine": 100,
        "startChar": 16,
        "endLine": 100,
        "endChar": 68
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "211b8bd9_c7e42c98",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 100,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a558cec6_e5a4840a",
      "range": {
        "startLine": 100,
        "startChar": 16,
        "endLine": 100,
        "endChar": 68
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b64bdab3_6b239a6e",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "nit:\n\nCan we use boost flat map?",
      "range": {
        "startLine": 104,
        "startChar": 12,
        "endLine": 104,
        "endChar": 30
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0da68eb6_a932459a",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 104,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b64bdab3_6b239a6e",
      "range": {
        "startLine": 104,
        "startChar": 12,
        "endLine": 104,
        "endChar": 30
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "407b8b88_6617c373",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "Can\u0027t we use force_update itself? why do we need new variable?\nforce_update is passed by value and not by reference rt?",
      "range": {
        "startLine": 105,
        "startChar": 12,
        "endLine": 105,
        "endChar": 44
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2ee565b_2d0dd837",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "407b8b88_6617c373",
      "range": {
        "startLine": 105,
        "startChar": 12,
        "endLine": 105,
        "endChar": 44
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "531e88b1_fedc3860",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 109,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-20T22:47:41Z",
      "side": 1,
      "message": "currently this can be -1 under error conditions but this isn\u0027t checked.\nSo it looks like a GPIO line that can\u0027t be read\nIf changed to throw exceptions then this should then be wrapped in try catch.",
      "range": {
        "startLine": 109,
        "startChar": 21,
        "endLine": 109,
        "endChar": 26
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68a5f192_1a69ba8b",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 109,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "531e88b1_fedc3860",
      "range": {
        "startLine": 109,
        "startChar": 21,
        "endLine": 109,
        "endChar": 26
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3f17321_b27cbfac",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 110,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "What are we trying to do here?",
      "range": {
        "startLine": 110,
        "startChar": 62,
        "endLine": 110,
        "endChar": 69
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec833525_4c46b13f",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 110,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3f17321_b27cbfac",
      "range": {
        "startLine": 110,
        "startChar": 62,
        "endLine": 110,
        "endChar": 69
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b2f61cb_58906cdc",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 116,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "is this line supposed to be error? or just a info message?",
      "range": {
        "startLine": 116,
        "startChar": 20,
        "endLine": 116,
        "endChar": 29
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89f23678_a1c6929d",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 116,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b2f61cb_58906cdc",
      "range": {
        "startLine": 116,
        "startChar": 20,
        "endLine": 116,
        "endChar": 29
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bb8f61f_e5887c07",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 123,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-20T22:47:41Z",
      "side": 1,
      "message": "const auto\u0026?",
      "range": {
        "startLine": 123,
        "startChar": 25,
        "endLine": 123,
        "endChar": 33
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de1251b0_2ee08ac6",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 123,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "Can you use the actual type instead of auto?\nSo that line 125 becomes more readable.",
      "range": {
        "startLine": 123,
        "startChar": 25,
        "endLine": 123,
        "endChar": 33
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "297340c3_a0ea0776",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 123,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "de1251b0_2ee08ac6",
      "range": {
        "startLine": 123,
        "startChar": 25,
        "endLine": 123,
        "endChar": 33
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ba13baa_c09dc27c",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 123,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bb8f61f_e5887c07",
      "range": {
        "startLine": 123,
        "startChar": 25,
        "endLine": 123,
        "endChar": 33
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d99c3845_862e498c",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-20T22:47:41Z",
      "side": 1,
      "message": "needChange, coding standards.",
      "range": {
        "startLine": 129,
        "startChar": 16,
        "endLine": 129,
        "endChar": 27
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7141e171_07e0f9e7",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-21T17:44:05Z",
      "side": 1,
      "message": "Also it looks like you can completely eliminate need_change and place this code in the conditional surrounding line 115.\nThat appears to be the only place where you would update the LED right?\n(either the functional state has changed or you\u0027re forcing an update)",
      "range": {
        "startLine": 129,
        "startChar": 12,
        "endLine": 129,
        "endChar": 28
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1952554f_99cee197",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d99c3845_862e498c",
      "range": {
        "startLine": 129,
        "startChar": 16,
        "endLine": 129,
        "endChar": 27
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fe7250c_46aa12d9",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "I was trying to minimize calling the same dbus object too many times. For example, if two cables are associated to the same fault led group, it might call to the same led dbus object to turn it on/off. We can still eliminate this clause and place it in the line you suggested but I thought the code is more readable in this way.",
      "parentUuid": "7141e171_07e0f9e7",
      "range": {
        "startLine": 129,
        "startChar": 12,
        "endLine": 129,
        "endChar": 28
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f729d75_4416a4f4",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-09-22T21:58:39Z",
      "side": 1,
      "message": "ack, I\u0027m OK with this then.",
      "parentUuid": "9fe7250c_46aa12d9",
      "range": {
        "startLine": 129,
        "startChar": 12,
        "endLine": 129,
        "endChar": 28
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cf7f194_1d13ccde",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 133,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "nit:\nhave you tested to see if this will in-turn throw error? \nname suggest we will assert, that is why I am curious.",
      "range": {
        "startLine": 133,
        "startChar": 20,
        "endLine": 133,
        "endChar": 63
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17bf3999_02a84ddb",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 133,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "ah, \"assert on fault led group\" means turn the led group if the corresponding cable is not properly seated. I have changed the to driverFaultLedGroup to be more descriptive.",
      "parentUuid": "0cf7f194_1d13ccde",
      "range": {
        "startLine": 133,
        "startChar": 20,
        "endLine": 133,
        "endChar": 63
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ce09b81_9baa5d6b",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 161,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "Can we use boost flat map?",
      "range": {
        "startLine": 161,
        "startChar": 4,
        "endLine": 161,
        "endChar": 22
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cc81d26_929306ee",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 161,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ce09b81_9baa5d6b",
      "range": {
        "startLine": 161,
        "startChar": 4,
        "endLine": 161,
        "endChar": 22
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec4b86f2_c94b2204",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 174,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "what if cableIfc is null?",
      "range": {
        "startLine": 174,
        "startChar": 12,
        "endLine": 174,
        "endChar": 20
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d749d65_798c567f",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 174,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "yes it is empty in the case. The reason why we want a such empty interface is to give the searching ability for ipmid. For example, if ipmid wants to list all the cables from the system, it can call to dbus GetSubTree with interface equal to the cable interface. This will give a list of objects that has the cable interface.",
      "parentUuid": "ec4b86f2_c94b2204",
      "range": {
        "startLine": 174,
        "startChar": 12,
        "endLine": 174,
        "endChar": 20
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcfe4bf8_3abeb3ed",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 178,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "what if connectorIfc is null?",
      "range": {
        "startLine": 178,
        "startChar": 12,
        "endLine": 178,
        "endChar": 24
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1989ff20_bc4a4816",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 178,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "yes, see the explanation from cableifc",
      "parentUuid": "dcfe4bf8_3abeb3ed",
      "range": {
        "startLine": 178,
        "startChar": 12,
        "endLine": 178,
        "endChar": 24
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ecb5fd4c_0dd4328f",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 184,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2021-09-21T10:27:09Z",
      "side": 1,
      "message": "what if statusIfc is null?",
      "range": {
        "startLine": 184,
        "startChar": 12,
        "endLine": 184,
        "endChar": 21
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14a391fe_17758f04",
        "filename": "src/GPIOSensorMain.cpp",
        "patchSetId": 8
      },
      "lineNbr": 184,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-09-22T21:44:28Z",
      "side": 1,
      "message": "yes, see the explanation from cableifc",
      "parentUuid": "ecb5fd4c_0dd4328f",
      "range": {
        "startLine": 184,
        "startChar": 12,
        "endLine": 184,
        "endChar": 21
      },
      "revId": "a3023757479f2ec89353681cf9e9fc9ef84a7df9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}