{
  "comments": [
    {
      "key": {
        "uuid": "2d19d5e8_bd10be08",
        "filename": ".clang-tidy",
        "patchSetId": 36
      },
      "lineNbr": 1,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:41:15Z",
      "side": 1,
      "message": "Does this file come from anywhere, or is it all original content? If it comes from somewhere, then where?",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0ca2452_83eadadf",
        "filename": ".clang-tidy",
        "patchSetId": 36
      },
      "lineNbr": 1,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T16:26:40Z",
      "side": 1,
      "message": "Depends on how you define original.  I wrote it originally for bmcweb.",
      "parentUuid": "2d19d5e8_bd10be08",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "978be5a6_a7dbf316",
        "filename": ".clang-tidy",
        "patchSetId": 36
      },
      "lineNbr": 1,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-06T10:38:49Z",
      "side": 1,
      "message": "Sounds good. Are comments allowed in this file, to mention that? Also, will this file proliferate into many multiple copies everywhere? I am guessing this is like a .clang-format file, in that you need to copy it everywhere it\u0027s needed, unfortunately, because clang-format does a directory-specific search when ran, so you can\u0027t just reference a common copy of it held elsewhere.",
      "parentUuid": "e0ca2452_83eadadf",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ab690dc_fa5e0b49",
        "filename": ".clang-tidy",
        "patchSetId": 36
      },
      "lineNbr": 1,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-09T18:23:49Z",
      "side": 1,
      "message": "I don\u0027t believe comments are allowed.  There\u0027s a patchset to add this to the docs repo so we don\u0027t proliferate, although each individual repo will have its own styles to some extent, given where they are today.",
      "parentUuid": "978be5a6_a7dbf316",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "449c0beb_28cf227f",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 36
      },
      "lineNbr": 127,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:41:15Z",
      "side": 1,
      "message": "I wonder why it wanted \"path\" to be reconstructed like that here?",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a55e98d7_bfd2766a",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 36
      },
      "lineNbr": 127,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T16:26:40Z",
      "side": 1,
      "message": "I suspect because path is a reference, using path would always be a copy, whereas this in theory could use RVO to make it a move?  Just a guess in the blind.",
      "parentUuid": "449c0beb_28cf227f",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d29e6629_488f6b15",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 36
      },
      "lineNbr": 127,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-06T10:38:49Z",
      "side": 1,
      "message": "Might also be because the lambda is capturing by copy, and so it wants to construct it again so it can copy the reference object.\n\nIt does seem like a micro-optimization to want to have \"path\" be a reference and not just an ordinary variable that can be passed around when needed.",
      "parentUuid": "a55e98d7_bfd2766a",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43e7818d_0b666ea4",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 36
      },
      "lineNbr": 127,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-09T18:23:49Z",
      "side": 1,
      "message": "But it\u0027s not a reference here.  It\u0027s taken by value/new construction, so the old code and this should be equivalent as far as the compiler is concerned......   It\u0027s too early for this kind of thinking.",
      "parentUuid": "d29e6629_488f6b15",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0264152_7c03ba6b",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 36
      },
      "lineNbr": 127,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-02-09T22:49:35Z",
      "side": 1,
      "message": "I believe this is a workaround for a bug in C++17 not supporting structured binding. GCC allows it, but clang does not. This is fixed in C++20",
      "parentUuid": "43e7818d_0b666ea4",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c6fdf3c_d13157c2",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 36
      },
      "lineNbr": 127,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-11T21:46:03Z",
      "side": 1,
      "message": "OK, makes sense. Might want to put a comment here explaining this, for the next reader who wonders why this was done.",
      "parentUuid": "c0264152_7c03ba6b",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0480c7d_f5d5320a",
        "filename": "src/ExitAirTempSensor.cpp",
        "patchSetId": 36
      },
      "lineNbr": 127,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-16T01:45:15Z",
      "side": 1,
      "message": "I can\u0027t fully explain why it was done, so I\u0027m worried about adding a comment that\u0027s incorrect.  I would much rather it just \"look weird\" for now, so hopefully someone with more knowledge can see it and fix it at some point.",
      "parentUuid": "5c6fdf3c_d13157c2",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ada2a093_82b80370",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 36
      },
      "lineNbr": 366,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:41:15Z",
      "side": 1,
      "message": "Interesting, did not know about std::from_chars(), curious why this change? It\u0027s not a purely mechanical change like the others.",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a35ce072_d8cbd412",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 36
      },
      "lineNbr": 366,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T16:26:40Z",
      "side": 1,
      "message": "std::from_chars is just better in nearly every way, unless you care about locale stuff.\n\n1. It returns an error code instead of throwing.\n2. It can handle any int type through the template that supports std::numeric_limits (ie all of them), not just the few that are defined for stoul\n3. It has better defined behavior when you\u0027re reading into an integer type that might need to be downcast to a smaller type (ie, it doesn\u0027t need the down cast at all).\n4. It doesn\u0027t pull in locale code, and isn\u0027t locale specific.\n\n\nIt was done here because we were getting a warning on compressing an unsigned long into an int, whereas with from_chars, we can load data into the int directly.  I would\u0027ve called this a mechanical change, but I\u0027m happy to mention it in the commit message if you want.",
      "parentUuid": "ada2a093_82b80370",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d56aed3d_f6c9aa0a",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 36
      },
      "lineNbr": 366,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-06T10:38:49Z",
      "side": 1,
      "message": "Nice, that makes sense. It would be worth mentioning some of these advantages, perhaps in a comment, as to why an ordinary std::stoul() wasn\u0027t done anymore.",
      "parentUuid": "a35ce072_d8cbd412",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19a1bec1_551f0058",
        "filename": "src/IntrusionSensorMain.cpp",
        "patchSetId": 36
      },
      "lineNbr": 366,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-09T18:23:49Z",
      "side": 1,
      "message": "I\u0027m going to answer no in this case;  from_chars is used often enough across the project that requiring a comment for every invocation would be a lot of extra code.  We\u0027ve already gone through replacing them in other repos, and haven\u0027t added the \"why this is better\" comment.\n\nComing up to 1000ft view, if we had to add an inline comment for every language feature we swapped in that was better (std::variant, std::span, std::optional, std::array, ect) half the code would be comments about that.",
      "parentUuid": "d56aed3d_f6c9aa0a",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9a71df1_501ec00c",
        "filename": "src/Utils.cpp",
        "patchSetId": 36
      },
      "lineNbr": 202,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:41:15Z",
      "side": 1,
      "message": "This looks like a downgrade in the syntax of this for-loop, curious why that had to be?",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54efdb7f_f88b7336",
        "filename": "src/Utils.cpp",
        "patchSetId": 36
      },
      "lineNbr": 202,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T16:26:40Z",
      "side": 1,
      "message": "in theory it\u0027s an upgrade, because we\u0027re now using the built-in methods for walking symlinks rather than trying to recurse them ourselves.\n\nThis was found because clang-tidy (rightly) warns on recursion, as in some extreme cases it can pop the stack.  Probably unlikely in this case, but worth it to change to get the check enabled.",
      "parentUuid": "e9a71df1_501ec00c",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53c92b55_bcb7ac14",
        "filename": "src/Utils.cpp",
        "patchSetId": 36
      },
      "lineNbr": 202,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-06T10:38:49Z",
      "side": 1,
      "message": "Makes sense, but couldn\u0027t you have just added fs::directory_options::follow_directory_symlink to the parameters, without changing the syntax of the for-loop?",
      "parentUuid": "54efdb7f_f88b7336",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78a61f80_f8d3b437",
        "filename": "src/Utils.cpp",
        "patchSetId": 36
      },
      "lineNbr": 202,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-09T18:23:49Z",
      "side": 1,
      "message": "No, because the old way returned a directory reference, the new way returns a directory iterator (it\u0027s hard to see because they\u0027re both auto).\n\nWe need the directory iterator so that we can do p.disable_recursion_pending();\non it on line 216.  std::filesystem::path doesn\u0027t have that method.",
      "parentUuid": "53c92b55_bcb7ac14",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1920d60c_e5009505",
        "filename": "src/Utils.cpp",
        "patchSetId": 36
      },
      "lineNbr": 216,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-05T08:41:15Z",
      "side": 1,
      "message": "This is a functional change, not just a syntax cleanup, but it\u0027s a good bug fix. Apply the depth limitation to all subdirectories/symlinks, instead of just applying it to only symlinks.",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "176d041d_6f6d1cad",
        "filename": "src/Utils.cpp",
        "patchSetId": 36
      },
      "lineNbr": 216,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-05T16:26:40Z",
      "side": 1,
      "message": "In theory the behavior is identical, in the old patchset we decremented symlinkDepth before recursing, so it should\u0027ve worked properly, this is just a change to support changing to relying on the recursive symlink iterator instead.",
      "parentUuid": "1920d60c_e5009505",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f24fd3e3_9ad07904",
        "filename": "src/Utils.cpp",
        "patchSetId": 36
      },
      "lineNbr": 216,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-06T10:38:49Z",
      "side": 1,
      "message": "The old recursion call would act only if it encountered a symlink. The new code doesn\u0027t have an is_symlink() test here, so it would appear to act on all directories encountered, not just symlinks. This is the change I noticed.",
      "parentUuid": "176d041d_6f6d1cad",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c84f262_1204bc50",
        "filename": "src/Utils.cpp",
        "patchSetId": 36
      },
      "lineNbr": 216,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-09T18:23:49Z",
      "side": 1,
      "message": "in the old code, the recursive_directory_iterator was handling recursion for normal files, and the is_symlink case was handling recursion for symlinks.  In the new code, recursive_directory_iterator handles for both, but you make a good point that now depth applies to not just symlinks, but for all things.\n\nThe depth thing was really only there to stop circular symlinks (like exist in hwmon) from recursing forever, for which I think this still works.  With that said, I can try to see if I can get the old behavior.",
      "parentUuid": "f24fd3e3_9ad07904",
      "revId": "1576098f3d056440ded1aa2096e9d3e0062fc9e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}