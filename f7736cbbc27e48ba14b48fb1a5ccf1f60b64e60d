{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8e0040ac_021a98bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2022-11-17T20:04:20Z",
      "side": 1,
      "message": "looking into implementing a suggested non-HEP-specific change in fan handling...",
      "revId": "f7736cbbc27e48ba14b48fb1a5ccf1f60b64e60d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "127c33ef_36d9c80d",
        "filename": "src/FanMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-11-07T23:18:26Z",
      "side": 1,
      "message": "Okay, so warning, this is entirely a drive-by comment as I haven\u0027t poked at the fan code much. However:\n\nI\u0027d *much* prefer we query compatible attribute through the of_node symlink instead of using arbitrary driver name voodoo. As such it\u0027s not really a comment against this patch specifically as it just follows the pattern of the existing code, but I still think we can do better. I\u0027d prefer we fix the approach first and *then* add support for the GXP fan controller using the fixed approach.\n\nThat said, it\u0027s also concerning that we need to know the type of the fan controller...",
      "range": {
        "startLine": 78,
        "startChar": 29,
        "endLine": 78,
        "endChar": 37
      },
      "revId": "f7736cbbc27e48ba14b48fb1a5ccf1f60b64e60d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "064997e2_3738c4cd",
        "filename": "src/FanMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-11-08T02:01:38Z",
      "side": 1,
      "message": "\u003e That said, it\u0027s also concerning that we need to know the type of the fan controller...\n\nhttps://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/50430\n\nWe don\u0027t actually use it for anything.  \"Aspeed\" was just a naming poor choice made in EM to differentiate the built-in PWM drivers from say, a MAX3318,  Really we should\u0027ve called it SOC or something.\n\nNot sure if we want to try to fix it here though.",
      "parentUuid": "127c33ef_36d9c80d",
      "range": {
        "startLine": 78,
        "startChar": 29,
        "endLine": 78,
        "endChar": 37
      },
      "revId": "f7736cbbc27e48ba14b48fb1a5ccf1f60b64e60d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3a2b948_5b002e4b",
        "filename": "src/FanMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-11-08T02:45:12Z",
      "side": 1,
      "message": "\u003e Aspeed\" was just a naming poor choice made in EM to differentiate the built-in PWM drivers from say, a MAX3318,  Really we should\u0027ve called it SOC or something.\n\nEven then it doesn\u0027t feel quite right? I suspect what we care about is the controller\u0027s association with specific fans in the cooling zone topology, not whether it\u0027s a controller in the SoC or hanging off some I2C bus?",
      "parentUuid": "064997e2_3738c4cd",
      "range": {
        "startLine": 78,
        "startChar": 29,
        "endLine": 78,
        "endChar": 37
      },
      "revId": "f7736cbbc27e48ba14b48fb1a5ccf1f60b64e60d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cde68d4e_f1640106",
        "filename": "src/FanMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2022-11-17T20:04:20Z",
      "side": 1,
      "message": "Thanks for the commentary! I\u0027ve been digging deeper some of the details on sensor handling, and started looking into what it would take to switch to using of_node/comparability checks as suggested.\n\nOne issue I\u0027m running into: I\u0027m not having much luck so far figuring out what \u0027compatible\u0027 string we\u0027d want to check to identify Aspeed and Nuvoton devices.\n\nFor GXP fans, the compatible string is called out with an obviously named \"hpe,gxp-fan-ctrl\" inside a GXP.dts \n\nAny thoughts on where I should be looking to find compatibility info for Aspeed and Nuvoton?",
      "parentUuid": "f3a2b948_5b002e4b",
      "range": {
        "startLine": 78,
        "startChar": 29,
        "endLine": 78,
        "endChar": 37
      },
      "revId": "f7736cbbc27e48ba14b48fb1a5ccf1f60b64e60d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b5ce20b_0e1609ea",
        "filename": "src/FanMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2022-11-17T20:36:36Z",
      "side": 1,
      "message": "Followup: my current assumption is that anything with \"Aspeed,*\" would be considered Aspeed. \n\nI\u0027m basing this one the usages of \"Aspeed, *\" here;\nhttps://github.com/openbmc/meta-bytedance/blob/master/meta-g220a/recipes-kernel/linux/linux-aspeed/0004-ARM-dts-aspeed-Add-uart-routing-node.patch\n\nWould \"Nuvoton, *\" handle for Nuvoton devices?\n\nbut clearly I\u0027m still missing some pieces re: usage of Aspeed and Nuvoton naming, so any links to more info on the subject are also appreciated!",
      "parentUuid": "cde68d4e_f1640106",
      "range": {
        "startLine": 78,
        "startChar": 29,
        "endLine": 78,
        "endChar": 37
      },
      "revId": "f7736cbbc27e48ba14b48fb1a5ccf1f60b64e60d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ae03742_1faa2dca",
        "filename": "src/FanMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2022-11-17T22:12:33Z",
      "side": 1,
      "message": "Another option is name property, example /sys/class/hwmon/xxx/name",
      "parentUuid": "5b5ce20b_0e1609ea",
      "range": {
        "startLine": 78,
        "startChar": 29,
        "endLine": 78,
        "endChar": 37
      },
      "revId": "f7736cbbc27e48ba14b48fb1a5ccf1f60b64e60d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47e13f54_e257979a",
        "filename": "src/FanMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-11-17T23:14:12Z",
      "side": 1,
      "message": "\u003e Any thoughts on where I should be looking to find compatibility info for Aspeed and Nuvoton?\n\nSure, this is in the devicetree binding documentation, which is required for every piece of devicetree-supported hardware that has a kernel driver:\n\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/devicetree/bindings/hwmon/aspeed-pwm-tacho.txt?h\u003dv6.1-rc5#n22\n\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/devicetree/bindings/hwmon/npcm750-pwm-fan.txt?h\u003dv6.1-rc5#n9\n\n\u003e Another option is name property, example /sys/class/hwmon/xxx/name\n\nI strongly prefer we don\u0027t do this. The name is arbitrarily chosen by the driver[1], compatible strings are well-defined and always identify the hardware, which seems to be what we\u0027re trying to do here.\n\n[1] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/ABI/testing/sysfs-class-hwmon?h\u003dv6.1-rc5#n1",
      "parentUuid": "1ae03742_1faa2dca",
      "range": {
        "startLine": 78,
        "startChar": 29,
        "endLine": 78,
        "endChar": 37
      },
      "revId": "f7736cbbc27e48ba14b48fb1a5ccf1f60b64e60d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dd84dd4_aa24b7d4",
        "filename": "src/FanMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2022-11-17T23:46:44Z",
      "side": 1,
      "message": "That\u0027s very helpful, thanks! (both for the links, and the discussion on the whys or why nots for alternative paths)",
      "parentUuid": "47e13f54_e257979a",
      "range": {
        "startLine": 78,
        "startChar": 29,
        "endLine": 78,
        "endChar": 37
      },
      "revId": "f7736cbbc27e48ba14b48fb1a5ccf1f60b64e60d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0981fd34_e2f928ad",
        "filename": "src/FanMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2023-04-03T20:29:21Z",
      "side": 1,
      "message": "I\u0027ve created a proposed change to using of_node/compatible here: https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/62006\n\nAny further suggestions or thoughts are extremely welcome- figuring out how all this works in the context of openbmc has been a fantastic learning experience :)",
      "parentUuid": "2dd84dd4_aa24b7d4",
      "range": {
        "startLine": 78,
        "startChar": 29,
        "endLine": 78,
        "endChar": 37
      },
      "revId": "f7736cbbc27e48ba14b48fb1a5ccf1f60b64e60d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}