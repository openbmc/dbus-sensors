{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3eac35ff_67ae662c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-09-20T16:56:34Z",
      "side": 1,
      "message": "Is this an issue itself? Should this be fixed - only one of the match should be used?",
      "range": {
        "startLine": 11,
        "startChar": 59,
        "endLine": 13,
        "endChar": 63
      },
      "revId": "416c96a673bdd484985b6a91f2c32bd090a50a08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91a5b26e_34ef6fd7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2024-09-23T03:16:56Z",
      "side": 1,
      "message": "This is implemented in Util, to adapt to the config of \"PowerState\", \"ChassisState\" from EM, so I don\u0027t think it can be changed. PSUSensorMain will check the power state type of each sensor on a power-off to decide whether to deactivate, but on a power-on, it will call createSensors directly (with onlyActivate set to true).",
      "parentUuid": "3eac35ff_67ae662c",
      "range": {
        "startLine": 11,
        "startChar": 59,
        "endLine": 13,
        "endChar": 63
      },
      "revId": "416c96a673bdd484985b6a91f2c32bd090a50a08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8731e4c_09ce5804",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-09-24T18:24:33Z",
      "side": 1,
      "message": "So in practice, only one of \"PowerState\" and \"ChassisState\" would be defined/used for a given sensor. As a result only one match would fire. Maybe I am missing something",
      "parentUuid": "91a5b26e_34ef6fd7",
      "range": {
        "startLine": 11,
        "startChar": 59,
        "endLine": 13,
        "endChar": 63
      },
      "revId": "416c96a673bdd484985b6a91f2c32bd090a50a08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bf7c0b6_b4293e92",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2024-09-25T02:33:12Z",
      "side": 1,
      "message": "No, the matches are defined in PSUSensorMain (https://github.com/openbmc/dbus-sensors/blob/e1dcb5c1f2d33048a55b20fc1a9830ea02c9d814/src/PSUSensorMain.cpp#L1156), not for each sensor, and both matches are fired on a power change.\n\nOn a power off, as it checks the power type (https://github.com/openbmc/dbus-sensors/blob/e1dcb5c1f2d33048a55b20fc1a9830ea02c9d814/src/PSUSensorMain.cpp#L1129), so each sensor is deactivated one time corresponding to the power match type they are defined with.\n\nBut on a power on, it calls createSensors directly (https://github.com/openbmc/dbus-sensors/blob/e1dcb5c1f2d33048a55b20fc1a9830ea02c9d814/src/PSUSensorMain.cpp#L1123), so all sensors will be activated TWICE, as we have 2 signals here. You can see here.",
      "parentUuid": "b8731e4c_09ce5804",
      "range": {
        "startLine": 11,
        "startChar": 59,
        "endLine": 13,
        "endChar": 63
      },
      "revId": "416c96a673bdd484985b6a91f2c32bd090a50a08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6ef1a7b_80f5ad73",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-09-27T21:11:06Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2bf7c0b6_b4293e92",
      "range": {
        "startLine": 11,
        "startChar": 59,
        "endLine": 13,
        "endChar": 63
      },
      "revId": "416c96a673bdd484985b6a91f2c32bd090a50a08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "397135ac_bab211af",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-09-20T16:56:34Z",
      "side": 1,
      "message": "Hopefully, there is not a use case that activate() can be called with a newPath without deactivate() is called with the \"oldPath\".\n\n+1 this patch since i think it is reasonable to assume that if the driver is deleted and create again, potentially with a newPath, deactivate is called before activate.",
      "revId": "416c96a673bdd484985b6a91f2c32bd090a50a08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "276e089e_95a3be37",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2024-09-23T03:16:56Z",
      "side": 1,
      "message": "I don\u0027t think this is the case since activate() and deativate() are simply used in on construction/destruction and power change, and not for hosting more than one i2c device info for one sensor. Just my thought. Hope this fix covers correctly all the cases.",
      "parentUuid": "397135ac_bab211af",
      "revId": "416c96a673bdd484985b6a91f2c32bd090a50a08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "003fb5ee_b54a770e",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-09-27T21:20:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "276e089e_95a3be37",
      "revId": "416c96a673bdd484985b6a91f2c32bd090a50a08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}