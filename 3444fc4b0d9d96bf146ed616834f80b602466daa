{
  "comments": [
    {
      "key": {
        "uuid": "3c1044c4_61cd4606",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 235,
      "author": {
        "id": 1000934
      },
      "writtenOn": "2021-05-03T06:03:21Z",
      "side": 1,
      "message": "Considering the reading value might go below low thresholds as expected\nafter CPU is powered off, I think it need to use checkThresholdsPowerDelay\nfor the sensor which PowerState is not Always.\n(like https://github.com/openbmc/dbus-sensors/blob/6b6891c52e550c42507d4b413cbc4c6a09235535/src/ADCSensor.cpp#L226 in ADCSensor)\nWhat do you think?",
      "revId": "3444fc4b0d9d96bf146ed616834f80b602466daa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74d6fed6_c990f31f",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 235,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2021-05-04T12:42:45Z",
      "side": 1,
      "message": "Ok, I\u0027ve spend a lot of time trying to understand all this Timer code in a `checkThresholdsPowerDelay` function.\nIt seems like it is coming from this commit (https://github.com/openbmc/dbus-sensors/commit/46342ec359c8e0ed543ebb352cfba8f26ce85afe) that added  2 sec delay (now it is even 5) to check thresholds after a value is acquired, to support a fact, that voltage can drop faster than pgood check.\nBut for me it is not clear what behaviour is needed for the \u0027PowerState\u0027 parameter. I thought that this parameter represents a question \"When should we read value?\", but not \"When do we need to check thresholds for a value?\" (because in your version of a commit it seems like you\u0027ve supported this logic).\nIf we use \"When should we read value?\" logic, we should use code exactly as it currently is in ADC sensor:\nhttps://github.com/openbmc/dbus-sensors/blob/6b6891c52e550c42507d4b413cbc4c6a09235535/src/ADCSensor.cpp#L226\nThis way we will always be using `checkThresholdsPowerDelay` function to check thresholds. So if the limits for voltage sensor for example 8V-12V, we wouldn\u0027t assert on power off (0V) even if the \u0027PowerState\u0027 is \u0027always\u0027. We would be reading 0V, but the app would not create any assertions. The difference with the \u0027PowerState\u0027:\u0027On\u0027/\u0027POST\u0027 is a fact that with these parameters we wouldn\u0027t be reading any values at all in a wrong state, but simply set sensor value to NaN.",
      "parentUuid": "3c1044c4_61cd4606",
      "revId": "3444fc4b0d9d96bf146ed616834f80b602466daa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be7c1299_60db2f87",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 235,
      "author": {
        "id": 1000934
      },
      "writtenOn": "2021-05-05T12:02:21Z",
      "side": 1,
      "message": "In my conception, the time we need to monitor the reading value is the time we want to check if the sensor reading value is in the limit(threshold) we expected.\nI think that starting to add PowerState in psusensor means we start to take the power status into consideration, so I would like to add checkThresholdsPowerDelay in this patchset.\n\nIf the PowerState is \"Always\", the function readingStateGood will always return True.\nSo, it will always delay 5 seconds to assert low threshold after the reading value is smaller than 8V in your case.",
      "parentUuid": "74d6fed6_c990f31f",
      "revId": "3444fc4b0d9d96bf146ed616834f80b602466daa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc744c76_25b4f644",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 235,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2021-05-05T13:10:21Z",
      "side": 1,
      "message": "I\u0027ve already updated this patchset to include support for `checkThresholdsPowerDelay`.\n\nWhat I was trying to tell, I think we should use this code\n```\nvoid PSUSensor::checkThresholds(void)\n{\n    if (!readingStateGood())\n    {\n        return;\n    }\n\n    thresholds::checkThresholdsPowerDelay(this, thresholdTimer);\n}\n```\n\nInstead of this one (your patchset):\n```\nvoid PSUSensor::checkThresholds(void)\n{\n    if (!readingStateGood())\n    {\n        return;\n    }\n    if (this-\u003ereadState \u003d\u003d PowerState::always)\n    {\n        thresholds::checkThresholds(this);\n    }\n    else\n    {\n        thresholds::checkThresholdsPowerDelay(this, thresholdTimer);\n    }\n}\n```\n\nI\u0027m still unsure which variant is correct as there are no docs on what we should expect from \u0027PowerState\u0027 parameter.\nBut at least I think that we should keep consistent behaviour between psusensor and adcsensor which already uses this \u0027checkThresholdsPowerDelay\u0027 functionality.\n\n```\nvoid ADCSensor::checkThresholds(void)\n{\n    if (!readingStateGood())\n    {\n        return;\n    }\n\n    thresholds::checkThresholdsPowerDelay(this, thresholdTimer);\n}\n```\n\nIf we want to change the way `checkThresholds` works I think a separate commit should be created that would make changes for psusensor and adcsensor both.\nBut again, I\u0027m not sure if it is needed to.",
      "parentUuid": "be7c1299_60db2f87",
      "revId": "3444fc4b0d9d96bf146ed616834f80b602466daa",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}