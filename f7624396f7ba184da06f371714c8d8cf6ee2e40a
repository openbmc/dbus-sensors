{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a168ab8a_eaeb0865",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-04-09T16:32:28Z",
      "side": 1,
      "message": "ipmbsensor:",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b4d3151_2bf0772c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2023-03-22T11:38:50Z",
      "side": 1,
      "message": "double spaces?",
      "range": {
        "startLine": 9,
        "startChar": 36,
        "endLine": 9,
        "endChar": 53
      },
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c926bdc3_adb73bc5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2023-03-22T11:38:50Z",
      "side": 1,
      "message": "typo: mantissa",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89276d17_8cf0aa7e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-24T04:14:17Z",
      "side": 1,
      "message": "Can you please extract the code and write test cases to demonstrate it\u0027s correctness?",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6335daf6_93775e92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001286
      },
      "writtenOn": "2023-02-24T04:16:47Z",
      "side": 1,
      "message": "By test cases you mean a separate program to test the change ?",
      "parentUuid": "89276d17_8cf0aa7e",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9428bb46_cf4f4391",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-24T04:23:44Z",
      "side": 1,
      "message": "Well, write a set of google-test-based test cases. For example:\n\nhttps://github.com/openbmc/dbus-sensors/blob/master/tests/test_Utils.cpp",
      "parentUuid": "6335daf6_93775e92",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4cad70d_945df960",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001286
      },
      "writtenOn": "2023-02-24T05:32:08Z",
      "side": 1,
      "message": "These unit tests are written for individual utility functions. This PR\u0027s code changes don\u0027t update any utility function. No tests are added for any sensor monitoring class. It will be great to add unit tests for sensor classes but it will be a new thing rather than adding a test for code changes done here so it\u0027s better to add that in separate activity/PR.",
      "parentUuid": "9428bb46_cf4f4391",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d07a42b5_fe919fba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-24T13:00:06Z",
      "side": 1,
      "message": "No, adding tests in a separate PR will mean it won\u0027t get done. Let\u0027s raise the bar - I think it\u0027s better to do it incrementally, starting with this patch. Especially given the current behaviour is apparently broken.",
      "parentUuid": "a4cad70d_945df960",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba428a37_81cc871b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001286
      },
      "writtenOn": "2023-02-27T17:16:59Z",
      "side": 1,
      "message": "Here adding unit test for sensor won\u0027t be incremental. decoding of response is not small unit which can be tested with a unit test in isolation. It will require some kind of instrumentation in code to mock dbus io and push test data from existing read method. AFAIK We don\u0027t have any guidelines/rules on such unit tests either. It will not be incremental. Adding such test suite will be significant change in itself hence can\u0027t be appended on a minor bug fix.",
      "parentUuid": "d07a42b5_fe919fba",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81ec011a_9d2d7244",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-01T09:43:17Z",
      "side": 1,
      "message": "You\u0027re really making that sound like a lot of effort, and it\u0027s not. You\u0027ve put more effort into pushing back against writing tests than it actually takes to write the tests as I requested.\n\nThere\u0027s no reason you can\u0027t extract the linear eleven bit decoding formula into a stand-alone function in e.g. `pmbus.cpp`, and then pass the message buffer or relevant fields from the response parsing here to that stand-alone function to calculate the value.\n\nHaving got the formula implementation isolated it is then straight-forward to unit test it by encoding/decoding known values and buffers and asserting the output is as expected.\n\nPlease write the unit tests.",
      "parentUuid": "ba428a37_81cc871b",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c991498_7bbdf2cf",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 342,
      "author": {
        "id": 1001343
      },
      "writtenOn": "2023-03-23T06:03:08Z",
      "side": 1,
      "message": "instead of 11 can we use some meaning #define variable here \nBITSHIFTELVEN",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3981f383_560cefb2",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 342,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2023-04-05T20:24:29Z",
      "side": 1,
      "message": "don\u0027t use #define; use constexpr int, please.",
      "parentUuid": "5c991498_7bbdf2cf",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfe0163b_1f91740a",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 342,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2023-04-09T16:32:28Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "3981f383_560cefb2",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ff66c29_cbba45be",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 344,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2023-03-22T11:38:50Z",
      "side": 1,
      "message": "correct to \u0027mantissa\u0027 and in all other places too.",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af8fc9ea_93c3de19",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 344,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2023-03-22T11:38:50Z",
      "side": 1,
      "message": "Can you make it a mask with meaningful name?",
      "range": {
        "startLine": 344,
        "startChar": 61,
        "endLine": 344,
        "endChar": 66
      },
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a3610e7_7a9caaca",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 344,
      "author": {
        "id": 1001343
      },
      "writtenOn": "2023-03-23T06:03:08Z",
      "side": 1,
      "message": "Same here also",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ce7b7db_1321480c",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2023-03-22T11:38:50Z",
      "side": 1,
      "message": "std::pow can throw many exceptions. It\u0027s good to catch exception and handle error accordingly.\nRef: https://en.cppreference.com/w/cpp/numeric/math/pow",
      "range": {
        "startLine": 345,
        "startChar": 29,
        "endLine": 345,
        "endChar": 37
      },
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ad280a1_7a1056b9",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 1001343
      },
      "writtenOn": "2023-03-23T06:03:08Z",
      "side": 1,
      "message": "same here also",
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35456a59_d3ccdf90",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2023-04-05T20:24:29Z",
      "side": 1,
      "message": "std::pow does not throw exceptions, it sets flags that should be checked. given that the base is 2.0 (positive and finite), there are no exceptions that can happen here.",
      "parentUuid": "3ce7b7db_1321480c",
      "range": {
        "startLine": 345,
        "startChar": 29,
        "endLine": 345,
        "endChar": 37
      },
      "revId": "f7624396f7ba184da06f371714c8d8cf6ee2e40a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}