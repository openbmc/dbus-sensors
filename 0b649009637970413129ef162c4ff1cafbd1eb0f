{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "58455eb3_07587562",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001906
      },
      "writtenOn": "2025-02-04T08:32:39Z",
      "side": 1,
      "message": "Hi George,\nCould you give us some comment?",
      "revId": "0b649009637970413129ef162c4ff1cafbd1eb0f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "532c0bd5_020a6d14",
        "filename": "src/psu/PSUSensorMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 803,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2025-02-05T02:33:00Z",
      "side": 1,
      "message": "Personally，I have some doubts about this.\n\nIf L:795 is not true, it means that `lable_PowerState` is not configured, then the readState obtained in L:518 should be Always. Why do we need to call getPowerState again? I think the `readState` obtained in else should also be `Always` right?\n\nLogically, sorry, I still don\u0027t understand what problem this solves?",
      "range": {
        "startLine": 803,
        "startChar": 16,
        "endLine": 803,
        "endChar": 55
      },
      "revId": "0b649009637970413129ef162c4ff1cafbd1eb0f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e559e556_7bc5f87e",
        "filename": "src/psu/PSUSensorMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 803,
      "author": {
        "id": 1001906
      },
      "writtenOn": "2025-02-05T06:32:38Z",
      "side": 1,
      "message": "L522 is outside the for loop, while L566 marks the beginning of the loop.\nhttps://github.com/openbmc/dbus-sensors/blob/master/src/psu/PSUSensorMain.cpp#L566\nFor example, if we configure EM as follows:\n\n\"in0_Name\": \"MB_P12V_MEM0_VOLT_V\",\n\"in0_PowerState\": \"PowerOn\",\n\"in1_Name\": \"MB_P5V_STBY_VOLT_V\",\n\"in2_Name\": \"MB_PVDD33_S5_VOLT_V\",\n\"in3_Name\": \"MB_P1V8_STBY_VOLT_V\",\n\"in4_Name\": \"MB_P12V_MEM1_VOLT_V\",\n\"in5_Name\": \"MB_P1V8_CPU_RT_VOLT_V\",\nThe in0_PowerState value is assigned at L803.\n\nHowever, inX_PowerState values can get unintentionally overwritten due to contamination by in0_PowerState.",
      "parentUuid": "532c0bd5_020a6d14",
      "range": {
        "startLine": 803,
        "startChar": 16,
        "endLine": 803,
        "endChar": 55
      },
      "revId": "0b649009637970413129ef162c4ff1cafbd1eb0f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb1931d8_cb2d42b0",
        "filename": "src/psu/PSUSensorMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 803,
      "author": {
        "id": 1001906
      },
      "writtenOn": "2025-02-05T06:33:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e559e556_7bc5f87e",
      "range": {
        "startLine": 803,
        "startChar": 16,
        "endLine": 803,
        "endChar": 55
      },
      "revId": "0b649009637970413129ef162c4ff1cafbd1eb0f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f6cfe18_edbb7baf",
        "filename": "src/psu/PSUSensorMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 803,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2025-02-05T07:11:55Z",
      "side": 1,
      "message": "There are two questions here:\n1. Does `inX_PowerState` refer to `in1_PowerState` or `in2_PowerState` right?\n2. If in1_PowerState is not configured, should we expect readState to be `On` or `Always`? If it is `Always`, from the current logic, even if it enters else, I think readState is still `On`.\n\nAlso, Please do not click `Done`",
      "parentUuid": "eb1931d8_cb2d42b0",
      "range": {
        "startLine": 803,
        "startChar": 16,
        "endLine": 803,
        "endChar": 55
      },
      "revId": "0b649009637970413129ef162c4ff1cafbd1eb0f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1465b2cf_4e397d1e",
        "filename": "src/psu/PSUSensorMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 803,
      "author": {
        "id": 1001906
      },
      "writtenOn": "2025-02-05T08:33:31Z",
      "side": 1,
      "message": "1. Yes, inX_PowerState refers to the previous power state.\n2. We expect readState to be Always. The getPowerState function uses auto findPowerState \u003d cfg.find(\"PowerState\"), which means it will return Always if \"PowerState\" is not explicitly set.",
      "parentUuid": "3f6cfe18_edbb7baf",
      "range": {
        "startLine": 803,
        "startChar": 16,
        "endLine": 803,
        "endChar": 55
      },
      "revId": "0b649009637970413129ef162c4ff1cafbd1eb0f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1008cd6_f59b2af0",
        "filename": "src/psu/PSUSensorMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 803,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2025-02-05T09:09:08Z",
      "side": 1,
      "message": "\u003e 2. We expect readState to be Always. The getPowerState function uses auto findPowerState \u003d cfg.find(\"PowerState\"), which means it will return Always if \"PowerState\" is not explicitly set.\n\nIf the configuration is as follows:\n```\n\"in0_Name\": \"MB_P12V_MEM0_VOLT_V\",\n\"in0_PowerState\": \"PowerOn\",\n\"in1_Name\": \"MB_P5V_STBY_VOLT_V\",\n\"in2_Name\": \"MB_PVDD33_S5_VOLT_V\",\n\"in3_Name\": \"MB_P1V8_STBY_VOLT_V\",\n\"in4_Name\": \"MB_P12V_MEM1_VOLT_V\",\n\"in5_Name\": \"MB_P1V8_CPU_RT_VOLT_V\",\n```\nCan I understand it this way, without this patch:\n```\nin0_PowerState \u003d On\nin1_PowerState \u003d On\nin2_PowerState \u003d On\n...\n```\nWith this patch:\n```\nin0_PowerState \u003d On\nin1_PowerState \u003d Always\nin2_PowerState \u003d Always\n...\n```\nIs this what you think? If yes, as I said above, even if else is entered, readState is still On\n*even if it enters else, I think readState is still On.*\n\nMaybe I am wrong, @Patrick, could you please take a look?",
      "parentUuid": "1465b2cf_4e397d1e",
      "range": {
        "startLine": 803,
        "startChar": 16,
        "endLine": 803,
        "endChar": 55
      },
      "revId": "0b649009637970413129ef162c4ff1cafbd1eb0f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43fac3c6_269f539a",
        "filename": "src/psu/PSUSensorMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 803,
      "author": {
        "id": 1001906
      },
      "writtenOn": "2025-02-06T01:51:30Z",
      "side": 1,
      "message": "May I know why the readState is still “On” with this patch applied?\n\nIt is Harma EM config\nhttps://github.com/openbmc/entity-manager/blob/master/configurations/meta/harma_mb.json#L126\nhttps://github.com/openbmc/entity-manager/blob/master/configurations/meta/harma_mb.json#L258\n\nI add debug log in L964\n\ninline std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, PowerState state)\n{\n    switch (state)\n    {\n    case PowerState::on:\n        os \u003c\u003c \"on\";\n        break;\n    case PowerState::biosPost:\n        os \u003c\u003c \"biosPost\";\n        break;\n    case PowerState::always:\n        os \u003c\u003c \"always\";\n        break;\n    case PowerState::chassisOn:\n        os \u003c\u003c \"chassisOn\";\n        break;\n    default:\n        os \u003c\u003c \"unknown\";\n        break;\n    }\n    return os;\n}\n                sensors[sensorName] \u003d std::make_shared\u003cPSUSensor\u003e(\n                    sensorPathStr, sensorType, objectServer, dbusConnection, io,\n                    sensorName, std::move(sensorThresholds), *interfacePath,\n                    readState, findSensorUnit-\u003esecond, factor,\n                    psuProperty.maxReading, psuProperty.minReading,\n                    psuProperty.sensorOffset, labelHead, thresholdConfSize,\n                    pollRate, i2cDev);\n                sensors[sensorName]-\u003esetupRead();\n                ++numCreated;\n//                if constexpr (debug)\n//                {\n                    std::cerr\n                        \u003c\u003c \"Created \" \u003c\u003c numCreated\n\t\t\t\u003c\u003c \" Sensor name: \" \u003c\u003c sensorName\n\t\t\t\u003c\u003c \" readState: \" \u003c\u003c readState\n\t\t\t\u003c\u003c \" sensors so far\\n\";\n\n//                }\n            }\n        }\n        \n        \nThe generated log is as follows.\n\nCreated 16 Sensor name: MB_P3V3_STBY_VOLT_V readState: always sensors so far\nCreated 17 Sensor name: MB_P12V_STBY_VOLT_V readState: always sensors so far\nCreated 18 Sensor name: MB_PVDD18_S5_VOLT_V readState: always sensors so far\nCreated 19 Sensor name: MB_PVDD11_S3_VOLT_V readState: on sensors so far\nCreated 20 Sensor name: MB_P12V_AUX_VOLT_V readState: always sensors so far\n\nCreated 77 Sensor name: MB_PVDD33_S5_VOLT_V readState: always sensors so far\nCreated 78 Sensor name: MB_P1V8_CPU_RT_VOLT_V readState: on sensors so far\nCreated 79 Sensor name: MB_P12V_MEM0_VOLT_V readState: always sensors so far\nCreated 80 Sensor name: MB_P1V8_STBY_VOLT_V readState: always sensors so far\nCreated 81 Sensor name: MB_P5V_STBY_VOLT_V readState: always sensors so far\nCreated 82 Sensor name: MB_P12V_MEM1_VOLT_V readState: always sensors so far",
      "parentUuid": "b1008cd6_f59b2af0",
      "range": {
        "startLine": 803,
        "startChar": 16,
        "endLine": 803,
        "endChar": 55
      },
      "revId": "0b649009637970413129ef162c4ff1cafbd1eb0f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c57210e4_ca160097",
        "filename": "src/psu/PSUSensorMain.cpp",
        "patchSetId": 5
      },
      "lineNbr": 803,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2025-02-06T08:31:23Z",
      "side": 1,
      "message": "Ah, I see what you mean. It\u0027s my mistake 😞",
      "parentUuid": "43fac3c6_269f539a",
      "range": {
        "startLine": 803,
        "startChar": 16,
        "endLine": 803,
        "endChar": 55
      },
      "revId": "0b649009637970413129ef162c4ff1cafbd1eb0f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}