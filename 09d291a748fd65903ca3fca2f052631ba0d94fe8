{
  "comments": [
    {
      "key": {
        "uuid": "5001979a_426aa949",
        "filename": "include/IpmbSensor.hpp",
        "patchSetId": 18
      },
      "lineNbr": 84,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-12-17T00:47:26Z",
      "side": 1,
      "message": "input.size()\u003d\u003doffset+1 will pass line 70, this is undefined",
      "range": {
        "startLine": 84,
        "startChar": 30,
        "endLine": 84,
        "endChar": 40
      },
      "revId": "09d291a748fd65903ca3fca2f052631ba0d94fe8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "322416d2_8d3bdfd2",
        "filename": "include/IpmbSensor.hpp",
        "patchSetId": 18
      },
      "lineNbr": 148,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-12-17T00:47:26Z",
      "side": 1,
      "message": "nit: since you refer new method as read_me, I would flip the logic here, make a flag isReadMe",
      "range": {
        "startLine": 148,
        "startChar": 4,
        "endLine": 148,
        "endChar": 28
      },
      "revId": "09d291a748fd65903ca3fca2f052631ba0d94fe8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57a263a4_4a134e1e",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 18
      },
      "lineNbr": 157,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-12-17T00:47:26Z",
      "side": 1,
      "message": "This could just modify class member commandData directly to avoid an extra creation and copy of vector",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 157,
        "endChar": 47
      },
      "revId": "09d291a748fd65903ca3fca2f052631ba0d94fe8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e814853e_50cc907c",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 18
      },
      "lineNbr": 291,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-12-17T00:47:26Z",
      "side": 1,
      "message": "repeating the same code for IpmbType::PXE1410CVR.\nOnly difference is readingFormat\n\nconsider combine them",
      "range": {
        "startLine": 268,
        "startChar": 0,
        "endLine": 291,
        "endChar": 5
      },
      "revId": "09d291a748fd65903ca3fca2f052631ba0d94fe8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac09055d_3fbe711e",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 18
      },
      "lineNbr": 477,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-12-17T00:47:26Z",
      "side": 1,
      "message": "This is only needed for certain sensor type. Current implementation would call this for all sensors.\nI feel like it can be optimized.",
      "range": {
        "startLine": 477,
        "startChar": 0,
        "endLine": 477,
        "endChar": 75
      },
      "revId": "09d291a748fd65903ca3fca2f052631ba0d94fe8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d7d3e97_5520978c",
        "filename": "src/IpmbSensor.cpp",
        "patchSetId": 18
      },
      "lineNbr": 486,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-12-17T00:47:26Z",
      "side": 1,
      "message": "need update to match the code",
      "range": {
        "startLine": 485,
        "startChar": 45,
        "endLine": 486,
        "endChar": 16
      },
      "revId": "09d291a748fd65903ca3fca2f052631ba0d94fe8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}