{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3ffd8d21_40df6634",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2022-03-07T15:30:09Z",
      "side": 1,
      "message": "https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-logging/+/51708 merged, so are we good here? We can abandon this?",
      "revId": "2ed3bae14fe7566d9cd00695edf7cdc8e2a81864",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89d16702_77ec8093",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-07T15:53:22Z",
      "side": 1,
      "message": "I suspect so.",
      "parentUuid": "3ffd8d21_40df6634",
      "revId": "2ed3bae14fe7566d9cd00695edf7cdc8e2a81864",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a3ffde7_3edde839",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-18T22:22:48Z",
      "side": 1,
      "message": "This seems rather unfortunate.  Can you give me a few days to see if I can come up with something better between this and lg2?\n\nHow are you testing compiling clang?  Are you leveraging meson subproject/wraps to do it?  I\u0027m slightly surprised that it doesn\u0027t work if you are because then both lg2 and this should be compiled with clang and use the experimental::source_location instead.  I can see it not working if you\u0027re attempting to use an SDK or something for lg2.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 10
      },
      "revId": "2ed3bae14fe7566d9cd00695edf7cdc8e2a81864",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b187029e_3dedfdd8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-18T22:37:53Z",
      "side": 1,
      "message": "\u003e This seems rather unfortunate.  Can you give me a few days to see if I can come up with something better between this and lg2?\n\u003e \n\u003e How are you testing compiling clang?  Are you leveraging meson subproject/wraps to do it?  I\u0027m slightly surprised that it doesn\u0027t work if you are because then both lg2 and this should be compiled with clang and use the experimental::source_location instead.  I can see it not working if you\u0027re attempting to use an SDK or something for lg2.\n\n\n\nNo problem, I\u0027m not in a super huge rush.  My overall goal is to get:\nhttps://gerrit.openbmc-project.xyz/c/openbmc/openbmc-build-scripts/+/51391\n\nmerged, which hopefully also answers how I\u0027m testing compiling with clang.  For what it\u0027s worth, I\u0027ve also pulled in meta-clang into my yocto builds, and compile with:\nTOOLCHAIN:pn-\u003crecipename\u003e \u003d \"clang\"\nin my local.conf.  Each give roughly the same results.  Sometimes yocto will find clang-specific 32/64 bitness issues, but it\u0027s pretty rare.\n\nI totally agree, this patch is a lame solution, happy to have a better one.",
      "parentUuid": "0a3ffde7_3edde839",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 10
      },
      "revId": "2ed3bae14fe7566d9cd00695edf7cdc8e2a81864",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64634f13_e5c03b0e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-01T15:51:04Z",
      "side": 1,
      "message": "clang compiles, but it requires everything to compile with clang.  The failure with your openbmc-build-scripts attempt is that we end up with phosphor-logging compiled with GCC and then dbus-sensors compiled with clang.\n\nDo we really want to support that dual-compiler set up?  Are there likely to be an other ABI issues with attempting that?\n\nShould we use this (clang) as an opportunity to also test the subprojects workflows?  I tested dbus-sensors that way and it compiles fine except for needing a fix in sdbusplus:\n\nremote:   https://gerrit.openbmc-project.xyz/c/openbmc/sdbusplus/+/51648 asio: object_server: remove unused variable [NEW]",
      "parentUuid": "b187029e_3dedfdd8",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 10
      },
      "revId": "2ed3bae14fe7566d9cd00695edf7cdc8e2a81864",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be45e041_80390f18",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-03-01T17:46:08Z",
      "side": 1,
      "message": "Ok, that\u0027s good to know.  To be clear, the goal here is just that the code compiles with clang, because it catches things that gcc doesn\u0027t (even with similar flags).  I have no real reason to actually use clang binaries on target, nor that they even give the same behavior when compiled with clang, with the exception of the occasional asan/msan run to try to debug something, but gcc supports sanitizers these days, so we still have a path there.\n\n\u003e The failure with your openbmc-build-scripts attempt is that we end up with phosphor-logging compiled with GCC and then dbus-sensors compiled with clang.\n\nNeat, any idea why there\u0027s an ABI issue between them?  I realize it\u0027s a quagmire to try to dive into, but I would\u0027ve expected it to work (maybe source_location is too new?)\n\n\n\u003e Do we really want to support that dual-compiler set up?  \n\nI\u0027ve been running dual compilers for the projects I maintain for a long time (bmcweb since basically commit 1), and this is the first ABI issue I\u0027ve seen, although admittedly, bmcweb/dbus-sensors/entity-manager don\u0027t rely on hardly any compiled libraries.\n\n\u003e Should we use this (clang) as an opportunity to also test the subprojects workflows?\n\nThat might work.  I can look at that;  We\u0027ll have to figure out how to cache, and at some point I worry a little that we\u0027d be better off just building in yocto with meta-clang, but that\u0027s a bigger discussion.",
      "parentUuid": "64634f13_e5c03b0e",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 10
      },
      "revId": "2ed3bae14fe7566d9cd00695edf7cdc8e2a81864",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac2782f6_ae42f016",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-03T17:34:01Z",
      "side": 1,
      "message": "See https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-logging/+/51708 for a potential solution.",
      "parentUuid": "be45e041_80390f18",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 10
      },
      "revId": "2ed3bae14fe7566d9cd00695edf7cdc8e2a81864",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}