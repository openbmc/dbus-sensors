{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7d30bb53_b9720d05",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-01-19T21:27:09Z",
      "side": 1,
      "message": "I tried this version of the patch, and the Pressure sensor disappeared.",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a853d18_e49cc859",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-01-20T15:07:33Z",
      "side": 1,
      "message": "Could you please comment line 456 and check in your platform. So that, we can confirm whether pressure sensor is removed due to erasing config or refactored code.",
      "parentUuid": "7d30bb53_b9720d05",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "954e5af0_1fdbbb31",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-01-20T16:38:22Z",
      "side": 1,
      "message": "when I commented out that line the sensor was there again",
      "parentUuid": "6a853d18_e49cc859",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97e67bd8_6e97dc3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2022-01-21T01:31:49Z",
      "side": 1,
      "message": "@Matt, Do you have multiple sensors with the same bus and address?\nIf that is true, I am wondering, whether the config key needs to be bus/ address + sensor type or interface",
      "parentUuid": "954e5af0_1fdbbb31",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3603949f_a82f940d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-01-21T03:19:10Z",
      "side": 1,
      "message": "Yea, we have a dsp310 that provides both temperature and pressure.",
      "parentUuid": "97e67bd8_6e97dc3c",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5d95ec0_c9d76572",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-01-21T14:51:40Z",
      "side": 1,
      "message": "In the new patchset, I have added a condition to check the typeName of sensor in line 397 and 449. If the typeName is neither pressure nor humidity, then sensorCreated flag will be true and it will erase the config.\n\nWhether this approach is fine ?\n\nIf not, in the first patchset, I have created a vector to store the sensor names and will check if the sensor name is already created or not. If it is already created, it will skip and iterate to next path.\n\nPlease provide your suggestions.",
      "parentUuid": "3603949f_a82f940d",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99eab12e_6273e99c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2022-01-21T16:37:29Z",
      "side": 1,
      "message": "I still think identify and removed the already consumed config from the iteration loop is more efficient. \nCan you share or point me to the configuration file for these sensors?\nSeems like addinng typeName to the ConfigKey may work?",
      "parentUuid": "c5d95ec0_c9d76572",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6545731e_ff750957",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-01-21T16:44:15Z",
      "side": 1,
      "message": "https://github.com/openbmc/entity-manager/blob/master/configurations/Blyth.json\nThe DPS310 has temp and pressure and the SI7020 has temp and humidity.\n\nThere\u0027s also the TMP423 family of devices that have multiple temps per device.",
      "parentUuid": "99eab12e_6273e99c",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b56f34aa_e644cef6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2022-01-21T16:57:22Z",
      "side": 1,
      "message": "Hmm, I would expect the 2nd sensor (name1) would be created at line 419 loop before the erase config. Are they not under the same hwmon path?",
      "parentUuid": "6545731e_ff750957",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55545ded_8b0587a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-01-21T17:03:38Z",
      "side": 1,
      "message": "the filesystem looks like:\n\n/sys/bus/iio/devices/iio:device1# ls\nin_humidityrelative_offset  in_humidityrelative_scale   in_temp_raw                 name                        power                       uevent\nin_humidityrelative_raw     in_temp_offset              in_temp_scale               of_node                     subsystem\n\n\n/sys/bus/iio/devices/iio:device2# ls\nin_pressure_input               in_temp_input                   name                            subsystem\nin_pressure_oversampling_ratio  in_temp_oversampling_ratio      of_node                         uevent\nin_pressure_sampling_frequency  in_temp_sampling_frequency      power",
      "parentUuid": "b56f34aa_e644cef6",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcdf003a_38458fe0",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 9
      },
      "lineNbr": 167,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T21:06:50Z",
      "side": 1,
      "message": "How about:\n\n  auto operator\u003c\u003d\u003e(const SensorConfigKey\u0026) const \u003d default;",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 167,
        "endChar": 5
      },
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee0987d8_636a23ed",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 9
      },
      "lineNbr": 175,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T21:06:50Z",
      "side": 1,
      "message": "This seems really fancy for what you\u0027re doing.  Is it necessary to use a reference_wrapper on all these or can you just use a copy?",
      "range": {
        "startLine": 172,
        "startChar": 0,
        "endLine": 175,
        "endChar": 61
      },
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0c60107_fca356c5",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 9
      },
      "lineNbr": 175,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-01-21T14:51:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee0987d8_636a23ed",
      "range": {
        "startLine": 172,
        "startChar": 0,
        "endLine": 175,
        "endChar": 61
      },
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1556babc_0b041df2",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 9
      },
      "lineNbr": 201,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T21:06:50Z",
      "side": 1,
      "message": "Can you use std::holds_alternative / std::get in order to avoid having to deal with pointers?\n\nif (!std::holds_alternative\u003cuint64_t\u003e(busCfg-\u003esecond) || std::holds_alternative\u003cuint64_t\u003e(addrCfg-\u003esecond))\n{\n    ... continue;\n}\n\nSensorConfigKey key \u003d { std::get\u003cuint64_t\u003e(busCfg-\u003esecond), std::get\u003cuint64_t\u003e(addrCfg-\u003esecond) };",
      "range": {
        "startLine": 201,
        "startChar": 12,
        "endLine": 201,
        "endChar": 50
      },
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0137848e_2d134046",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 9
      },
      "lineNbr": 201,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-01-21T14:51:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1556babc_0b041df2",
      "range": {
        "startLine": 201,
        "startChar": 12,
        "endLine": 201,
        "endChar": 50
      },
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cee73628_86d74cab",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 9
      },
      "lineNbr": 210,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T21:06:50Z",
      "side": 1,
      "message": "std::move on both of these?",
      "range": {
        "startLine": 210,
        "startChar": 52,
        "endLine": 210,
        "endChar": 60
      },
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a04c3012_9cf7266e",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 9
      },
      "lineNbr": 304,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-01-19T20:41:30Z",
      "side": 1,
      "message": "With https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/50204 I removed the trace for when there is a tempX_input file in sysfs but no config for it, so I think you can just remove this trace too.",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39fe50d9_ff75dcd5",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 9
      },
      "lineNbr": 304,
      "author": {
        "id": 1000869
      },
      "writtenOn": "2022-01-21T14:51:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a04c3012_9cf7266e",
      "revId": "1ad12c30ca80855126859432b49a8e1545b9ebb7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}