{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d1e8e38b_5d53eba6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-10T18:18:15Z",
      "side": 1,
      "message": "More details needed here.",
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad5b409d_fb6b3621",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1001153
      },
      "writtenOn": "2022-05-11T06:22:10Z",
      "side": 1,
      "message": "Could you elaborate what kind of details would be needed?",
      "parentUuid": "d1e8e38b_5d53eba6",
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25eaf971_8678174b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-11T17:24:41Z",
      "side": 1,
      "message": "You\u0027re adding a new supported device type that wasn\u0027t supported.  Why is it useful?  What config parameters does it take that are different than others?  How does it differ from the existing code?",
      "parentUuid": "ad5b409d_fb6b3621",
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2d316d6_503a9539",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-10T18:18:15Z",
      "side": 1,
      "message": "\"I2C ADC\" Is not a specific model of chip to be used, so this is not something we really want to do here.  Per what we do elsewhere, please include the specific model of chip, such that it can be instantiated properly in the new_device mechanisms.",
      "range": {
        "startLine": 48,
        "startChar": 67,
        "endLine": 48,
        "endChar": 73
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4c50b0a_29fa52f5",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1001153
      },
      "writtenOn": "2022-05-11T06:22:10Z",
      "side": 1,
      "message": "But that scenario would potentially conflict implementation in PSUSensors which uses specific models of chip. I don\u0027t really see how this design would for example cover the scenario where ADS7828 is used as onboard adc and at the same time would be used as adc in PSU.",
      "parentUuid": "a2d316d6_503a9539",
      "range": {
        "startLine": 48,
        "startChar": 67,
        "endLine": 48,
        "endChar": 73
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b389fa2e_39ad11a2",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-11T17:28:54Z",
      "side": 1,
      "message": "\u003e But that scenario would potentially conflict implementation in PSUSensors which uses specific models of chip. \n\n\nSpecial emphasis on the word \"potentially\".  There should be one daemon handling any given device to avoid access conflicts, and we will make sure that the lists don\u0027t conflict between psusensor and adcsensor.  FWIW, we already do this to a significant extent.\n\nActually, you bring up a very good point, why isn\u0027t this device being added to PSU sensor?  It seems like we\u0027re reinventing some code to handle what it handles already?  Keep in mind, \"PSUsensor\" is poorly named these days (we could probably rename it at some point) it could arguably be called \"PmBus Sensor\".\n\n\n\u003e I don\u0027t really see how this design would for example cover the scenario where ADS7828 is used as onboard adc and at the same time would be used as adc in PSU.\n\n\nA \"PSU\" is just a collection of components, so it would have an entity-manager config file that specified an exposes of ADS7828, and there would be a separate file that specifies the same record for the baseboard.  That way, this code doesn\u0027t have to have any concept of what a \"PSU\" is, and only deals with the individual pieces.",
      "parentUuid": "c4c50b0a_29fa52f5",
      "range": {
        "startLine": 48,
        "startChar": 67,
        "endLine": 48,
        "endChar": 73
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "928bcec0_b84796dd",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1001153
      },
      "writtenOn": "2022-05-16T08:27:28Z",
      "side": 1,
      "message": "I assumed that PSU sensors is a unique service for PSU sensors. But now it seems logical that support for this particular IC \"ads7828\" could be added to PSU sensor implementation. However, to fully cover the implementation some functionalities would have to be merged from ADC Sensor: \n- \"CPURequired\" parameter to cover the cases where adc provides readings that are above/below threshold when cpu socket is not populated (to avoid triggering alerts)\n- \"BridgeGpio\" parameter to cover the cases where some circuitry has to be switched in order to perform valid reading (battery voltages for example).\n\nWould that be fine?",
      "parentUuid": "b389fa2e_39ad11a2",
      "range": {
        "startLine": 48,
        "startChar": 67,
        "endLine": 48,
        "endChar": 73
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d923a1a_ecd48800",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2022-05-16T16:25:17Z",
      "side": 1,
      "message": "I am not sure PSU sensor is the best place. Even though these are voltage readings, this particular IC is not a PMBus device, but an i2c device. hwmon maybe another option to consider.\n\nBut because of the mentioned special properties of the ADC sensors and powerDelay for checkThresholds, it makes sense to keep it in ADCSensor. \n\nTo be consistent with hwmon and other packages, replace I2CADC with ads7828 in config:\n\"xyz.openbmc_project.Configuration.ADS7828\"",
      "parentUuid": "928bcec0_b84796dd",
      "range": {
        "startLine": 48,
        "startChar": 67,
        "endLine": 48,
        "endChar": 73
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e536a31_efc2443e",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1001153
      },
      "writtenOn": "2022-05-17T07:51:28Z",
      "side": 1,
      "message": "I\u0027m not sure if device type is meaningful since only thing that matters is the interface exposed by the driver and in this particular case it\u0027s compatible.\n\nI\u0027d appreciate some sort of concrete decision in which way you want me to move forward with the implementation.",
      "parentUuid": "7d923a1a_ecd48800",
      "range": {
        "startLine": 48,
        "startChar": 67,
        "endLine": 48,
        "endChar": 73
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11d64efb_201c3858",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1001153
      },
      "writtenOn": "2022-05-23T07:59:53Z",
      "side": 1,
      "message": "Won\u0027t changing I2CADC to ADS7828 conflict with this change: https://gerrit.openbmc.org/c/openbmc/entity-manager/+/53373 that allows instantiating ADS7828 devices in runtime by entity-manager?",
      "parentUuid": "8e536a31_efc2443e",
      "range": {
        "startLine": 48,
        "startChar": 67,
        "endLine": 48,
        "endChar": 73
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0958d4ff_cdc3e87a",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-23T16:06:59Z",
      "side": 1,
      "message": "\u003e \"CPURequired\" parameter to cover the cases where adc provides readings that are above/below threshold when cpu socket is not populated (to avoid triggering alerts)\n\nSeems fine to me for psusensor to support that.  Ideally we\u0027d make this a little more general, with the CPU having its own Entity config file, that we could then enable/disable on, but I\u0027m not that worried about that level of complexity so long as the code is reasonably simple.\n\n\u003e \"BridgeGpio\" parameter to cover the cases where some circuitry has to be switched in order to perform valid reading (battery voltages for example).\n\nThat would be fine as well, although you\u0027re right, we\u0027re getting into some strange territory of mixing use cases.\n\nLets start by getting your documentation updated to call out the specific device (ie ADS7828) in config, then we can start looking at which daemon makes the most sense to expose.  Given that we\u0027re talking about ADCs here, I\u0027m wondering a little if this is a new daemon, given that it\u0027s using i2c to abstract an ADC, there are different sets of code that they need to call.",
      "parentUuid": "11d64efb_201c3858",
      "range": {
        "startLine": 48,
        "startChar": 67,
        "endLine": 48,
        "endChar": 73
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ad6d163_43f1ebb0",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1001048
      },
      "writtenOn": "2022-05-10T10:00:11Z",
      "side": 1,
      "message": "Query : In any point of time hwmonInputIndex will get   -ve value ..?",
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cc2dc90_f0ddeece",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1001153
      },
      "writtenOn": "2022-05-11T06:22:10Z",
      "side": 1,
      "message": "For currently implemented sensors (iio-hwmon and ads7828) it shouldn\u0027t.",
      "parentUuid": "6ad6d163_43f1ebb0",
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f122b17_7f1b1d90",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1001048
      },
      "writtenOn": "2022-05-11T06:33:53Z",
      "side": 1,
      "message": "so better to use it as unsigned int ...?",
      "parentUuid": "4cc2dc90_f0ddeece",
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfd13cdd_0955f1c4",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1001153
      },
      "writtenOn": "2022-05-11T06:38:56Z",
      "side": 1,
      "message": "At the same time i\u0027m not expecting hwmonInputIndex to ever reach value greater than 2,147,483,647 (INT_MAX). If I\u0027m chosing between two unlikely scenarios I\u0027d prefer to maintain the sign if hwmonInputIndex -\u003d 1 goes wrong for some driver",
      "parentUuid": "7f122b17_7f1b1d90",
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0a477c7_8e1924a7",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1001048
      },
      "writtenOn": "2022-05-11T17:35:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dfd13cdd_0955f1c4",
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49c10c9b_c58e550f",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1001048
      },
      "writtenOn": "2022-05-10T10:00:11Z",
      "side": 1,
      "message": "Query : Just wanted to know significance char* used here , In above statement for interfacePath, I see std::string*  used . So can we std::string* here instead char*..?",
      "range": {
        "startLine": 175,
        "startChar": 18,
        "endLine": 175,
        "endChar": 24
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d9052db_de867c4f",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1001153
      },
      "writtenOn": "2022-05-11T06:22:10Z",
      "side": 1,
      "message": "String does not yet support constexpr constructor so this cannot be changed due to lines 46-48:\nstatic constexpr auto sensorTypes{\n    std::to_array\u003cconst char*\u003e({\"xyz.openbmc_project.Configuration.ADC\",\n                                \"xyz.openbmc_project.Configuration.I2CADC\"})};",
      "parentUuid": "49c10c9b_c58e550f",
      "range": {
        "startLine": 175,
        "startChar": 18,
        "endLine": 175,
        "endChar": 24
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93f5e96d_ee88a8fa",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1001048
      },
      "writtenOn": "2022-05-11T06:33:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0d9052db_de867c4f",
      "range": {
        "startLine": 175,
        "startChar": 18,
        "endLine": 175,
        "endChar": 24
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "443362b8_ace9c921",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-05-11T17:32:34Z",
      "side": 1,
      "message": "In modern code, we could recommend using std::string_view, which does support constexpr these days, and has overloads for both string and const char*.\n\nWith that said, that\u0027s unimportant in this patch.",
      "parentUuid": "93f5e96d_ee88a8fa",
      "range": {
        "startLine": 175,
        "startChar": 18,
        "endLine": 175,
        "endChar": 24
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81fb143d_02fe2e3a",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 360,
      "author": {
        "id": 1001048
      },
      "writtenOn": "2022-05-10T10:00:11Z",
      "side": 1,
      "message": "Quick query here  ,As we have assigned nullptr to sensor here so sensor necessarily to be pointer .So instead auto can we use char* or void* as data type..? Please share your thoughts also let me know anything wrong in my understanding.",
      "range": {
        "startLine": 360,
        "startChar": 12,
        "endLine": 360,
        "endChar": 18
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d1e9e55_96c36a84",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 360,
      "author": {
        "id": 1001153
      },
      "writtenOn": "2022-05-11T06:22:10Z",
      "side": 1,
      "message": "sensors is of type: boost::container::flat_map\u003cstd::string, std::shared_ptr\u003cADCSensor\u003e\u003e\u0026 sensors\nSo at line 359 I could have left: std::shared_ptr\u003cADCSensor\u003e sensor \u003d sensors[sensorName] but i\u0027m not really sure why i\u0027m not supposed to use auto here.",
      "parentUuid": "81fb143d_02fe2e3a",
      "range": {
        "startLine": 360,
        "startChar": 12,
        "endLine": 360,
        "endChar": 18
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "166be239_2da98a23",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 360,
      "author": {
        "id": 1001048
      },
      "writtenOn": "2022-05-11T06:33:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7d1e9e55_96c36a84",
      "range": {
        "startLine": 360,
        "startChar": 12,
        "endLine": 360,
        "endChar": 18
      },
      "revId": "5ede36c8055f149d5de1c078e64c8433b8172190",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}