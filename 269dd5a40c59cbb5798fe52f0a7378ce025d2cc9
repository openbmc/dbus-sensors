{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6e92908e_22e73583",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 26,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-05-29T12:14:52Z",
      "side": 1,
      "message": "There is a concern about limiting the support for ```MuxChannel``` and the i2c devices behind it to only dbus-sensors.\n\nhttps://discord.com/channels/775381525260664832/1187158775438778408/1377610867423842415\n\nThere are other devices which may be handled by other daemons such as Voltage regulators (implemented in phosphor-bmc-code-mgmt) which will not be able to use the code here for ```MuxChannel``` support.\n\nEssentially most daemons consuming ```Bus``` property today would need to be capable to consume ```MuxChannel``` property.\n\nI see at least 2 options if people want to create a more general solution which can work for all daemons.\n\n1) Handle the mux internally in EM and expose ```Bus``` field as before which is just the ```MuxChannel``` property resolved by EM at runtime. That will not require any changes to existing daemons to be able to access devices behind the mux.\n\n2) Write some configuration parsing library which can then be pulled in by daemons to resolve their ```MuxChannel``` properties into a concrete ```Bus```.",
      "range": {
        "startLine": 23,
        "startChar": 63,
        "endLine": 26,
        "endChar": 44
      },
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25a7b06e_1ea08515",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 26,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-07-24T20:00:47Z",
      "side": 1,
      "message": "Please see https://gerrit.openbmc.org/c/openbmc/entity-manager/+/75484 which tries to implement option 1 to try to move the solution out of dbus-sensors and handles the mux and expose the `Bus` field in entity-manager.",
      "parentUuid": "6e92908e_22e73583",
      "range": {
        "startLine": 23,
        "startChar": 63,
        "endLine": 26,
        "endChar": 44
      },
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5584b80d_120c77fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-29T01:50:33Z",
      "side": 1,
      "message": "still waiting on the EM schema",
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca9d20ff_1c0bad4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-29T05:26:31Z",
      "side": 1,
      "message": "I\u0027m pinging on Discord and Gerrit",
      "parentUuid": "5584b80d_120c77fe",
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4550c8d_3b24f44d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-29T12:01:32Z",
      "side": 1,
      "message": "Hi @jonico.eustaquio@fii-na.com, do you think you want to weigh in these concerns raised in Discord about where to put the code parsing MuxChannel config? https://discord.com/channels/775381525260664832/1187158775438778408/1377610867423842415",
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e072763b_1aa34610",
        "filename": "src/DeviceMgmt.cpp",
        "patchSetId": 26
      },
      "lineNbr": 48,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-05-29T10:30:19Z",
      "side": 1,
      "message": "inverting the conditional and then looking for \n```std::get_if\u003cstd::uint64_t\u003e(\u0026findBus-\u003esecond) !\u003d nullptr```\nmay help to reduce the nesting here which helps the readability.",
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62bd3060_fce0f4ff",
        "filename": "src/DeviceMgmt.cpp",
        "patchSetId": 26
      },
      "lineNbr": 67,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-05-29T10:30:19Z",
      "side": 1,
      "message": "```bus``` can be const or can inline the whole expression",
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b6d3bc7_1e67e05f",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 26
      },
      "lineNbr": 81,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-05-29T10:30:19Z",
      "side": 1,
      "message": "separate class can go in separate .hpp and .cpp file üòä",
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65d6d743_ebb3cb59",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 26
      },
      "lineNbr": 94,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-05-29T10:30:19Z",
      "side": 1,
      "message": "Why is the implementation in the .hpp file.\n\nThe implementation can go into the .cpp file üòä",
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2a6380d_2559725a",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 26
      },
      "lineNbr": 110,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-05-29T10:30:19Z",
      "side": 1,
      "message": "The bus number is unsigned, right?",
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e4a7270_aec22172",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 26
      },
      "lineNbr": 113,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-05-29T10:30:19Z",
      "side": 1,
      "message": "separate class can go in separate .hpp and .cpp file",
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a16ba567_161f6e32",
        "filename": "src/tests/test_I2C.cpp",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-05-29T10:30:19Z",
      "side": 1,
      "message": "Amazing, so many tests üëç üòä",
      "revId": "269dd5a40c59cbb5798fe52f0a7378ce025d2cc9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}