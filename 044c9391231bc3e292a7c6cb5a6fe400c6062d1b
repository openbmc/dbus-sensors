{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "59eebd8f_53cf25aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-02-13T21:35:05Z",
      "side": 1,
      "message": "To reproduce the issue, should we change the CriticalAlarmLow to assert (point A) and revert back to original value (point B) within 3s? Or does the issue reproduce no matter how long we wait between point A and point B?",
      "revId": "044c9391231bc3e292a7c6cb5a6fe400c6062d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07a8502d_9e762165",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 13
      },
      "lineNbr": 340,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-02-13T21:30:47Z",
      "side": 1,
      "message": "From my understanding, checkThresholds() is not expected to change state. Its only supposed to return the thresholds whose state has changed. Thus doing this \"deassertThresholdOnce\" here which generates alarms is not going to be expected.",
      "revId": "044c9391231bc3e292a7c6cb5a6fe400c6062d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e43ba1d1_3e27adb5",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 13
      },
      "lineNbr": 342,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-02-13T21:32:30Z",
      "side": 1,
      "message": "Second issue, why is this a problem only for the Direction::LOW and not for Direction::HIGH?",
      "revId": "044c9391231bc3e292a7c6cb5a6fe400c6062d1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}