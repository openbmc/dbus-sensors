{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "68bcc148_fa842279",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 42
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "Incremental comments",
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b462859_744ee627",
        "filename": "service_files/meson.build",
        "patchSetId": 42
      },
      "lineNbr": 20,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "this list should really be alphabetical, but not your fault.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 65
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5664a5da_312b0cb5",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 42,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "I don\u0027t think there\u0027s anywhere in this repo (or openbmc for that matter) that we\u0027ve taken this post-declaration return style.\n\nI\u0027m happy to discuss making the change, just not as part of a patch adding a new feature.",
      "range": {
        "startLine": 42,
        "startChar": 29,
        "endLine": 42,
        "endChar": 57
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8d0ce96_bf5c985e",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 42,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-24T05:55:42Z",
      "side": 1,
      "message": "\u003e I don\u0027t think there\u0027s anywhere in this repo (or openbmc for that matter) that we\u0027ve taken this post-declaration return style.\n\nphosphor-health-monitor uses post-declaration return style as that code is recently written.\n\n\u003e \n\u003e I\u0027m happy to discuss making the change, just not as part of a patch adding a new feature.\n\nDone, change to pre-declaration style.",
      "parentUuid": "5664a5da_312b0cb5",
      "range": {
        "startLine": 42,
        "startChar": 29,
        "endLine": 42,
        "endChar": 57
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cba2d913_961b5c13",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "What\u0027s the type here?  Generally when using auto it should be obvious what the resulting type should be, or shoudl be avoiding duplication.  Here it\u0027s not clear to me without looking up what path() returns.",
      "range": {
        "startLine": 49,
        "startChar": 12,
        "endLine": 49,
        "endChar": 16
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "371bcf32_43bb95b4",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 53,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:48:40Z",
      "side": 1,
      "message": "nit, For known length, use std::array\u003cstd::string, 1\u003e and you\u0027ll avoid some memory usage.",
      "range": {
        "startLine": 53,
        "startChar": 17,
        "endLine": 53,
        "endChar": 23
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a21a019_b0f678f5",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "?  Why are we doing a subtree paths call here?  Generally dbus reactors have operated directly against EM and not taken a dependency on object mapper.  Why the change for coroutines?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 59,
        "endChar": 13
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "370ae063_ef56acc6",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "For my understanding, when this is thrown (which looks like it would go all the way to spawn) where is it caught and handled?\n\n(sorry, new to this coroutine stuff)",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 18
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04e1fc63_c1f58eab",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "Why is this a co_await and not just a normal iteration?",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 73
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58c199e9_07f653d9",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:40:11Z",
      "side": 1,
      "message": "Answered in discord.  Done",
      "parentUuid": "04e1fc63_c1f58eab",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 73
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dd5fe0e_b371db09",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 97,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "Shouldn\u0027t these be coming from PDI and not a template?\n\n\"PDI can\u0027t do this yet\" is a perfectly fine answer, I just want to understand.",
      "range": {
        "startLine": 97,
        "startChar": 26,
        "endLine": 97,
        "endChar": 75
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3222954_3672499a",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 102,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "static_cast\u003cInstance*\u003e(this)\n\nLooks like some kind of CRTP?  Generally if we\u0027re casing pointers to a different type I get worried about type issues.  I\u0027m not really following what it\u0027s doing.  Can it be simplified at all?",
      "range": {
        "startLine": 102,
        "startChar": 16,
        "endLine": 102,
        "endChar": 44
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd0fa1a2_6c7360d2",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 112,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "Making this class only apply to a single interface means that we have to construct one match per interface.  Is it possible or simpler (and feel free to tell me it\u0027s not and I\u0027ll believe you) to have a single match on arg0_namespace, and maintain only one match expression?",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 30
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c02db649_5ca3e1dd",
        "filename": "src/GPIOInterface.hpp",
        "patchSetId": 42
      },
      "lineNbr": 33,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "Why is configureGPIO a separate method?  Would it be simpler if we just configured in the constructor?  Or is there a reason that this might get called multiple times?",
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33a3b1d7_916a6b65",
        "filename": "src/GPIOInterface.hpp",
        "patchSetId": 42
      },
      "lineNbr": 103,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "This looks like it\u0027s only used in ConfigureGPIO transitively.  Does this need to be in the class?",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 20
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0b2c1fb_73086748",
        "filename": "src/GPIOInterface.hpp",
        "patchSetId": 42
      },
      "lineNbr": 105,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "Why unique_ptr here?  Can this just be a value?",
      "range": {
        "startLine": 105,
        "startChar": 4,
        "endLine": 105,
        "endChar": 19
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5285bf7a_652f385a",
        "filename": "src/Systemd.cpp",
        "patchSetId": 42
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "Isn\u0027t this a blocking call?  Don\u0027t we need to call the co_return version of this?\n\nStartUnit also returns a structure or an error that doesn\u0027t look like it\u0027s handled by call_noreply?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 30
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8669d242_d9cf5e3b",
        "filename": "src/Systemd.hpp",
        "patchSetId": 42
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "Would this be simpler if we just passed bus into the startUnit method?  Having this class maintain state doesn\u0027t really seem to make it less complex.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 26
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34837f7a_bebf96f7",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 42
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:59:20Z",
      "side": 1,
      "message": "I don\u0027t think anywhere in dbus-sensors have we taken the \"phosphor\" namespace.  Lets be consistent.\n\nThis namespace can just be leak?\n\nphosphor::leak::manager::LeakDetectionManager isn\u0027t any more valuable than\n\nleak::Manager",
      "range": {
        "startLine": 16,
        "startChar": 10,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d5711e7_78fa1b81",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 42
      },
      "lineNbr": 16,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-24T07:44:11Z",
      "side": 1,
      "message": "\u003e I don\u0027t think anywhere in dbus-sensors have we taken the \"phosphor\" namespace.  Lets be consistent.\n\nDone.\n\n\u003e \n\u003e This namespace can just be leak?\n\u003e \n\u003e phosphor::leak::manager::LeakDetectionManager isn\u0027t any more valuable than\n\u003e \n\u003e leak::Manager\n\n\nI have separated different modules based on sub namespaces, so i think its better to preserve that. Please let me know if you still have any concerns?",
      "parentUuid": "34837f7a_bebf96f7",
      "range": {
        "startLine": 16,
        "startChar": 10,
        "endLine": 16,
        "endChar": 18
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "421de4b2_d42dbc37",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 42
      },
      "lineNbr": 62,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:59:20Z",
      "side": 1,
      "message": "Should this map be operating on the config path, not the \"name\"?  If people follow the rules, there shouldn\u0027t be naming collisions, but not everyone follows the rules, so maybe tracking by dbus config path might be safer?",
      "range": {
        "startLine": 62,
        "startChar": 18,
        "endLine": 62,
        "endChar": 30
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa5ab965_fa2c1122",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 42
      },
      "lineNbr": 62,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-24T08:01:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "421de4b2_d42dbc37",
      "range": {
        "startLine": 62,
        "startChar": 18,
        "endLine": 62,
        "endChar": 30
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8947d8c_0af8eb37",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 42
      },
      "lineNbr": 82,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:59:20Z",
      "side": 1,
      "message": "Where\u0027s the code that\u0027s coercing int/string values to the correct type?\n\nIe, the variant visitor mess here:\n\nhttps://github.com/openbmc/dbus-sensors/blob/556e04b8f374a9eb8cf32bf0e36ac46c14873eba/src/VariantVisitors.hpp#L27",
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e469b0ff_b59e7535",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 42
      },
      "lineNbr": 82,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-24T08:06:16Z",
      "side": 1,
      "message": "I am using the PDI generated code, so i don\u0027t need to do any explicit conversion. Refer to code starting at line#82.\n\nMarking this as resolved.",
      "parentUuid": "f8947d8c_0af8eb37",
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9558f2ec_feaedcfd",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 42
      },
      "lineNbr": 94,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:48:40Z",
      "side": 1,
      "message": "Why is each one of these doing individual blocking IO?  Can\u0027t we get all the values in a single shot with GetAllProperties?",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 94,
        "endChar": 21
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19bd2313_b5505e1e",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 42
      },
      "lineNbr": 94,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-24T08:16:18Z",
      "side": 1,
      "message": "No there is no API to GetAllProperties, there is only API to get single property at a time.",
      "parentUuid": "9558f2ec_feaedcfd",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 94,
        "endChar": 21
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a65db6e7_f36dec57",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 42
      },
      "lineNbr": 108,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:59:20Z",
      "side": 1,
      "message": "ok, naive question.... if i wanted to figure out what the type or value of this is.....  where in PDI would I look, and how would someone unfamiliar with the code figure out what this value is?",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 108,
        "endChar": 70
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c544a74_9c0b0678",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 42
      },
      "lineNbr": 108,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-24T08:16:18Z",
      "side": 1,
      "message": "Look at generated code in the following path -\n\nbuilddir/subprojects/phosphor-dbus-interfaces/gen/xyz/openbmc_project/State/Leak/Detector/common.hpp",
      "parentUuid": "a65db6e7_f36dec57",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 108,
        "endChar": 70
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15a4975e_758dced4",
        "filename": "src/leakdetector/LeakDetector.cpp",
        "patchSetId": 42
      },
      "lineNbr": 58,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "Where is this exception caught?",
      "range": {
        "startLine": 58,
        "startChar": 52,
        "endLine": 58,
        "endChar": 54
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "721379ab_f599a1a7",
        "filename": "src/leakdetector/LeakDetector.hpp",
        "patchSetId": 42
      },
      "lineNbr": 43,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "For static const lookup tables like this, please use std::array\u003cstring_view, ...\u003e to avoid a malloc and memory usage on startup.  There\u0027s a bunch of these, please fix all of them.",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 43,
        "endChar": 58
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55e5498f_5b10ebf6",
        "filename": "src/leakdetector/LeakDetector.hpp",
        "patchSetId": 42
      },
      "lineNbr": 91,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "Would much prefer composition over inheritance here.  This multiple inheritence makes it very difficult to determine which interfaces LeakDetector itself supports.  I suspect that GPIOIntf needs to go into a member, given that a leak detector \"utilizes\" a gpio, it isn\u0027t itself a gpio, right?",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 57
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8239da8c_a8c3f2a9",
        "filename": "src/leakdetector/LeakDetector.hpp",
        "patchSetId": 42
      },
      "lineNbr": 108,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "Same as above.  When this gets rethrown, where is it caught?  Ie, if a single leak detector fails to create, where does it get caught so it doesn\u0027t crash all leak detectors?",
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1e7cf56_80a199b6",
        "filename": "src/leakdetector/LeakEvents.cpp",
        "patchSetId": 42
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:48:40Z",
      "side": 1,
      "message": "auto isn\u0027t really appropriate here.  I think... this is a std::string?  But making it explicit helps in readability here.",
      "range": {
        "startLine": 25,
        "startChar": 4,
        "endLine": 25,
        "endChar": 8
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "243c10bf_ecaf277c",
        "filename": "src/leakdetector/LeakEvents.cpp",
        "patchSetId": 42
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:48:40Z",
      "side": 1,
      "message": "nit, std::format would make this a lot clearer.",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 73
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09750eba_483b1ccc",
        "filename": "src/leakdetector/LeakEvents.hpp",
        "patchSetId": 42
      },
      "lineNbr": 46,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:48:40Z",
      "side": 1,
      "message": "I\u0027m having a little trouble tracing what this map represents.  it looks like it stores an event.... then when it deasserts, erases it?  Any reason it\u0027s a map?  There\u0027s only one leak event at a time, correct?",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 46,
        "endChar": 30
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cd26f5f_5818e588",
        "filename": "src/meson.build",
        "patchSetId": 42
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:38:38Z",
      "side": 1,
      "message": "Any reason for a static_library for this?  Seems like relatively simple code",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 9
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}