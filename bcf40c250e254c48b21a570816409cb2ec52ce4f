{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "68bcc148_fa842279",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 42
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "Incremental comments",
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b462859_744ee627",
        "filename": "service_files/meson.build",
        "patchSetId": 42
      },
      "lineNbr": 20,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "this list should really be alphabetical, but not your fault.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 65
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5664a5da_312b0cb5",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 42,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "I don\u0027t think there\u0027s anywhere in this repo (or openbmc for that matter) that we\u0027ve taken this post-declaration return style.\n\nI\u0027m happy to discuss making the change, just not as part of a patch adding a new feature.",
      "range": {
        "startLine": 42,
        "startChar": 29,
        "endLine": 42,
        "endChar": 57
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cba2d913_961b5c13",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "What\u0027s the type here?  Generally when using auto it should be obvious what the resulting type should be, or shoudl be avoiding duplication.  Here it\u0027s not clear to me without looking up what path() returns.",
      "range": {
        "startLine": 49,
        "startChar": 12,
        "endLine": 49,
        "endChar": 16
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a21a019_b0f678f5",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "?  Why are we doing a subtree paths call here?  Generally dbus reactors have operated directly against EM and not taken a dependency on object mapper.  Why the change for coroutines?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 59,
        "endChar": 13
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "370ae063_ef56acc6",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "For my understanding, when this is thrown (which looks like it would go all the way to spawn) where is it caught and handled?\n\n(sorry, new to this coroutine stuff)",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 18
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04e1fc63_c1f58eab",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 42
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "Why is this a co_await and not just a normal iteration?",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 73
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55e5498f_5b10ebf6",
        "filename": "src/leakdetector/LeakDetector.hpp",
        "patchSetId": 42
      },
      "lineNbr": 91,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-23T23:13:58Z",
      "side": 1,
      "message": "Would much prefer composition over inheritance here.  This multiple inheritence makes it very difficult to determine which interfaces LeakDetector itself supports.  I suspect that GPIOIntf needs to go into a member, given that a leak detector \"utilizes\" a gpio, it isn\u0027t itself a gpio, right?",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 57
      },
      "revId": "bcf40c250e254c48b21a570816409cb2ec52ce4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}