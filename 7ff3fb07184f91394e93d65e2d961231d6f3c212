{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "896dc3fc_f418a2de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-25T21:07:07Z",
      "side": 1,
      "message": "Jagpal, any input here?  Please look at intrusion sensor, which functionally does exactly the same thing you\u0027re doing here.  I suspect at least some of the code can be common rather than a rewrite.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f937c59a_c6b24639",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-11-25T22:57:27Z",
      "side": 1,
      "message": "@Ed Sure, i am already using some pieces from common code -\n* SensorData from Utils.hpp\n* loadVariant from Utils.hpp while parsing the EM configuration.\n\nI looked at the code from ChassisIntrusionSensor. Conceptually, there are 2 pieces which can have overlap in terms of their logic. Please let me know if you think there is anything else apart from these two?\n\n1. Read EM configuration-\nhttps://grok.openbmc.org/xref/openbmc/dbus-sensors/src/Utils.cpp?r\u003d2aaf7175\u0026fi\u003dgetSensorConfiguration#156\n\nThe LeakDetection daemons use sdbusplus::async co-routines whereas getSensorConfiguration API is a sync API (and also doesn\u0027t support co-routines). Hence, LeakDetection doesn\u0027t use getSensorConfiguration. Also, I am in plan of moving LeakDetection daemon to https://grok.openbmc.org/xref/openbmc/sdbusplus/include/sdbusplus/async/proxy.hpp?r\u003d06f265f6#176 for easier flow.\n\n2. Read GPIOs\nhttps://grok.openbmc.org/xref/openbmc/dbus-sensors/src/intrusion/ChassisIntrusionSensor.cpp?r\u003dd7be555e#200\nChassisIntrusionSensor uses boost::asio to poll the GPIOs whereas the leakdetection daemon uses co-routines so i am not sure how much code we can make common here.\n\n@Patrick also did a post on \"dbus-sensors with sdbusplus::async coroutines)\nhttps://discord.com/channels/775381525260664832/1304217523465486356/1304217527379034152\nDo you have any concerns with the proposed approach in the post?\n\n\nAlso, as per another comment from @Andrew https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/comment/b1c20d15_c52bf097/ he doesn\u0027t want me to add APIs to Utils.hpp and suggested to add a systemd class. Any concerns there?",
      "parentUuid": "896dc3fc_f418a2de",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db776820_7fac6e69",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T01:24:48Z",
      "side": 1,
      "message": "\u003e @Ed Sure, i am already using some pieces from common code -\n\u003e * SensorData from Utils.hpp\n\u003e * loadVariant from Utils.hpp while parsing the EM configuration.\n\u003e \n\u003e I looked at the code from ChassisIntrusionSensor. Conceptually, there are 2 pieces which can have overlap in terms of their logic. Please let me know if you think there is anything else apart from these two?\n\u003e \n\u003e 1. Read EM configuration-\n\u003e https://grok.openbmc.org/xref/openbmc/dbus-sensors/src/Utils.cpp?r\u003d2aaf7175\u0026fi\u003dgetSensorConfiguration#156\n\u003e \n\u003e The LeakDetection daemons use sdbusplus::async co-routines whereas \n\nSee, this is where I struggle, there\u0027s nothing about a leak detector that \"Requires\" coroutines, and my preference is for less code to maintain over having new code use new constructs duplicate things that we know work.\n\n\"Leak detection deamon\" is what this patch is about, and given we have code for handling this exact use case (take a gpio poll or event it, and put it the result on dbus in a structured interface), this patch doesn\u0027t really need to be where we try to inject coroutines into entity-manager reactors.  If we want to do that, lets get an implementation that uses the asio reactor code we have (so we\u0027re not duplicating) and then get another patch on top that starts looking at what a coroutine version would be.\n\nI\u0027d also note that the gpio stuff is under active development and has seen several patches move through, so this feels a little bit like trying to sneak coroutines in while others are working on other stuff.  I\u0027m sure that wasn\u0027t your intent, but popping into those other reviews with \"hey, we should use coroutines to solve this problem, look at how much better they are\" would be a good start.\n\n\u003e getSensorConfiguration API is a sync API (and also doesn\u0027t support co-routines). Hence, LeakDetection doesn\u0027t use getSensorConfiguration. Also, I am in plan of moving LeakDetection daemon to https://grok.openbmc.org/xref/openbmc/sdbusplus/include/sdbusplus/async/proxy.hpp?r\u003d06f265f6#176 for easier flow.\n\u003e \n\u003e 2. Read GPIOs\n\u003e https://grok.openbmc.org/xref/openbmc/dbus-sensors/src/intrusion/ChassisIntrusionSensor.cpp?r\u003dd7be555e#200\n\u003e ChassisIntrusionSensor uses boost::asio to poll the GPIOs whereas the leakdetection daemon uses co-routines so i am not sure how much code we can make common here.\n\nYep, all of dbus-sensors uses asio, and always has.  Asio also supports c++20 coroutines, so if that\u0027s something we really want to do, we can look at injecting the stdexec reactor into asio.\n\nIf we want to change the fact that we use asio here, that\u0027s certainly a discussion as a feature independent of leak detection.  The existence of IntrusionSensor proves this problem is essentially already solved, and we\u0027re just discussing minor interface changes to make an intrusion sensor a leak detector.\n\n\u003e \n\u003e @Patrick also did a post on \"dbus-sensors with sdbusplus::async coroutines)\n\u003e https://discord.com/channels/775381525260664832/1304217523465486356/1304217527379034152\n\u003e Do you have any concerns with the proposed approach in the post?\n\nFWIW, I was on a 2 week vacation when that post was made so I didn\u0027t see it.\n\nI\u0027ll let the other maintainers chime in on that post.  The reality is that:\n1. There\u0027s a lot of boilerplate for dealing with entity-manager that today exists in dbus-sensors and uses asio.\n2. That boilerplate really shouldn\u0027t be duplicated in a different repo;  If we wanted to make a \"general\" version of it, we could roll out what exists.\n3. That boilerplate code uses callbacks, dynamic (ie not concrete) configuration interfaces and asio.  Porting all 3 (asio-\u003elibexec, use coroutines, and use PDI) are 3 things we can certainly take up as a holistic thing, but trying to do it in a single patch is a bit overkill.\n4. the existing dbus-sensors maintainers (with the exception of maybe andrew?) aren\u0027t read up on the new coroutine stuff, and havne\u0027t ever tried to consume an EM config with PDI and would have a lot of trouble reviewing this patch.\n\nI do see that Patrick has now chimed in, so lets see how much light he can shine on this.\n\n\u003e \n\u003e \n\u003e Also, as per another comment from @Andrew https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/comment/b1c20d15_c52bf097/ he doesn\u0027t want me to add APIs to Utils.hpp and suggested to add a systemd class. Any concerns there?\n\n\nAndrew is right.  \"Please try to start forming some object models\" is something I completely agree with, but wouldn\u0027t be necessary if we hadn\u0027t decided to rewrite the core of things that work already.",
      "parentUuid": "f937c59a_c6b24639",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52312b7e_768488f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-26T02:01:33Z",
      "side": 1,
      "message": "\u003e Yep, all of dbus-sensors uses asio, and always has. Asio also supports c++20 coroutines, so if that\u0027s something we really want to do, we can look at injecting the stdexec reactor into asio.\n\nMeta will not contribute any new hand-spun boost dbus object daemons; we have invested lots of effort to moving the project towards compile-time checked dbus bindings.  We clearly communicated this up front before work began on this code.  We submitted a design document about 3 months ago.  We opened TOF issues asking where this code belongs and we were told \"dbus-sensors\".  You\u0027re backing us into a situation that is impossible to make you happy.\n\nDo we need to make \"dbus-sensors2\"?  Is that the ask?",
      "parentUuid": "db776820_7fac6e69",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dd7e73a_859aec2b",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Much of the functions in here seem like they could be abstracted and/or templated based on `DetectorConfigIntf` (in this case) so that they can be reused in other daemons.  All of them are going to be looking for entity-manager changes to a particular sub-interface.  Let\u0027s make that easy to do.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f4d8ae7_b0702d9b",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "nit: Can we order functions in some way.  Right now they\u0027re neither ordered as they are in the class definition, nor do they seem to be ordered where you have \"handleFoo\" and \"processFoo\" nearby each other.  It seems pretty arbitrary.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "599bee71_571958a6",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 25,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "I find this double-indirection really difficult to follow.  I have to jump around 3 different files to even see what this is.\n\nIs there something we can do to reduce the length of names here?  Don\u0027t we have namespaces?",
      "range": {
        "startLine": 25,
        "startChar": 36,
        "endLine": 25,
        "endChar": 54
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42c578c4_a3527f2f",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T02:03:02Z",
      "side": 1,
      "message": "+1 to \"this is tough to read\"",
      "parentUuid": "599bee71_571958a6",
      "range": {
        "startLine": 25,
        "startChar": 36,
        "endLine": 25,
        "endChar": 54
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "942a43c3_c80d8762",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Isn\u0027t this a problem?  I\u0027m surprised `debug` is sufficient.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f30219c1_61fedf1b",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T02:03:02Z",
      "side": 1,
      "message": "This function doesn\u0027t appear to be doing any sort of async operations.  Why does it need to return a task?  Just make this a normal function?  Same advice applies throughout this review.",
      "range": {
        "startLine": 48,
        "startChar": 4,
        "endLine": 48,
        "endChar": 13
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c9cd14b_67ae435e",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-26T02:16:19Z",
      "side": 1,
      "message": "👍",
      "parentUuid": "f30219c1_61fedf1b",
      "range": {
        "startLine": 48,
        "startChar": 4,
        "endLine": 48,
        "endChar": 13
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "798579bd_98170348",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Kind of jarring that we used `ManagedObjectType` in one function and raw types in this one.",
      "range": {
        "startLine": 75,
        "startChar": 23,
        "endLine": 75,
        "endChar": 66
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eed3a842_2bfcb3fd",
        "filename": "src/LeakDetection/LeakDetectionManager.hpp",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "nit: suggest whitespace between these two.  Difficult to read due to long names and clang-format indentation rules.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad9d8c57_132e11e7",
        "filename": "src/LeakDetection/LeakDetectionManager.hpp",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T02:03:02Z",
      "side": 1,
      "message": "interface_list_t is almost as many characters as std::set\u003cstd::string\u003e.\n\nJust inline std::set\u003cstd::string\u003e in the couple of places it\u0027s used.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 31,
        "endChar": 51
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8be7fe37_9d7aee52",
        "filename": "src/LeakDetection/LeakDetectionManager.hpp",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "What is the difference between \"handle\" and \"process\"?",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52ca12a0_fcd6b7ef",
        "filename": "src/LeakDetection/LeakDetectionManager.hpp",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T02:03:02Z",
      "side": 1,
      "message": "Can we safely take references to the context like this and still handle shutdown appropriately?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 35
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "beed5081_0ca76a1c",
        "filename": "src/LeakDetection/LeakDetectionManager.hpp",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T02:03:02Z",
      "side": 1,
      "message": "Why do these need to be unique_ptrs?  Presumably they could just be values?",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 19
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17401963_3fa4e9a9",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T01:33:09Z",
      "side": 1,
      "message": "This is doing a blocking read in an async coroutine.  Pretty sure that\u0027s going to block the whole reactor?  libgpio isn\u0027t coroutine enabled for this function.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72516c14_b660f92d",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "I thought you have a polarity in the EM config?",
      "range": {
        "startLine": 46,
        "startChar": 16,
        "endLine": 46,
        "endChar": 31
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54d8bee9_c27a0926",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why are we storing \"line\" in a member value but then releasing it and having to reclaim it all the time?",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cb3cc4c_3488b189",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Needs changes based on latest code.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 89,
        "endChar": 59
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bc47f2d_173a21fc",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-11-25T22:57:27Z",
      "side": 1,
      "message": "This would be changed to sdbusplus::async::fdio and sdbusplus::async::fdio::next() flow as per https://github.com/openbmc/sdbusplus/blob/master/include/sdbusplus/async/fdio.hpp.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e38dc128_3bf0b545",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T01:24:48Z",
      "side": 1,
      "message": "I left comments that this really shouldn\u0027t be an sdbusplus interface.  an FD is a generic object that a structured dbus binding shouldn\u0027t need to expose.  Said another way, we should be able to read a gpio without needing to rely on sdbusplus (as we do currently).",
      "parentUuid": "1bc47f2d_173a21fc",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8bf6bb8_21bbb5a8",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Now after reading this code it seems like you\u0027re intending \"state\" to be the 0/1 state of the GPIO line and not the \"state\" of the leak.  Please fix names to avoid this kind of ambiguity.",
      "range": {
        "startLine": 98,
        "startChar": 31,
        "endLine": 98,
        "endChar": 41
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47e9fbde_deb074bb",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 105,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Double-ternary? Seems like this could be less clever (for readability).",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 105,
        "endChar": 50
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "112c68f4_51f27120",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "You shouldn\u0027t update member property directly but call `state(newState)` otherwise you\u0027re not getting dbus signals.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34150a60_aa2379d9",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why do we have static targets here?  Don\u0027t we need them to have some kind of position identifier?",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 119,
        "endChar": 13
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e367b24_549860d4",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T01:27:41Z",
      "side": 1,
      "message": "This daemon really shouldn\u0027t be dealing with targets at all, right?  It\u0027s responsible for putting the current state on dbus, same as any other sensor.  What other daemons do with that is their choice, and phosphor-state-manager can certainly react if it chooses to.",
      "parentUuid": "34150a60_aa2379d9",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 119,
        "endChar": 13
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5f248bd_90b539f1",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Using this kind of string processing implies to me that something is missing in the client generator for you (or you\u0027re not using something).  Is there something that should be improved in the client bindings?",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 142,
        "endChar": 64
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b404d848_68c99729",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 149,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why std::exception?  What are the kinds of errors that can happen here?  Why is \"level\" special that it is more likely to fail than the other properties?  Something doesn\u0027t seem right here.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83727814_901eac16",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 161,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Same questions as 149.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5023c888_e2650572",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Having to forward declare this type to use as a template parameter seems strange.",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 20
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8eee0500_9146411f",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "You almost never want to use the \"common\" namespace.  Is this a client or a server?  Specify one of those.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 35,
        "endChar": 29
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ca83e3c_2cf045cc",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why are we having to hard code strings here?  Didn\u0027t you create an YAML interface for this?",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 49,
        "endChar": 0
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7c939f6_6c8207ef",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T01:54:42Z",
      "side": 1,
      "message": "It looks like he still had to unpack it using the variant access, because of the non concrete way that EM publishes interfaces.  This is expected (at least by me), even if it\u0027s ugly unless we had a way to describe a non concrete dbus interface in PDI, or EM found a way to do the coercion on its side.",
      "parentUuid": "2ca83e3c_2cf045cc",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 49,
        "endChar": 0
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99a3c143_ee341399",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T01:57:52Z",
      "side": 1,
      "message": "should\u0027ve read as \"even if..... we still probably need this code.\"",
      "parentUuid": "e7c939f6_6c8207ef",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 49,
        "endChar": 0
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "458345ee_b36c4ad4",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "This doesn\u0027t seem to belong in a .hpp file.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90e658e4_e53f5ee0",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "What benefit are these comments providing?  There is no difference from the thing after the @brief and the member name.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "271afe09_1943c473",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Dual inheritence isn\u0027t right.  You should be inheriting from `sdbusplus::async::server` with both types passed in as template parameters.",
      "range": {
        "startLine": 92,
        "startChar": 21,
        "endLine": 93,
        "endChar": 1
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ba782d9_4b818710",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Seems like a lot of code to put in the header.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eddabee0_0f8eb118",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 104,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "How do you prevent \"propertyChanged\" signal on initial construction?",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3738f7c_42691df7",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "How do you know the value hasn\u0027t changed between 104 and 110?",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41e01d82_b22b4ec5",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 114,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Shouldn\u0027t we do something here to destruct \"this\"?  It seems like we should have thrown an exception or something so that the manager knows not to hold this dbus object.  Otherwise we end up with a leak detection object that isn\u0027t actually functional.",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 114,
        "endChar": 19
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c817b434_861789b1",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why are you implementing these?  This is the default implementation, isn\u0027t it?",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 127,
        "endChar": 5
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b49ba82a_d5f727f5",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "What kind of name and what kind of path?  Should this return an object_path?",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 131,
        "endChar": 50
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f12de9a5_dc14cce1",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 133,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why is this a bool?",
      "range": {
        "startLine": 133,
        "startChar": 24,
        "endLine": 133,
        "endChar": 28
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71f4b7f6_dca10011",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "What is the purpose of the return value here?",
      "range": {
        "startLine": 135,
        "startChar": 30,
        "endLine": 135,
        "endChar": 34
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f4cfb8a_8a092863",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 143,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why const?  Violates C++ Core Guidelines.\n\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-constref",
      "range": {
        "startLine": 143,
        "startChar": 4,
        "endLine": 143,
        "endChar": 9
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82d64d94_c0729f86",
        "filename": "src/LeakDetection/LeakUtils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T02:03:02Z",
      "side": 1,
      "message": "Leak utils as a name is a little over generalized.  Maybe LeakLogEvents?",
      "range": {
        "startLine": 1,
        "startChar": 10,
        "endLine": 1,
        "endChar": 19
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20dd3c7f_29a1ecd8",
        "filename": "src/LeakDetection/LeakUtils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "These TODOs can all be resolved now.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}