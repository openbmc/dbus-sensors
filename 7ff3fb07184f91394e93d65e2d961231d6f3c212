{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "896dc3fc_f418a2de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-25T21:07:07Z",
      "side": 1,
      "message": "Jagpal, any input here?  Please look at intrusion sensor, which functionally does exactly the same thing you\u0027re doing here.  I suspect at least some of the code can be common rather than a rewrite.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dd7e73a_859aec2b",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Much of the functions in here seem like they could be abstracted and/or templated based on `DetectorConfigIntf` (in this case) so that they can be reused in other daemons.  All of them are going to be looking for entity-manager changes to a particular sub-interface.  Let\u0027s make that easy to do.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f4d8ae7_b0702d9b",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "nit: Can we order functions in some way.  Right now they\u0027re neither ordered as they are in the class definition, nor do they seem to be ordered where you have \"handleFoo\" and \"processFoo\" nearby each other.  It seems pretty arbitrary.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "599bee71_571958a6",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 25,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "I find this double-indirection really difficult to follow.  I have to jump around 3 different files to even see what this is.\n\nIs there something we can do to reduce the length of names here?  Don\u0027t we have namespaces?",
      "range": {
        "startLine": 25,
        "startChar": 36,
        "endLine": 25,
        "endChar": 54
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "942a43c3_c80d8762",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Isn\u0027t this a problem?  I\u0027m surprised `debug` is sufficient.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "798579bd_98170348",
        "filename": "src/LeakDetection/LeakDetectionManager.cpp",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Kind of jarring that we used `ManagedObjectType` in one function and raw types in this one.",
      "range": {
        "startLine": 75,
        "startChar": 23,
        "endLine": 75,
        "endChar": 66
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eed3a842_2bfcb3fd",
        "filename": "src/LeakDetection/LeakDetectionManager.hpp",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "nit: suggest whitespace between these two.  Difficult to read due to long names and clang-format indentation rules.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8be7fe37_9d7aee52",
        "filename": "src/LeakDetection/LeakDetectionManager.hpp",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "What is the difference between \"handle\" and \"process\"?",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72516c14_b660f92d",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "I thought you have a polarity in the EM config?",
      "range": {
        "startLine": 46,
        "startChar": 16,
        "endLine": 46,
        "endChar": 31
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54d8bee9_c27a0926",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why are we storing \"line\" in a member value but then releasing it and having to reclaim it all the time?",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cb3cc4c_3488b189",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Needs changes based on latest code.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 89,
        "endChar": 59
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8bf6bb8_21bbb5a8",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Now after reading this code it seems like you\u0027re intending \"state\" to be the 0/1 state of the GPIO line and not the \"state\" of the leak.  Please fix names to avoid this kind of ambiguity.",
      "range": {
        "startLine": 98,
        "startChar": 31,
        "endLine": 98,
        "endChar": 41
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47e9fbde_deb074bb",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 105,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Double-ternary? Seems like this could be less clever (for readability).",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 105,
        "endChar": 50
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "112c68f4_51f27120",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "You shouldn\u0027t update member property directly but call `state(newState)` otherwise you\u0027re not getting dbus signals.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34150a60_aa2379d9",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why do we have static targets here?  Don\u0027t we need them to have some kind of position identifier?",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 119,
        "endChar": 13
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5f248bd_90b539f1",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Using this kind of string processing implies to me that something is missing in the client generator for you (or you\u0027re not using something).  Is there something that should be improved in the client bindings?",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 142,
        "endChar": 64
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b404d848_68c99729",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 149,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why std::exception?  What are the kinds of errors that can happen here?  Why is \"level\" special that it is more likely to fail than the other properties?  Something doesn\u0027t seem right here.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83727814_901eac16",
        "filename": "src/LeakDetection/LeakDetector.cpp",
        "patchSetId": 5
      },
      "lineNbr": 161,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Same questions as 149.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5023c888_e2650572",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Having to forward declare this type to use as a template parameter seems strange.",
      "range": {
        "startLine": 24,
        "startChar": 8,
        "endLine": 24,
        "endChar": 20
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8eee0500_9146411f",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "You almost never want to use the \"common\" namespace.  Is this a client or a server?  Specify one of those.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 35,
        "endChar": 29
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ca83e3c_2cf045cc",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why are we having to hard code strings here?  Didn\u0027t you create an YAML interface for this?",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 49,
        "endChar": 0
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "458345ee_b36c4ad4",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "This doesn\u0027t seem to belong in a .hpp file.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90e658e4_e53f5ee0",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "What benefit are these comments providing?  There is no difference from the thing after the @brief and the member name.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "271afe09_1943c473",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Dual inheritence isn\u0027t right.  You should be inheriting from `sdbusplus::async::server` with both types passed in as template parameters.",
      "range": {
        "startLine": 92,
        "startChar": 21,
        "endLine": 93,
        "endChar": 1
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ba782d9_4b818710",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Seems like a lot of code to put in the header.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eddabee0_0f8eb118",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 104,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "How do you prevent \"propertyChanged\" signal on initial construction?",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3738f7c_42691df7",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "How do you know the value hasn\u0027t changed between 104 and 110?",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41e01d82_b22b4ec5",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 114,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Shouldn\u0027t we do something here to destruct \"this\"?  It seems like we should have thrown an exception or something so that the manager knows not to hold this dbus object.  Otherwise we end up with a leak detection object that isn\u0027t actually functional.",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 114,
        "endChar": 19
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c817b434_861789b1",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why are you implementing these?  This is the default implementation, isn\u0027t it?",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 127,
        "endChar": 5
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b49ba82a_d5f727f5",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "What kind of name and what kind of path?  Should this return an object_path?",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 131,
        "endChar": 50
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f12de9a5_dc14cce1",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 133,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why is this a bool?",
      "range": {
        "startLine": 133,
        "startChar": 24,
        "endLine": 133,
        "endChar": 28
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71f4b7f6_dca10011",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "What is the purpose of the return value here?",
      "range": {
        "startLine": 135,
        "startChar": 30,
        "endLine": 135,
        "endChar": 34
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f4cfb8a_8a092863",
        "filename": "src/LeakDetection/LeakDetector.hpp",
        "patchSetId": 5
      },
      "lineNbr": 143,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "Why const?  Violates C++ Core Guidelines.\n\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-constref",
      "range": {
        "startLine": 143,
        "startChar": 4,
        "endLine": 143,
        "endChar": 9
      },
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20dd3c7f_29a1ecd8",
        "filename": "src/LeakDetection/LeakUtils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T22:27:13Z",
      "side": 1,
      "message": "These TODOs can all be resolved now.",
      "revId": "7ff3fb07184f91394e93d65e2d961231d6f3c212",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}