{
  "comments": [
    {
      "key": {
        "uuid": "ca313235_047219f3",
        "filename": "include/SensorMeasures.hpp",
        "patchSetId": 13
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-11T16:24:11Z",
      "side": 1,
      "message": "Make a char* to avoid a global constructor at boot time.",
      "range": {
        "startLine": 10,
        "startChar": 6,
        "endLine": 10,
        "endChar": 17
      },
      "revId": "37bd301c9c52564ce2205026328c31abd5905cdb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ca4451e_390cd8dd",
        "filename": "include/SensorMeasures.hpp",
        "patchSetId": 13
      },
      "lineNbr": 10,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-22T05:06:23Z",
      "side": 1,
      "message": "OK, did it. That\u0027s a gotcha about std::string! Added future note for C++20 allowing constexpr std::string.",
      "parentUuid": "ca313235_047219f3",
      "range": {
        "startLine": 10,
        "startChar": 6,
        "endLine": 10,
        "endChar": 17
      },
      "revId": "37bd301c9c52564ce2205026328c31abd5905cdb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41c9e079_94858fdf",
        "filename": "include/SensorMeasures.hpp",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-11T16:24:11Z",
      "side": 1,
      "message": "unordered_set or boost::container::flat_set please.\n\nAlso, as a general rule, if/elseif switch statements compile to less code and are faster than making a map for fixed value sets like this.  dbus-sensors doesn\u0027t currently follow this rule, so up to you if you want to do it, but something to consider.\n\nAlso, if this isn\u0027t intended to be used directly, can you declare it inside InAllowedMeasures so we don\u0027t add to the sensors namespace.",
      "range": {
        "startLine": 16,
        "startChar": 6,
        "endLine": 16,
        "endChar": 14
      },
      "revId": "37bd301c9c52564ce2205026328c31abd5905cdb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce4c398d_18e8c538",
        "filename": "include/SensorMeasures.hpp",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-22T05:06:23Z",
      "side": 1,
      "message": "OK, changed to std::unordered_set. Keeping it a vector for now, as that seems to be the cleanest approach. I did put it inside InAllowedMeasures(), though. Perhaps someday C++ will allow the switch statement on strings.",
      "parentUuid": "41c9e079_94858fdf",
      "range": {
        "startLine": 16,
        "startChar": 6,
        "endLine": 16,
        "endChar": 14
      },
      "revId": "37bd301c9c52564ce2205026328c31abd5905cdb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6b20115_02c91d54",
        "filename": "include/SensorMeasures.hpp",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-22T22:38:19Z",
      "side": 1,
      "message": "looks like you turned it into an unordered set, which is now going to construct every time it\u0027s looked up.\n\nAs far as switch statements on strings go, meh, they\u0027re about the same amount of code as an if/elseif statement with each element in a conditional, and only slightly less ugly.",
      "parentUuid": "ce4c398d_18e8c538",
      "range": {
        "startLine": 16,
        "startChar": 6,
        "endLine": 16,
        "endChar": 14
      },
      "revId": "37bd301c9c52564ce2205026328c31abd5905cdb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7369763e_35013428",
        "filename": "include/SensorMeasures.hpp",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-24T05:41:55Z",
      "side": 1,
      "message": "If constructor overhead is a problem, then this should work. I rewrote it as a C array, not C++, and then iterate over it in the usual C way.",
      "parentUuid": "f6b20115_02c91d54",
      "range": {
        "startLine": 16,
        "startChar": 6,
        "endLine": 16,
        "endChar": 14
      },
      "revId": "37bd301c9c52564ce2205026328c31abd5905cdb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69358840_fe01ce14",
        "filename": "include/SensorMeasures.hpp",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-25T16:01:58Z",
      "side": 1,
      "message": "std::array would be the preference over c-style arrays.",
      "parentUuid": "7369763e_35013428",
      "range": {
        "startLine": 16,
        "startChar": 6,
        "endLine": 16,
        "endChar": 14
      },
      "revId": "37bd301c9c52564ce2205026328c31abd5905cdb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62b896de_f41f0d7a",
        "filename": "include/SensorMeasures.hpp",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-26T09:04:48Z",
      "side": 1,
      "message": "OK, I\u0027ll change that, see Patchset 17. I assume std::array has no constructor overhead, which is what you were initially concerned about?",
      "parentUuid": "69358840_fe01ce14",
      "range": {
        "startLine": 16,
        "startChar": 6,
        "endLine": 16,
        "endChar": 14
      },
      "revId": "37bd301c9c52564ce2205026328c31abd5905cdb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}