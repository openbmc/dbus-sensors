{
  "comments": [
    {
      "key": {
        "uuid": "d4285424_f9feb992",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 25,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-02-25T20:58:23Z",
      "side": 1,
      "message": "How is use of dangling reference prevented?",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 25,
        "endChar": 36
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a564dba8_ac41502c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T21:42:38Z",
      "side": 1,
      "message": "I\u0027m assuming you mean a reference that points to memory that has been destroyed.  The answer to that is largely \"it doesn\u0027t\".\n\nIt DOES make the memory ownership model cleaner, and gives us more control over the destructor order which should be the start of some of this stuff becoming cleaner, but this patch isn\u0027t the end all be all of patches, and doesn\u0027t fix every possible issue, it mostly just sets us up for being able to simplify this stuff further, which will clean up some ownership issues between the sensor class and the super class.\n\nIf you\u0027re interested, I\u0027m happy to hear more about your ideas here.",
      "parentUuid": "d4285424_f9feb992",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 25,
        "endChar": 36
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c177ca24_8c90982b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 25,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-02-26T20:24:29Z",
      "side": 1,
      "message": "I am doing some research on this. I will share when I have something more solid.",
      "parentUuid": "a564dba8_ac41502c",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 25,
        "endChar": 36
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1c177d8_e853a74d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-26T20:42:31Z",
      "side": 1,
      "message": "Great, looking forward to it.",
      "parentUuid": "c177ca24_8c90982b",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 25,
        "endChar": 36
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f041d049_df48a6de",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 29,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-02-25T20:58:23Z",
      "side": 1,
      "message": "I am still relatively new to dbus. So this is just a question for my own education.\nWill there be problems if the new sensor is constructed with the same name, path, interfaces etc. before the old sensor is destructed? What happens if another service comes along and uses object mapper to get managed objects before the old sensor instance get destructed?",
      "range": {
        "startLine": 27,
        "startChar": 26,
        "endLine": 29,
        "endChar": 61
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4a1fdf1_60b198c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T21:42:38Z",
      "side": 1,
      "message": "\u003e I am still relatively new to dbus. So this is just a question for my own education.\n\u003e Will there be problems if the new sensor is constructed with the same name, path, interfaces etc. before the old sensor is destructed?\n\nYes, this was a very non-obvious bug that james and I found.  If you see something like\n\nsensors[sensorName] \u003d nullptr;\nsensors.emplace(sensorName, Sensor{...{});\n\nThat was us trying to fix it.  Modern code should use emplace directly, and construct the new sensor in place, instead of constructing via std::move.\n\nIn theory objectmanager could detect this and prevent the signal from going out (or destroy the old interface before adding the new one) but I haven\u0027t looked at that.\n\n\u003e What happens if another service comes along and uses object mapper to get managed objects before the old sensor instance get destructed?\n\nYou get the old interface behavior.  We\u0027ve done our best in this code to try to avoid that problem by properly destroying the old objects before creating new ones with the same path.  There might still be outliers though.",
      "parentUuid": "f041d049_df48a6de",
      "range": {
        "startLine": 27,
        "startChar": 26,
        "endLine": 29,
        "endChar": 61
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36f0aec2_331082ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 42,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-02-25T20:58:23Z",
      "side": 1,
      "message": "There are changes that affect sensors and thresholds lifetime. I am little concerned of potential new race conditions.\nMaybe test with randomized scan/rescan (construct and destruct) for sensors?",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 42,
        "endChar": 0
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35d176d4_45164439",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 42,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T21:42:38Z",
      "side": 1,
      "message": "I\u0027ve done a few tests like that here, but I don\u0027t have as many daemons running on my systems, so I\u0027m not able to sus out all the possible races.\n\nWith that said, I think I\u0027ve covered them as best as I\u0027m able.\n\nIf you could help test, that would be great.",
      "parentUuid": "36f0aec2_331082ff",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 42,
        "endChar": 0
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efb97138_802b656c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 42,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-02-26T20:24:29Z",
      "side": 1,
      "message": "I will do some testing and share result in next couple days.",
      "parentUuid": "35d176d4_45164439",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 42,
        "endChar": 0
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea64a48c_773bbc06",
        "filename": "include/CPUSensor.hpp",
        "patchSetId": 21
      },
      "lineNbr": 56,
      "author": {
        "id": 1001001
      },
      "writtenOn": "2021-02-25T23:03:43Z",
      "side": 1,
      "message": "Should we prefer std to boost going forward?",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 25
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de4e9435_51a93be1",
        "filename": "include/CPUSensor.hpp",
        "patchSetId": 21
      },
      "lineNbr": 56,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-26T16:55:28Z",
      "side": 1,
      "message": "It depends on your needs.  In this case, CPUSensor doesn\u0027t allow move (yet), so I needed a container that didn\u0027t need move semantics on insert.  I\u0027d normally use flat_map here just to keep the memory usage lower, as we don\u0027t care about insert/find performance.",
      "parentUuid": "ea64a48c_773bbc06",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 25
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30db6eef_745f5566",
        "filename": "include/ExitAirTempSensor.hpp",
        "patchSetId": 21
      },
      "lineNbr": 13,
      "author": {
        "id": 1001001
      },
      "writtenOn": "2021-02-25T23:03:43Z",
      "side": 1,
      "message": "So not all enable_shared_from_this are removed, as indicated in the commit message?",
      "range": {
        "startLine": 13,
        "startChar": 19,
        "endLine": 13,
        "endChar": 58
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1710bc51_a3169517",
        "filename": "src/ADCSensor.cpp",
        "patchSetId": 21
      },
      "lineNbr": 72,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-02-25T01:52:32Z",
      "side": 1,
      "message": "Need to match the dbus interface here, right?  There are other places too.",
      "range": {
        "startLine": 72,
        "startChar": 12,
        "endLine": 72,
        "endChar": 64
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70e3e658_357af833",
        "filename": "src/ADCSensor.cpp",
        "patchSetId": 21
      },
      "lineNbr": 189,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-02-25T20:58:23Z",
      "side": 1,
      "message": "If abort is caused by destruction, will \"this\" be invalid?",
      "range": {
        "startLine": 189,
        "startChar": 41,
        "endLine": 189,
        "endChar": 47
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d88021e_f0109438",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 21
      },
      "lineNbr": 278,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-02-25T20:58:23Z",
      "side": 1,
      "message": "This would construct the new one first and then destruct the obsolete one, right? If true, there would be a tiny window that both new sensor and old sensor exist. Will dbus be confused?",
      "range": {
        "startLine": 273,
        "startChar": 0,
        "endLine": 278,
        "endChar": 75
      },
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3362f74_b4acd272",
        "filename": "src/FanMain.cpp",
        "patchSetId": 21
      },
      "lineNbr": 174,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-24T02:04:24Z",
      "side": 1,
      "message": "It looks like a lot of changes took place here and below, with respect to PWM numbering and string path building. I am curious why? The old code worked, and was well tested.",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ebce238_09d5e892",
        "filename": "src/FanMain.cpp",
        "patchSetId": 21
      },
      "lineNbr": 174,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T21:33:01Z",
      "side": 1,
      "message": "This patchset has been rebased.  I suspect you looked at the diff between patchset 1 and patchset N.  If you compare patchset N to master, this has no diff.\n\nWith that said, happy to discuss outside the context of this patchset if you think this is wrong.",
      "parentUuid": "f3362f74_b4acd272",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4dc25dd_43abf92b",
        "filename": "src/FanMain.cpp",
        "patchSetId": 21
      },
      "lineNbr": 174,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-05T01:13:42Z",
      "side": 1,
      "message": "Thanks, you\u0027re correct.",
      "parentUuid": "8ebce238_09d5e892",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44b23482_5f42d3ec",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 21
      },
      "lineNbr": 40,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-24T02:04:24Z",
      "side": 1,
      "message": "Perhaps group this constant with the others in HwmonTempSensor.cpp file?",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7ef5425_ee281159",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 21
      },
      "lineNbr": 40,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-05T01:13:42Z",
      "side": 1,
      "message": "Yes, this was because I looked at an earlier patchset instead of the base. Good to know the base has been updated, to result in less conflict.",
      "parentUuid": "44b23482_5f42d3ec",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1faee3ef_1657509a",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 21
      },
      "lineNbr": 213,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-24T02:04:24Z",
      "side": 1,
      "message": "Curious why float used here, not double.",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23711c10_e0cc81ce",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 21
      },
      "lineNbr": 213,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T21:33:01Z",
      "side": 1,
      "message": "This isn\u0027t part of the diff.  Happy to talk about this out of band.",
      "parentUuid": "1faee3ef_1657509a",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86393357_19d711bb",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 21
      },
      "lineNbr": 213,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-05T01:13:42Z",
      "side": 1,
      "message": "Thanks, I see it now, good that there\u0027s no changes against the base.",
      "parentUuid": "23711c10_e0cc81ce",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b20486d9_fa5c7940",
        "filename": "src/HwmonTempSensor.cpp",
        "patchSetId": 21
      },
      "lineNbr": 45,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-24T02:04:24Z",
      "side": 1,
      "message": "The pollRate feature is new, not merely a code cleanup. As such, it will benefit from being in a second change. This change is already rather large.",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b22db1d_2dd90684",
        "filename": "src/HwmonTempSensor.cpp",
        "patchSetId": 21
      },
      "lineNbr": 45,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T21:33:01Z",
      "side": 1,
      "message": "Pollrate was added in a different patch.  Please diff patchset N to master, not patchset 1 to patchset N.",
      "parentUuid": "b20486d9_fa5c7940",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78d79cfb_bcf0b00c",
        "filename": "src/HwmonTempSensor.cpp",
        "patchSetId": 21
      },
      "lineNbr": 45,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-05T01:13:42Z",
      "side": 1,
      "message": "Got it.",
      "parentUuid": "8b22db1d_2dd90684",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b38aec97_4e693fb1",
        "filename": "src/HwmonTempSensor.cpp",
        "patchSetId": 21
      },
      "lineNbr": 53,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-02-24T02:04:24Z",
      "side": 1,
      "message": "Multiplying floating-point should multiply by 1000.0",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7c230e7_22315f3a",
        "filename": "src/HwmonTempSensor.cpp",
        "patchSetId": 21
      },
      "lineNbr": 53,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-25T21:33:01Z",
      "side": 1,
      "message": "Agreed, although this is equally as correct\n\nWith that said, see previous notes, I think you looked at the wrong diff.",
      "parentUuid": "b38aec97_4e693fb1",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cda1653a_218b18fc",
        "filename": "src/HwmonTempSensor.cpp",
        "patchSetId": 21
      },
      "lineNbr": 53,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-05T01:13:42Z",
      "side": 1,
      "message": "Yep, although 1000.0 is clearer and it prevents the compiler from wrongly casting it to integer too early. As you said, though, that\u0027s not the subject of this patch.",
      "parentUuid": "a7c230e7_22315f3a",
      "revId": "1fa1b44924a7bda4ff89ed4cd2ad9c0ae1338f06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}