{
  "comments": [
    {
      "key": {
        "uuid": "a160a79b_99611b2f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 11,
      "author": {
        "id": 1000100
      },
      "writtenOn": "2020-12-24T16:36:17Z",
      "side": 1,
      "message": "If you want to save space on this line, you can just use:\nhttps://gerrit.openbmc-project.xyz/35476",
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ca45931_5baebe9b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 11,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "Nice, did not know that.",
      "parentUuid": "a160a79b_99611b2f",
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24949ee0_d305bb83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:20:49Z",
      "side": 1,
      "message": "Do you have the entity-manager schema changes ready yet?  When they\u0027re ready please link the two commits together with the same topic.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 37,
        "endChar": 2
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f2ba159_ffe32464",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "Hmm, where should they be added? In entity-manager/schemas/legacy.json I found 2 large dictionaries, \"properties\" and \"Types\". Should the new terms (Measure, MinValue, MaxValue) be added here? Other daemons have been using MinValue and MaxValue for some time as well (such as PSUSensor), I\u0027m surprised they are not already listed.",
      "parentUuid": "24949ee0_d305bb83",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 37,
        "endChar": 2
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f52c4bc5_9fc5e46e",
        "filename": "src/ExternalSensor.cpp",
        "patchSetId": 12
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:20:49Z",
      "side": 1,
      "message": "Still needs validation that these are valid names and types.\n\nsd-bus these days has helper functions for this, although most other things tend to do isalpha | isdigit checks.\n\nsensorMeasure should be tested against the known list of possible sensor types.",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 40,
        "endChar": 29
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79131a0d_4901ce72",
        "filename": "src/ExternalSensor.cpp",
        "patchSetId": 12
      },
      "lineNbr": 40,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "After discussion, I\u0027m going to make this a separate include file, and put an allowlist in the include file. Although I disagree with it, the existing design philosophy in dbus-sensors seems to be to use allowlists to represent what has been tested and approved already, instead of being made to be general enough to accept unapproved new things. It also appears that the allowlist of allowed sensor object paths is not yet enumerated anywhere in dbus-sensors, so it\u0027s a good opportunity to add it now.",
      "parentUuid": "f52c4bc5_9fc5e46e",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 40,
        "endChar": 29
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "183339d9_c7bd3ee2",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 27,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "I think I commented on one of the other reviews, but this sensor will never support multiple interfaces, so should we just make this a const char* instead of an array, and inline the definition where needed?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 55
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77365945_472a55a8",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 27,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "Done. Since it\u0027s singular, also changed its name to \"sensorType\".",
      "parentUuid": "183339d9_c7bd3ee2",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 55
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01d71414_4d0ef857",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "Please put this in your commit message.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 68
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf03dfc8_6cd73ccb",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "It already is in the commit message.",
      "parentUuid": "01d71414_4d0ef857",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 68
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f9def8c_42f948d8",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 51,
      "author": {
        "id": 1000100
      },
      "writtenOn": "2020-12-24T16:36:17Z",
      "side": 1,
      "message": "This and below should be in an anonymous namespace instead of static - but I think perhaps Intel prefers static?  I don\u0027t know.  But, either way, if you put these two methods into a small utility file and expose them, yeah the text contents might be larger because it can\u0027t optimize them out, but, you can add a test to make sure they behave how you expect in all cases.",
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "671e10ef_d1ef7218",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 51,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "\u003e This and below should be in an anonymous namespace instead of static - but I think perhaps Intel prefers static?\n\u003e  I don\u0027t know.  But, either way, if you put these two methods into a small utility file and expose them, yeah the text contents might be larger because it can\u0027t optimize them out, but, you can add a test to make sure they behave how you expect in all cases.\n\n\nI don\u0027t have a strong opinion between the two;  If I were writing it I\u0027d probably go anonymous namespace.",
      "parentUuid": "3f9def8c_42f948d8",
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "635b198d_f5665a9b",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 51,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "That would be over-engineered. Removed this entire function anyway.",
      "parentUuid": "671e10ef_d1ef7218",
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9b67712_fba1d8d9",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "Can we move this to an enum class with values of \"Required\" and \"NotRequired\"  That seems much more clear than a bool when calling this function.",
      "range": {
        "startLine": 52,
        "startChar": 57,
        "endLine": 52,
        "endChar": 66
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "652db5a5_6ce85fca",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "That would be over-engineered. Removed this entire function anyway.",
      "parentUuid": "c9b67712_fba1d8d9",
      "range": {
        "startLine": 52,
        "startChar": 57,
        "endLine": 52,
        "endChar": 66
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee67bea7_2e47664a",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 66,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "This is probably a check that should be done at higher scopes.  Technically an empty string is valid in some cases.",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 66,
        "endChar": 13
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9d1e5f0_3ff050dc",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 66,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "OK, I\u0027ll have the caller check for an empty string, instead of doing it within this function.",
      "parentUuid": "ee67bea7_2e47664a",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 66,
        "endChar": 13
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bf5c234_c3425be2",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "Please use the existing visitor patterns here.",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 68,
        "endChar": 9
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96162a14_dbc4634a",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "Removed this entire function.",
      "parentUuid": "5bf5c234_c3425be2",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 68,
        "endChar": 9
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c4341cb_e11cbe85",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 69,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "Please add a return false here",
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6097374_c769360e",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 69,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "Removed this entire function.",
      "parentUuid": "1c4341cb_e11cbe85",
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c2032a2_10771015",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 114,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "Please use the existing visitor patterns for this.  They handle more types than you\u0027ve handled here, and do it with less code.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 114,
        "endChar": 9
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "787c7bca_3cf58847",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 114,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "0c2032a2_10771015",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 114,
        "endChar": 9
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68c5ba93_47635ac9",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 125,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "Considering almost all other sensors have the need to get numbers and strings out of config space, I\u0027d like to see these utility functions moved into another commit, and the rest of the sensors be brought up to this new state of the art, before these utility functions are used in a new sensor.  Which order you want to do it (external sensor, then utility, or utility then external sensor) is up to you, but adding utility functions that are only used on one sensor increases the binary size, and leaves the sensors less consistent than they were before.",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 125,
        "endChar": 1
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e8ea23f_9852d959",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 125,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "I removed these functions entirely. The usage of the visitors is more concise, so it isn\u0027t as much of a win anymore to have separate functions.",
      "parentUuid": "68c5ba93_47635ac9",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 125,
        "endChar": 1
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eaf7587e_fdb93b2b",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 145,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "Nit;  Use a const\u0026 here.  I don\u0027t see any uses of these as a pointers.",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 145,
        "endChar": 64
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be9a6bbb_3af3c3d4",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 145,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "OK, can use references instead. The earlier intention was to just follow the existing code pattern as it already existed for other dbus-sensors daemons.",
      "parentUuid": "eaf7587e_fdb93b2b",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 145,
        "endChar": 64
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2ec570a_9cab7271",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 160,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "For a sensor with only one type, this isn\u0027t neccesary.  You will only ever get events of the correct type.  Just inline sensorType.",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 160,
        "endChar": 17
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aa2dda2_41fecdfd",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 160,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "OK, done. This also let me refactor it, to change more pointers to references.",
      "parentUuid": "d2ec570a_9cab7271",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 160,
        "endChar": 17
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3c4b71_80be40be",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 175,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "This is different than what I had thought.  I would like to see these values required, as it reduces the possibility someone might mess up a configuration file in a subtle way by simply omitting them.",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 175,
        "endChar": 59
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1556421_4b253d9b",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 175,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "OK, makes sense to require MinValue and MaxValue to be present. Since this sensor daemon is inherently more flexible than the others, it can\u0027t assume reasonable defaults, since reasonable values for the units will vary based on what\u0027s being measured.",
      "parentUuid": "5a3c4b71_80be40be",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 175,
        "endChar": 59
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "111e5e26_02c9b544",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 216,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "Not your fault, as this looks copied from another sensor, but this needs a better check than just endswith.  Otherwise the sensors \"bar\" and \"foobar\" will both match the same expression.\n\nLikely needs fixed other places too if you\u0027re up for it.",
      "range": {
        "startLine": 216,
        "startChar": 35,
        "endLine": 216,
        "endChar": 44
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c49f7dbe_db7f1c7e",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 216,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "OK, beefed up the ends_with() matcher here, to test it with a slash in front of it, thus comparing \"/bar\" with \"/foobar\" in your example, to cause a mismatch unless the entire basename matches.",
      "parentUuid": "111e5e26_02c9b544",
      "range": {
        "startLine": 216,
        "startChar": 35,
        "endLine": 216,
        "endChar": 44
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72b47070_78ce03ff",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 252,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "Not your fault, and it\u0027s ok if you want to leave it, but in new (C++14) code, these three operations can be done in a single operation with something like:\n\n\nsensors.emplace(\n\tstd::piecewise_construct, std::make_tuple(sensorName),\n\tstd::forward_as_tuple(\n\tsensorType, objectServer, dbusConnection, sensorName, sensorMeasure,\n\tstd::move(sensorThresholds), *intefacePath,\n\tminValue, maxValue, readState));",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 252,
        "endChar": 51
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb73642f_c34347ec",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 252,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "Yikes. I think I\u0027ll go with the existing usage, as there\u0027s a lot of deep C++ voodoo in this alternative.",
      "parentUuid": "72b47070_78ce03ff",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 252,
        "endChar": 51
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23d58e30_b59940ff",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 278,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "Please avoid wildcard captures.  They make it much harder to review lifetimes of objects, even though in this case, in main, it\u0027s very unlikely to be incorrect.  I think you just need \u0026filterTimer, \u0026sensorsChanged",
      "range": {
        "startLine": 278,
        "startChar": 9,
        "endLine": 278,
        "endChar": 10
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57eb82ce_c090aa55",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 278,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "OK, expanding out the wildcard captures. Also need the createSensors() parameters, used on line 297 here, so added those also.",
      "parentUuid": "23d58e30_b59940ff",
      "range": {
        "startLine": 278,
        "startChar": 9,
        "endLine": 278,
        "endChar": 10
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be098c25_e073b579",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 286,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-12-24T18:17:12Z",
      "side": 1,
      "message": "For some reason I thought this was 5 seconds in other places, but I guess we\u0027re just inconsistent.  NBD",
      "range": {
        "startLine": 286,
        "startChar": 68,
        "endLine": 286,
        "endChar": 69
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f5d397f_208df9b1",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 286,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-01-11T07:55:57Z",
      "side": 1,
      "message": "I\u0027m not entirely sure why this little delay is here, but other dbus-sensors daemons seem to use it as well. Do you know what the purpose of it is? Also, you\u0027re right, this should be a constant defined somewhere else, and then used for all sensors that need it, instead of having to hardcode a number in each sensor. This should be the subject of another change, though.",
      "parentUuid": "be098c25_e073b579",
      "range": {
        "startLine": 286,
        "startChar": 68,
        "endLine": 286,
        "endChar": 69
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ca66b1d_a5229215",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 12
      },
      "lineNbr": 286,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-11T16:12:43Z",
      "side": 1,
      "message": "\u003e I\u0027m not entirely sure why this little delay is here, but other dbus-sensors daemons seem to use it as well. Do you know what the purpose of it is?\n\nIt\u0027s a timer to avoid the sensor version of the stampeeding herd problem.  When sensors are added/removed at boot, there tends to be a lot of config changes that come in at once.  This timer forces the sensor to wait for at least one second of \"no new updates\" before trying to reconfigure the sensor subsystem which is relatively expensive to do.  Without this timer, boot would take much much longer.",
      "parentUuid": "7f5d397f_208df9b1",
      "range": {
        "startLine": 286,
        "startChar": 68,
        "endLine": 286,
        "endChar": 69
      },
      "revId": "e2d0d756c9f2d62e1079c4efef13eeb4f3283c2b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}