{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1351e75_270016a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-01-31T05:52:52Z",
      "side": 1,
      "message": "Hi All,\nRebased master and fixed the conflict.\nPlease help to review agarin. Thanks!",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0350b940_f565b982",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-01-31T11:06:32Z",
      "side": 1,
      "message": "This looks promising. Also, it could be a step towards the idea mentioned here: https://github.com/openbmc/phosphor-pid-control/issues/27",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64db2fa6_6e29c1bc",
        "filename": "src/FanMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 544,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-01-31T11:06:32Z",
      "side": 1,
      "message": "This code is performing a prepend, not an append. Please correct this comment.",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d81f5f8_4546ddc5",
        "filename": "src/FanMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 544,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-02-10T06:29:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64db2fa6_6e29c1bc",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f016b06_0b9ea172",
        "filename": "src/FanMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 553,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-01-31T11:06:32Z",
      "side": 1,
      "message": "I am concerned about this changing the syntax of the control/fanpwm and sensors/fan_pwm pathnames. There are many scripts and other programs in the field that depend on these pathnames. I do not want to break them.\n\nWould it be possible to preserve the old syntax, that did not require the user to know the zone number in order to address a particular PWM by name? Maybe create two pathnames, aliased to each other, to avoid breaking existing users?",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "703c7e7f_1986e14a",
        "filename": "src/FanMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 553,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-02-10T06:29:04Z",
      "side": 1,
      "message": "The zone layer will be added only if the user adds config in entity-manager. it  should be fine if someone don\u0027t want to use this feature.",
      "parentUuid": "0f016b06_0b9ea172",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32f915a3_06968f06",
        "filename": "src/FanMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 553,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-02-11T09:22:03Z",
      "side": 1,
      "message": "What is meant by \"only if the user adds config in entity-manager\"? It seems that this code, as it stands now, would require all existing zones in entity-manager Inventory objects to follow this new object path naming scheme. That would break a lot of existing configurations in the field.\n\nI like the idea of the new feature, but breaking existing configurations is unacceptable. People have scripts and other tools that depend on the existing device path layout. Perhaps have a flag that can be given at compile time, to opt into this new behavior, such as https://gerrit.openbmc.org/c/openbmc/phosphor-pid-control/+/58009\n\nThat way, the existing object path layout, which are depended upon by many people, will not need to suddenly change.",
      "parentUuid": "703c7e7f_1986e14a",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ffba582_aeae4177",
        "filename": "src/FanMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 553,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-02-13T02:03:27Z",
      "side": 1,
      "message": "It is not required of configuring existing zones in entity-manager inventory. We tested function with and without zones configured in entity-manager.\n\nWith zones configured, the object path will be like:\n```\n         `-/xyz\n          `-/xyz/openbmc_project\n            |-/xyz/openbmc_project/control\n            | `-/xyz/openbmc_project/control/fanpwm\n            |   `-/xyz/openbmc_project/control/fanpwm/Zone_0\n            |     |-/xyz/openbmc_project/control/fanpwm/Zone_0/Pwm_1\n            |     |-/xyz/openbmc_project/control/fanpwm/Zone_0/Pwm_2\n            |     |-/xyz/openbmc_project/control/fanpwm/Zone_0/Pwm_3\n            |     `-/xyz/openbmc_project/control/fanpwm/Zone_0/Pwm_4\n            `-/xyz/openbmc_project/sensors\n              |-/xyz/openbmc_project/sensors/fan_pwm\n              | `-/xyz/openbmc_project/sensors/fan_pwm/Zone_0\n              |   |-/xyz/openbmc_project/sensors/fan_pwm/Zone_0/Pwm_1\n              |   |-/xyz/openbmc_project/sensors/fan_pwm/Zone_0/Pwm_2\n              |   |-/xyz/openbmc_project/sensors/fan_pwm/Zone_0/Pwm_3\n              |   `-/xyz/openbmc_project/sensors/fan_pwm/Zone_0/Pwm_4\n              `-/xyz/openbmc_project/sensors/fan_tach\n                |-/xyz/openbmc_project/sensors/fan_tach/BB_FAN0_TACH_RPM\n                |-/xyz/openbmc_project/sensors/fan_tach/BB_FAN1_TACH_RPM\n                |-/xyz/openbmc_project/sensors/fan_tach/BB_FAN2_TACH_RPM\n                `-/xyz/openbmc_project/sensors/fan_tach/BB_FAN3_TACH_RPM\n```\n\nWithout zones configured:\n```\n        `-/xyz\n          `-/xyz/openbmc_project\n            |-/xyz/openbmc_project/control\n            | `-/xyz/openbmc_project/control/fanpwm\n            |   `-/xyz/openbmc_project/control/fanpwm\n            |     |-/xyz/openbmc_project/control/fanpwm/Pwm_1\n            |     |-/xyz/openbmc_project/control/fanpwm/Pwm_2\n            |     |-/xyz/openbmc_project/control/fanpwm/Pwm_3\n            |     `-/xyz/openbmc_project/control/fanpwm/Pwm_4\n            `-/xyz/openbmc_project/sensors\n              |-/xyz/openbmc_project/sensors/fan_pwm\n              | `-/xyz/openbmc_project/sensors/fan_pwm\n              |   |-/xyz/openbmc_project/sensors/fan_pwm/Pwm_1\n              |   |-/xyz/openbmc_project/sensors/fan_pwm/Pwm_2\n              |   |-/xyz/openbmc_project/sensors/fan_pwm/Pwm_3\n              |   `-/xyz/openbmc_project/sensors/fan_pwm/Pwm_4\n              `-/xyz/openbmc_project/sensors/fan_tach\n                |-/xyz/openbmc_project/sensors/fan_tach/BB_FAN0_TACH_RPM\n                |-/xyz/openbmc_project/sensors/fan_tach/BB_FAN1_TACH_RPM\n                |-/xyz/openbmc_project/sensors/fan_tach/BB_FAN2_TACH_RPM\n                `-/xyz/openbmc_project/sensors/fan_tach/BB_FAN3_TACH_RPM\n```",
      "parentUuid": "32f915a3_06968f06",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a902308_317fe896",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-01-31T11:06:32Z",
      "side": 1,
      "message": "I recommend changing sysPath to be vector\u003cstring\u003e sysPaths. Then, you can have a vector of strings, instead of having to use a space-separated string.",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0da60b0_b0d26e26",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-02-10T06:29:04Z",
      "side": 1,
      "message": "Change to vector. It did affect codes at different place and we also modified them.",
      "parentUuid": "9a902308_317fe896",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b9b0fe9_3ad7cb95",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 180,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-01-31T11:06:32Z",
      "side": 1,
      "message": "I am curious why Zone types do not want their association created.",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c078ae2c_78d72d93",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 180,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-02-10T06:29:04Z",
      "side": 1,
      "message": "Added Zone type to assiciation creation.",
      "parentUuid": "1b9b0fe9_3ad7cb95",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "287bb477_fac95796",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 204,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-01-31T11:06:32Z",
      "side": 1,
      "message": "I recommend using a member variable that is vector\u003cstring\u003e instead of \"space separated strings\".\nThis will save the overhead of having to recover the vector from the space-separated string every time.",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3f0e6b7_f9b7bdff",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 204,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-02-10T06:29:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "287bb477_fac95796",
      "revId": "f111408690b4c1afac2284e5179132ea48eb3966",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}