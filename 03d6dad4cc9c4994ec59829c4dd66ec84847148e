{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ec08faa6_5e2103c8",
        "filename": "service_files/xyz.openbmc_project.leakdetector.service",
        "patchSetId": 76
      },
      "lineNbr": 10,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "These should go into libexec per https://github.com/openbmc/docs/blob/master/anti-patterns.md#incorrect-placement-of-executables-in-sbin-usrsbin-or-bin-usrbin",
      "range": {
        "startLine": 10,
        "startChar": 11,
        "endLine": 10,
        "endChar": 31
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14c502df_df06b797",
        "filename": "service_files/xyz.openbmc_project.leakdetector.service",
        "patchSetId": 76
      },
      "lineNbr": 10,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec08faa6_5e2103c8",
      "range": {
        "startLine": 10,
        "startChar": 11,
        "endLine": 10,
        "endChar": 31
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c3d0d6b_b1f36616",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "fwiw, `sdbusplus/async.hpp` is provided exactly so you don\u0027t need to do all this stuff.  You could consider anything under `async/` to be \"internal\".\n\nUnless, this is caused by that include-what-you-use clang-tidy stuff?  In which case, we should figure out how to fix that.  Maybe we have to add a hint in sdbusplus so clang-tidy is happier.",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 9,
        "endChar": 35
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "582bae33_5a94d6eb",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 9,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T08:03:33Z",
      "side": 1,
      "message": "Yes, thats what i used initially but as you pointed out it was tossed out by clang IWYU.\n\nI see an option https://github.com/include-what-you-use/include-what-you-use/blob/master/docs/IWYUPragmas.md#iwyu-pragma-begin_exportsend_exports which instructs clang that the includer is the provider of pragma files.\n\nRaised: https://gerrit.openbmc.org/c/openbmc/sdbusplus/+/80376 .",
      "parentUuid": "1c3d0d6b_b1f36616",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 9,
        "endChar": 35
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f5c9675_8768d8d0",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-18T01:39:36Z",
      "side": 1,
      "message": "@patrick@stwcx.xyz if the internal-only files in sdbusplus were renamed to follow some kind of pattern, like adding \"detail\" into the path, or \"impl\" (which isn\u0027t quite right) we can just blanket ignore those in the tidy file.\n\nnot going to hold this patch up either way.",
      "parentUuid": "582bae33_5a94d6eb",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 9,
        "endChar": 35
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca5a3a60_2d2637e2",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-23T14:19:38Z",
      "side": 1,
      "message": "I\u0027ll add the IWYU pragmas to make it clearer in sdbusplus.",
      "parentUuid": "2f5c9675_8768d8d0",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 9,
        "endChar": 35
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5714d52_4a4942e9",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 10,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "This is implied by async/match.hpp.  Maybe again this is an IWYU problem induced by clang-tidy that we should fix.",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c342e53_1dec0e75",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 10,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T08:03:33Z",
      "side": 1,
      "message": "Same as https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/comment/1c3d0d6b_b1f36616/ .\n\nRaised: https://gerrit.openbmc.org/c/openbmc/sdbusplus/+/80377",
      "parentUuid": "f5714d52_4a4942e9",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "982f9b8f_adf9118b",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Please use `xyz::openbmc_project::inventory::Item::namespace_path` here.",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45adbef9_b3716899",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 41,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "982f9b8f_adf9118b",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6fe0afc_c4bea645",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 46,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Ideally we would add org.freedesktop.DBus.ObjectManager to the PDI YAML so you can use the client bindings here but it is challenging with GetManagedObjects being essentially a `variant\u003cany\u003e`.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 46,
        "endChar": 77
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22ee4c08_ed73884f",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 51,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "nit: promote this outside the for-loop?  Can\u0027t we skip the entire function if there is no processInventoryAddedCallback?",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8dfaf26_a6dae683",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 51,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22ee4c08_ed73884f",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15fc7f68_42443299",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 63,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "After seeing the implementation here, I\u0027m a little surprised we don\u0027t have 3 tasks immediately dispatched to the ctx from the constructor (or added to an async_scope that can be co_awaited prior to destructing the class):\n\n```\nctx.spawn(handleInventoryAdded);\nctx.spawn(handleInventoryRemoved);\nctx.spawn(handleInventoryGet);\n```\n\nThen these become private functions.",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08aa07a7_7c58c27e",
        "filename": "src/EntityManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 63,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "handleInventoryAdded, handleInventoryRemoved have be added to the constructor call and made private since those are async matcher APIs, but inventoryGet is more of a regular function as it can be called at any time depending on usecase, for example, CableMonitor calls it when CableFile is discovered, so will leave that one as such.",
      "parentUuid": "15fc7f68_42443299",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "403a488a_62a86fbc",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "It isn\u0027t clear from the name to me why this class is called \"EntityManager\".  Isn\u0027t it _listening_ to entity-manager and not a manager itself?",
      "range": {
        "startLine": 15,
        "startChar": 6,
        "endLine": 15,
        "endChar": 19
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56187b06_a175ccb7",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 15,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Changed to EntityManagerInterface instead.",
      "parentUuid": "403a488a_62a86fbc",
      "range": {
        "startLine": 15,
        "startChar": 6,
        "endLine": 15,
        "endChar": 19
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a6a980a_f50751e2",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 18,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "nit: Can this be named shorter?",
      "range": {
        "startLine": 18,
        "startChar": 10,
        "endLine": 18,
        "endChar": 36
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d797a8d6_827c5b00",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 18,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Changed to just Callback_t based on your next set of comments.",
      "parentUuid": "8a6a980a_f50751e2",
      "range": {
        "startLine": 18,
        "startChar": 10,
        "endLine": 18,
        "endChar": 36
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c86d5418_8e9ac371",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 30,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "These 3 functions are entirely unclear to me what their purpose is even though they have a \"brief\".  When would I call them?  What do they do?  I have no idea.  Even after reading the implementation I have no idea.",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7eea7373_562a9ea9",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 30,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Resolving this comment based on https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/comment/15fc7f68_42443299/ as it seems you got the intent. Please let me know in case there are still any questions.",
      "parentUuid": "c86d5418_8e9ac371",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55565604_7e4b7273",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 31,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "nit: My preference on style, especially for co-routines, (and the maintainers can disagree) is:\n\n```\nauto handleInventoryGet() -\u003e stdplus::async::task\u003c\u003e;\n```\n\nThe main reasons:\n- Most modern languages use post-definition types now (Rust and Python are 2 relevant examples) so it makes overall developer experience more consistent.  Modern C++ supports it partially for this reason as well.\n- It is much easier on the eyes when skim-reviewing code because \u0027void\u0027 and \u0027auto\u0027 are both exactly 4 characters, so all function names line up, which is the primary information I care about.  This also means it is way easier to find a function implementation with my eyeballs rather than ctrl-f.\n\n(This suggestion would apply both to definitions and implementations and go through the entire commit.)",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 28
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bca0f61_f6ecb22f",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 31,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T08:03:33Z",
      "side": 1,
      "message": "That was the original code style i had, but i got a review comment from @ed@tanous.net suggesting that he don\u0027t want to adopt this new pattern for now, hence i had to change all the code to start using the prefix notation rather than postfix.\nI am marking this comment as resolved since it has already been discussed with maintainers and you have marked this as nit.",
      "parentUuid": "55565604_7e4b7273",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 28
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03476f4d_467be97f",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 31,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-18T01:39:36Z",
      "side": 1,
      "message": "We had talked about it on discord, and I\u0027m fine with the new pattern, I just wanted to understand why you were doing it.  After we discussed, I now understand, and I don\u0027t have a strong opinion either way, we can mix them up without worry (I didn\u0027t know that at the time I left the last comment).\n\nWill leave it between you and patrick if you want to go back.  I\u0027m fine either way.  FWIW, some of the tidy checks I remember not liking the -\u003e version, but if it works on the current tidy version, we\u0027re good.",
      "parentUuid": "9bca0f61_f6ecb22f",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 28
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5172f5d1_db63b77f",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 31,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-19T18:22:10Z",
      "side": 1,
      "message": "Works with tidy, so moved to -\u003e style.",
      "parentUuid": "03476f4d_467be97f",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 28
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01d8a7b5_392fb051",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 45,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "nit: My preference would be much shorter variable names.  Also suggest grouping by purpose and not by type.\n\nSomething like:\n```\naddedCallback\naddedMatch\nremovedCallback\nremovedMatch\n```\n\n\"process\" is definitely superfluous\n\nShort names reduce the \"wall of text\" effect when reading your code.  I know it is a constructor and probably going to be challenging to read to begin with but if you look at lines 23-34 in the next file the \"text to whitespace\" ratio is almost 100% text.  This makes it very very difficult for anyone to comprehend.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 45,
        "endChar": 50
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78dd1899_da7703fe",
        "filename": "src/EntityManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 45,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01d8a7b5_392fb051",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 45,
        "endChar": 50
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19194078_889360c4",
        "filename": "src/GPIOInterface.cpp",
        "patchSetId": 76
      },
      "lineNbr": 51,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Why would this ever happen?  We don\u0027t need to protect against memory allocation failures, do we?  If we do, we have serious hurt across the entire openbmc stack.\n\n(My opinion is that memory allocation errors are non-existent on modern linux because the only time you can get one is when you run out of address space; which is going to be an even worse problem for you anyhow.)",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4ed235c_62b3e1cc",
        "filename": "src/GPIOInterface.cpp",
        "patchSetId": 76
      },
      "lineNbr": 51,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "I didn\u0027t had it originally but ended up adding this to solve a clang issue which didn\u0027t get solved by this but by adding a check later on in the caller, so yes, will drop this.",
      "parentUuid": "19194078_889360c4",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a495ef6c_209288e0",
        "filename": "src/GPIOInterface.cpp",
        "patchSetId": 76
      },
      "lineNbr": 61,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "One of the subtle flaws here is that you have no way to stop the readGPIOAsyncEvent if this class is ever destructed, which means you have no way to write test cases for any of this code.\n\nThis is another case where another `async_scope` with a separate cancellation token might be necessary.",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12106c0e_1bf28b3b",
        "filename": "src/GPIOInterface.cpp",
        "patchSetId": 76
      },
      "lineNbr": 61,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-17T01:09:32Z",
      "side": 1,
      "message": "As discussed in person, this usecase won\u0027t hit at the moment, but once related code becomes available in sdbusplus will migrate to that. Marking this as resolved based on this.",
      "parentUuid": "a495ef6c_209288e0",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f3e1240_3abfaa94",
        "filename": "src/GPIOInterface.cpp",
        "patchSetId": 76
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-18T01:39:36Z",
      "side": 1,
      "message": "Can you enlighten me what the plan is here?",
      "parentUuid": "12106c0e_1bf28b3b",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4756b212_03245122",
        "filename": "src/GPIOInterface.cpp",
        "patchSetId": 76
      },
      "lineNbr": 61,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-19T18:22:10Z",
      "side": 1,
      "message": "The class needs to maintain own its async_scope so the tasks scheduled for it gets tracked via that and as part of destructor flow this async_scope can be cleaned up to get rid off any pending and waiting to be scheduled tasks. For now the plan is that @patrick@stwcx.xyz will work on adding this to sdbusplus as it seems to have a wider use case in other daemons too and once that code becomes available, this class will be updated to adopt/inherit that.\n\nResolving this comment for now. Please feel free to open this if it needs further discussion. Thanks",
      "parentUuid": "2f3e1240_3abfaa94",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "446a9b4c_f957b236",
        "filename": "src/GPIOInterface.cpp",
        "patchSetId": 76
      },
      "lineNbr": 64,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "nit: I prefer `co_return co_await` when the awaited coroutine actually returns something.  As written I have to think about what readGPIOAsync returns, which it turns out is nothing.\n\n`co_await readGPIOAsync(); co_return;`  And actually you don\u0027t need a `co_return` in a void-returning-co-routine if that co-routine does a `co_await` inside.  ie. just like a normal function `[co_]return` is implied.",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 14
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5251779_93e28ff7",
        "filename": "src/GPIOInterface.cpp",
        "patchSetId": 76
      },
      "lineNbr": 64,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "446a9b4c_f957b236",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 14
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83dcaed9_593521d2",
        "filename": "src/GPIOInterface.cpp",
        "patchSetId": 76
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Wait, if we have no callback we are doing nothing, right?  So why even have these tasks running in that case?",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ded0742_e1555bee",
        "filename": "src/GPIOInterface.cpp",
        "patchSetId": 76
      },
      "lineNbr": 75,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Are u saying i should remove this if (updateGPIOStateCallback) check? Not sure if clang will be happy.",
      "parentUuid": "83dcaed9_593521d2",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19509d01_9bc73c8c",
        "filename": "src/GPIOInterface.cpp",
        "patchSetId": 76
      },
      "lineNbr": 75,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T18:27:37Z",
      "side": 1,
      "message": "Moved the check start API, which was starting this tasks and dropped the check from handler coroutines.",
      "parentUuid": "4ded0742_e1555bee",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49d953d4_1c33d635",
        "filename": "src/GPIOInterface.hpp",
        "patchSetId": 76
      },
      "lineNbr": 16,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "This doesn\u0027t belong in the header.  Put it into the cpp file(s).",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "334e3dbb_7bb78e1f",
        "filename": "src/GPIOInterface.hpp",
        "patchSetId": 76
      },
      "lineNbr": 16,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "49d953d4_1c33d635",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b807c264_980bea2d",
        "filename": "src/Systemd.cpp",
        "patchSetId": 76
      },
      "lineNbr": 42,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "drop filename.",
      "range": {
        "startLine": 42,
        "startChar": 18,
        "endLine": 42,
        "endChar": 29
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "873c61d2_4ba1e615",
        "filename": "src/Systemd.cpp",
        "patchSetId": 76
      },
      "lineNbr": 42,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b807c264_980bea2d",
      "range": {
        "startLine": 42,
        "startChar": 18,
        "endLine": 42,
        "endChar": 29
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53c68889_753a3822",
        "filename": "src/Systemd.cpp",
        "patchSetId": 76
      },
      "lineNbr": 47,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "drop \u0027what\u0027",
      "range": {
        "startLine": 47,
        "startChar": 17,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a41e768_ca8eab45",
        "filename": "src/Systemd.cpp",
        "patchSetId": 76
      },
      "lineNbr": 47,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53c68889_753a3822",
      "range": {
        "startLine": 47,
        "startChar": 17,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1bb960b_f485f5a4",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 27,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "This implies those functions should have been private?",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 75
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b435082a_aec612d8",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 27,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1bb960b_f485f5a4",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 75
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7600ce5_95955369",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 30,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Another \"I cannot destruct this class\" problem.",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17dce433_95f48c70",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 30,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-17T01:09:32Z",
      "side": 1,
      "message": "Refer https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/comment/a495ef6c_209288e0/",
      "parentUuid": "a7600ce5_95955369",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d8683c9_c40043af",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 48,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Here you are destructing the GPIODetector class but that class does a `ctx.spawn()`.  I suspect you have a potential use-after-free as a result.",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75863f21_ed6f52db",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 48,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-17T01:09:32Z",
      "side": 1,
      "message": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/comment/a495ef6c_209288e0/",
      "parentUuid": "6d8683c9_c40043af",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "755d8b09_9e989e79",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 49,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "nit: Do you want to swap the order?  That way if the `erase` causes a crash you might have more information readily available as to where the crash was.",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98836212_baeba23c",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 49,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "object_path is already supported by lg2.  Drop the `.filename()` here.",
      "range": {
        "startLine": 49,
        "startChar": 53,
        "endLine": 49,
        "endChar": 74
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea8d3cc2_b6a3f41c",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 49,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98836212_baeba23c",
      "range": {
        "startLine": 49,
        "startChar": 53,
        "endLine": 49,
        "endChar": 74
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48ff6667_9fcd1335",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 49,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "755d8b09_9e989e79",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b793515c_60456ecc",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 57,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Uh... why is this a co-routine then?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 57,
        "endChar": 14
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40912a2a_d22980ea",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 57,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "This function has been dropped and left over calls moved to constructor.",
      "parentUuid": "b793515c_60456ecc",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 57,
        "endChar": 14
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3897727a_23ff2d1e",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 98,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Get all the properties in one shot.  That means you do 1 dbus operation instead of 5.\n\n```suggestion\n    auto client \u003d co_await GPIODetectorConfigIntf(ctx)\n                      .service(entity_manager::EntityManager::serviceName)\n                      .path(objectPath.str).properties();\n```",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 98,
        "endChar": 44
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "836cb09a_3a8debfd",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 98,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done. Thanks",
      "parentUuid": "3897727a_23ff2d1e",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 98,
        "endChar": 44
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c250020_336f4ea3",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 158,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "nit: can we make these `xyz.openbmc_project.dbus_sensors.leakdetector` going forward?",
      "range": {
        "startLine": 158,
        "startChar": 54,
        "endLine": 158,
        "endChar": 66
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f475396f_87f49b12",
        "filename": "src/leakdetector/LeakDetectionManager.cpp",
        "patchSetId": 76
      },
      "lineNbr": 158,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T08:03:33Z",
      "side": 1,
      "message": "I don\u0027t see any other services in dbus_sensors doing this, so for now lets follow that pattern. We can always raise a followup patch for all the services, if needed.",
      "parentUuid": "4c250020_336f4ea3",
      "range": {
        "startLine": 158,
        "startChar": 54,
        "endLine": 158,
        "endChar": 66
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03d2e86d_c5513525",
        "filename": "src/leakdetector/LeakDetectionManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 30,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Again, I don\u0027t know why to call these.",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "904010eb_97164acc",
        "filename": "src/leakdetector/LeakDetectionManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 30,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "These are the callback handlers for inventory actions which gets passed to EM interface constructor.",
      "parentUuid": "03d2e86d_c5513525",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be6ac8fc_61802681",
        "filename": "src/leakdetector/LeakDetectionManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 45,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Please be consistent with your naming: start vs startup.",
      "range": {
        "startLine": 45,
        "startChar": 29,
        "endLine": 45,
        "endChar": 36
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96432b40_523db5b0",
        "filename": "src/leakdetector/LeakDetectionManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 45,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Dropped this startup function and folded the call into constructor.",
      "parentUuid": "be6ac8fc_61802681",
      "range": {
        "startLine": 45,
        "startChar": 29,
        "endLine": 45,
        "endChar": 36
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d074f10d_23157cbf",
        "filename": "src/leakdetector/LeakDetectionManager.hpp",
        "patchSetId": 76
      },
      "lineNbr": 53,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "This is a good example where post-return syntax improves readability a lot.",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 53,
        "endChar": 70
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ce79bee_5118db94",
        "filename": "src/leakdetector/LeakEvents.cpp",
        "patchSetId": 76
      },
      "lineNbr": 24,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Should we use a tuple or struct here instead?  It seems like you\u0027re only using this as a key in a local map?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 72
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49569035_a9d7c433",
        "filename": "src/leakdetector/LeakEvents.cpp",
        "patchSetId": 76
      },
      "lineNbr": 24,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T18:53:41Z",
      "side": 1,
      "message": "Done, made tuple.",
      "parentUuid": "3ce79bee_5118db94",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 72
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ea62709_3d4d4d88",
        "filename": "src/leakdetector/LeakEvents.cpp",
        "patchSetId": 76
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "nit: I would early return here and eliminate the `else`.",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 41,
        "endChar": 8
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13d12dd0_c2743e7d",
        "filename": "src/leakdetector/LeakEvents.cpp",
        "patchSetId": 76
      },
      "lineNbr": 41,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ea62709_3d4d4d88",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 41,
        "endChar": 8
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8718c63a_c668c032",
        "filename": "src/leakdetector/LeakEvents.cpp",
        "patchSetId": 76
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Just use `co_await lg2::resolve(ctx, path)` and eliminate this whole function.",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 75,
        "endChar": 1
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46d86c6c_4e1d0520",
        "filename": "src/leakdetector/LeakEvents.cpp",
        "patchSetId": 76
      },
      "lineNbr": 75,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Great, i didn\u0027t knew this API existed. Thanks",
      "parentUuid": "8718c63a_c668c032",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 75,
        "endChar": 1
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2399604_61d4a588",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 25,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "I don\u0027t know if we want dbus_sensor on these also.",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95235ed5_c9627e8b",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 25,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T03:01:08Z",
      "side": 1,
      "message": "I don\u0027t see any dbus sensors service names having any such keyword in there, so lets follow the same for now.",
      "parentUuid": "d2399604_61d4a588",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ffc6b59_2251c91d",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 43,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Another \"spawn in constructor\" \u003d\u003e \"cannot be deleted\" class.",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fac6c224_db4d5888",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 43,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-17T01:09:32Z",
      "side": 1,
      "message": "https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/comment/a495ef6c_209288e0/",
      "parentUuid": "9ffc6b59_2251c91d",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27981080_ef39e003",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 66,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "I don\u0027t fully understand what this is accomplishing.  Can you give some comments as to why we need to track this `emitSignal` state and not send the signal the first time?\n\nI suspect we\u0027re trying to do something where we really should be calling emit_object_added after the first time we set up the property value and the rest of the times we are needing to update the property itself?",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 66,
        "endChar": 9
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d125fd0_4e49ae84",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 66,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T08:03:33Z",
      "side": 1,
      "message": "\u003e I don\u0027t fully understand what this is accomplishing.  Can you give some comments as to why we need to track this `emitSignal` state and not send the signal the first time?\n\u003e \n\u003e I suspect we\u0027re trying to do something where we really should be calling emit_object_added after the first time we set up the property value and the rest of the times we are needing to update the property itself?\n\nYes, thats what i was trying to accomplish. Dropped this code. Shall i really add emit_added() as you mentioned in other comment that you are planning to fix the issue.",
      "parentUuid": "27981080_ef39e003",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 66,
        "endChar": 9
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61aabc69_d8bcd27f",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 66,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-17T01:09:32Z",
      "side": 1,
      "message": "As discussed will just add property set without passing any signal state for now. Patrick will add logic in PDI async bindings to generate the required signals.",
      "parentUuid": "9d125fd0_4e49ae84",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 66,
        "endChar": 9
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7a125f1_d9d1cffd",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 79,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Why does this need to be spawned?  Isn\u0027t it fairly light-weight to ask systemd to start a unit?  Can we just co_await right here?  Or does the startUnit call block until the unit finishes (I don\u0027t think it does).",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab963804_17c15c65",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 79,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T03:01:08Z",
      "side": 1,
      "message": "Initially i had a co_await here as i agree that starting a unit shouldn\u0027t be too expensive, but @ed@tanous.net didn\u0027t wanted to block the scanning on this and suggested for a spawn here, hence so\nhttps://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/comment/192e817c_fbaa8cde/ .\n\nI am marking this as resolved for now, in case you have a strong opinion on this we can start a discussion thread.",
      "parentUuid": "b7a125f1_d9d1cffd",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89e86192_a5e67979",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-18T01:39:36Z",
      "side": 1,
      "message": "It\u0027s another IO that doesn\u0027t matter to the overall flow, so I assumed that it was better to spawn to another task?  Is the expense of spawn something to worry about?",
      "parentUuid": "ab963804_17c15c65",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d29235a1_cddc6e29",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 79,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-19T18:22:10Z",
      "side": 1,
      "message": "As per https://www.freedesktop.org/wiki/Software/systemd/dbus/ -\n`StartUnit() enqeues a start job, and possibly depending jobs`\n\nSo, seems like it just queues the job and returns a Job Object, which seems light weight. Based on this i will go ahead and change this to co_wait for now. In future, if it becomes a bottleneck we can always re-visit this.",
      "parentUuid": "89e86192_a5e67979",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ced268df_2667e985",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 76
      },
      "lineNbr": 79,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-23T14:19:38Z",
      "side": 1,
      "message": "\u003e Is the expense of spawn something to worry about?\n\nSpawning itself isn\u0027t expensive; but it\u0027s not something that really should be done as much as it is being done in this daemon.  It is roughly equivalent to launching a detached pthread.  Once you spawn it you have no way to track completion and/or errors.\n\nI\u0027ve talked to Jagpal about adding some additional support in sdbusplus for some of these use cases to handle it better.  There is an async_scope already in stdexec but it\u0027s a little bit of code to set it up and join on it later; I\u0027d like to make that more consumable.",
      "parentUuid": "d29235a1_cddc6e29",
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aeac4712_db17ea05",
        "filename": "src/leakdetector/LeakGPIODetector.hpp",
        "patchSetId": 76
      },
      "lineNbr": 93,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "I think this can go in as is, but as a follow up I need to get some code in that emit events properly for the `async::server_t` class.  Right now you\u0027re not going to get events emitted which means object-mapper won\u0027t know about your classes.",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 93,
        "endChar": 64
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a85360e_8d9e3fd3",
        "filename": "src/leakdetector/LeakGPIODetector.hpp",
        "patchSetId": 76
      },
      "lineNbr": 93,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Sure Thanks. Will catchup with you on this as there was a patch raised by Alexander as well for sdbusplus. I didn\u0027t get a chance to review that yet.",
      "parentUuid": "aeac4712_db17ea05",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 93,
        "endChar": 64
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96ec0941_fd732e07",
        "filename": "src/leakdetector/LeakGPIODetector.hpp",
        "patchSetId": 76
      },
      "lineNbr": 99,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "nit: You can probably avoid making this a member function and just make it a static function inside LeakGPIODetector.cpp.",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 99,
        "endChar": 41
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56f94074_dd4b54d8",
        "filename": "src/leakdetector/LeakGPIODetector.hpp",
        "patchSetId": 76
      },
      "lineNbr": 99,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T02:02:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "96ec0941_fd732e07",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 99,
        "endChar": 41
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0532e5a7_bdcfa4f5",
        "filename": "src/meson.build",
        "patchSetId": 76
      },
      "lineNbr": 68,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T12:51:05Z",
      "side": 1,
      "message": "Should these be turned into a static_library?  I suspect so.",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 68,
        "endChar": 46
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c8c51ce_280c22ef",
        "filename": "src/meson.build",
        "patchSetId": 76
      },
      "lineNbr": 68,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-16T03:01:08Z",
      "side": 1,
      "message": "For systemd.cpp, Ed was not in support of making the static lib, please refer here https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/comment/5cd26f5f_5818e588/.\n\nUpdated GPIoInterface and EntityManagerInterface to define static libs.",
      "parentUuid": "0532e5a7_bdcfa4f5",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 68,
        "endChar": 46
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7e96a43_a1220e32",
        "filename": "src/meson.build",
        "patchSetId": 76
      },
      "lineNbr": 68,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-23T14:19:38Z",
      "side": 1,
      "message": "I don\u0027t really understand why we are creating N static libraries.  I would suggest just one static library for all the sdbusplus::async-based support.\n\nI see there seems to be a pattern here in dbus-sensors of every .cpp file being its own static library, which is not clear to me why.  I guess if you\u0027re just following that pattern here, ok, but I don\u0027t really understand it.\n\nThe point of making a static_library is that the code all gets compiled once.  The compiler is still smart enough to only pick the bits out of you actually need.",
      "parentUuid": "8c8c51ce_280c22ef",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 68,
        "endChar": 46
      },
      "revId": "03d6dad4cc9c4994ec59829c4dd66ec84847148e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}