{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ceabe80e_fda8ba80",
        "filename": "src/NVMeBasicContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-21T15:39:07Z",
      "side": 1,
      "message": "Can we do this in the constructor for the class?  If the i2c bus disappears while we\u0027re running, that probably should be a fatal error.\n\n\nAlso, generally in these cases we\u0027d use std::optional to we don\u0027t have to malloc.\n\n\n\n@arj, do you recall why we\u0027re opening the i2c handle every time here?  Can\u0027t we just open it once and leave it open?",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 53
      },
      "revId": "5e75815ec4a435ea34224b44ea97c2cad483d375",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "991cccdf_76bd924a",
        "filename": "src/NVMeBasicContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-07-22T01:19:58Z",
      "side": 1,
      "message": "Because I was lazy and it was the easiest approach to reason about in terms of being the least stateful.\n\nI\u0027m fine if we refactor it.",
      "parentUuid": "ceabe80e_fda8ba80",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 53
      },
      "revId": "5e75815ec4a435ea34224b44ea97c2cad483d375",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e93a79e_4761b153",
        "filename": "src/NVMeBasicContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2022-07-22T03:33:38Z",
      "side": 1,
      "message": "Which class\u0027s constructor were you mentioning? If it\u0027s FileHandle, is that a normal thing that the user of this class should be the one catching the exception before further processing?\n\nAbout i2c handle open all the time, will it cause the bus to be busy and not be able to be used by others?",
      "parentUuid": "991cccdf_76bd924a",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 53
      },
      "revId": "5e75815ec4a435ea34224b44ea97c2cad483d375",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53d0b1ad_bf079229",
        "filename": "src/NVMeBasicContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-07-22T03:57:54Z",
      "side": 1,
      "message": "\u003e About i2c handle open all the time, will it cause the bus to be busy and not be able to be used by others?\n\nNo. You can see how open() is implemented here: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/i2c/i2c-dev.c?h\u003dv5.19-rc7\n\nIn particular, it doesn\u0027t prevent multiple-open.\n\nThe only time you\u0027re using the bus is when you issue a command to the endpoint, and any other fds open for the device will block until your command is complete. Once it completes any other commands on other fds are processed immediately by the i2c subsystem.\n\nThe behaviour is described in more depth here: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/i2c/dev-interface.rst?h\u003dv5.19-rc7",
      "parentUuid": "5e93a79e_4761b153",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 53
      },
      "revId": "5e75815ec4a435ea34224b44ea97c2cad483d375",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8abc5a3_0a54f659",
        "filename": "src/NVMeBasicContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2022-07-22T08:31:22Z",
      "side": 1,
      "message": "Yes, thanks a lot for helpful info @arj. So with the scope of the issue mentioned in this patch, a catching is an inevitable action since there is a possibility the exception will be thrown anyway. Or should I simply check if the /dev/* path exists before doing any file handling? Please gimme some advice on how I should go further with this patch.",
      "parentUuid": "53d0b1ad_bf079229",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 53
      },
      "revId": "5e75815ec4a435ea34224b44ea97c2cad483d375",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7fcb371_3c14c6be",
        "filename": "src/NVMeBasicContext.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-07-25T00:12:41Z",
      "side": 1,
      "message": "\u003e Which class\u0027s constructor were you mentioning? If it\u0027s FileHandle, is that a normal thing that the user of this class should be the one catching the exception before further processing?\n\nI think Ed meant in the NVMeBasicContext constructor.\n\n\u003e So with the scope of the issue mentioned in this patch, a catching is an inevitable action since there is a possibility the exception will be thrown anyway.\n\nNot if we already have a file descriptor embedded in the NVMeBasicContext instance. If you try to access a file descriptor associated with a device that\u0027s been removed you\u0027ll get something like EBADF. Please test this and confirm.\n\n\u003e Or should I simply check if the /dev/* path exists before doing any file handling?\n\nNo, that\u0027s racy. The device could disappear between the stat() and the open(), so you have to handle the open() error anyway.",
      "parentUuid": "c8abc5a3_0a54f659",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 53
      },
      "revId": "5e75815ec4a435ea34224b44ea97c2cad483d375",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}