{
  "comments": [
    {
      "key": {
        "uuid": "ec864c31_5773d80c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-10T16:46:12Z",
      "side": 1,
      "message": "nit, technically this isn\u0027t intel specific, right?  (although I think they\u0027re the only platform that implements it)",
      "range": {
        "startLine": 9,
        "startChar": 5,
        "endLine": 9,
        "endChar": 10
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73b55205_42fadbb9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 9,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "Remove Intel",
      "parentUuid": "ec864c31_5773d80c",
      "range": {
        "startLine": 9,
        "startChar": 5,
        "endLine": 9,
        "endChar": 10
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4868cd1b_d47623b8",
        "filename": "include/meson.build",
        "patchSetId": 21
      },
      "lineNbr": 2,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-10T15:08:45Z",
      "side": 1,
      "message": "Should this be set10?  similar to here: https://github.com/openbmc/bmcweb/blob/1b1be67fb8d50293d452316f51227363750a3d00/meson.build#L355",
      "range": {
        "startLine": 2,
        "startChar": 10,
        "endLine": 2,
        "endChar": 13
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2b358e6_a8ab1ce0",
        "filename": "include/meson.build",
        "patchSetId": 21
      },
      "lineNbr": 2,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "Modified",
      "parentUuid": "4868cd1b_d47623b8",
      "range": {
        "startLine": 2,
        "startChar": 10,
        "endLine": 2,
        "endChar": 13
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5371b72_f396401d",
        "filename": "include/sensor.hpp",
        "patchSetId": 21
      },
      "lineNbr": 62,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-05-10T16:12:31Z",
      "side": 1,
      "message": "This is already default to false, so it does not have to be in the constructor. The two special case can set it to true in the constructor. That way we avoid increasing the already long parameter list for the constructor.",
      "range": {
        "startLine": 62,
        "startChar": 3,
        "endLine": 62,
        "endChar": 34
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4bc8991_80c0cdc1",
        "filename": "include/sensor.hpp",
        "patchSetId": 21
      },
      "lineNbr": 62,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-11T17:00:28Z",
      "side": 1,
      "message": "Does it make more sense to make this an enum class instead of a bool?\n\nSensorType::Writable seems a lot more readable than just \"true\"",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 62,
        "endChar": 8
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d35875b0_1a23c088",
        "filename": "include/sensor.hpp",
        "patchSetId": 21
      },
      "lineNbr": 62,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-11T17:00:28Z",
      "side": 1,
      "message": "\u003e This is already default to false, so it does not have to be in the constructor. The two special case can set it to true in the constructor. \n\nPlease don\u0027t do that, as it puts sensor-specific data into the generic sensor class (we\u0027d have to match on interface name like the first patch did)\n\n\u003e That way we avoid increasing the already long parameter list for the constructor.\n\nAgreed, this is already long, but I don\u0027t see how we avoid it in this case.  At some point the init params probably need to become their own struct.\n\n\n\n\nWith all that said, agree, this \u003d false is redundant and can be removed.",
      "parentUuid": "a5371b72_f396401d",
      "range": {
        "startLine": 62,
        "startChar": 3,
        "endLine": 62,
        "endChar": 34
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0a82936_dbb94e79",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 519,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-10T15:08:45Z",
      "side": 1,
      "message": "should be 0",
      "range": {
        "startLine": 519,
        "startChar": 0,
        "endLine": 519,
        "endChar": 25
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55511cf5_a2b11e88",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 519,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "Modified.",
      "parentUuid": "b0a82936_dbb94e79",
      "range": {
        "startLine": 519,
        "startChar": 0,
        "endLine": 519,
        "endChar": 25
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "719d544c_f5ed273f",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 523,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-10T15:08:45Z",
      "side": 1,
      "message": "please don\u0027t do blocking calls in an async daemon.  use async_method_call.",
      "range": {
        "startLine": 523,
        "startChar": 0,
        "endLine": 523,
        "endChar": 46
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66635f92_9e78a019",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 523,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "Modified.",
      "parentUuid": "719d544c_f5ed273f",
      "range": {
        "startLine": 523,
        "startChar": 0,
        "endLine": 523,
        "endChar": 46
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db535d74_916bae0e",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 540,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-10T15:08:45Z",
      "side": 1,
      "message": "This has a race condition if the daemon that publishes xyz.openbmc_project.Security.SpecialMode hasn\u0027t started when this is run.\n\nYou need to remove this from the getsubtree check, and make sure it\u0027s instantiated before you do the mapper call.",
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fc04c6a_0db03e43",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 540,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "Modified.\nfollow origin design, if the specialMode interface exist, then check the subtree information.\nIf other user need to use the specialMode service in their project, they should add the After to wait specialMode service ready before start dbus-sensor.",
      "parentUuid": "db535d74_916bae0e",
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbc78dc7_f9fbd025",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 540,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-11T16:56:33Z",
      "side": 1,
      "message": "\u003e Modified.\n\u003e follow origin design, if the specialMode interface exist, then check the subtree information.\n\u003e If other user need to use the specialMode service in their project, they should add the After to wait specialMode service ready before start dbus-sensor.\n\nThat goes against the design of dbus-sensors, but was fine in bmcweb, because we were doing it in the context of a low-rate set request.  in dbus-sensors, all of these are high rate.  At one point dbus-sensors did what you recommended and relied on the AFTER param, but had issues with reliability and handling service restarts, hence why the design today is different.",
      "parentUuid": "0fc04c6a_0db03e43",
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce6af0e1_403c2f23",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 540,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-13T05:43:23Z",
      "side": 1,
      "message": "Could advise how to implement to support the \"make sure it\u0027s instantiated before you do the mapper call\"?",
      "parentUuid": "bbc78dc7_f9fbd025",
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74423649_de949ed3",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 558,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-10T15:08:45Z",
      "side": 1,
      "message": "missing length check.  You need to loop over propertiesChanged",
      "range": {
        "startLine": 558,
        "startChar": 49,
        "endLine": 558,
        "endChar": 57
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d4d4fe3_b86f6add",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 558,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "Modified",
      "parentUuid": "74423649_de949ed3",
      "range": {
        "startLine": 558,
        "startChar": 49,
        "endLine": 558,
        "endChar": 57
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72ea6074_0437d10e",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 564,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-10T15:08:45Z",
      "side": 1,
      "message": "you need to actually check the value here.  this will enable SP mode for ANY property change, whether enabled or disabled.\n\nAlso, because you have two interfaces you need to track, I suspect you need two variables here.",
      "range": {
        "startLine": 564,
        "startChar": 0,
        "endLine": 564,
        "endChar": 54
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54370bbf_805fa17d",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 564,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "Not really understand what you mean, I reference https://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/sensors.hpp#L2942 to modified, what two interfaces need to track?",
      "parentUuid": "72ea6074_0437d10e",
      "range": {
        "startLine": 564,
        "startChar": 0,
        "endLine": 564,
        "endChar": 54
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30644dd6_16c67d8a",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 574,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-05-10T16:12:31Z",
      "side": 1,
      "message": "should there be isSpModeEnable \u003d false for the \"else\" case?",
      "range": {
        "startLine": 574,
        "startChar": 27,
        "endLine": 574,
        "endChar": 29
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19732802_7195a895",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 574,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "I reference https://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/sensors.hpp#L2942\nthe else is default value isSpModeEnable \u003d false;",
      "parentUuid": "30644dd6_16c67d8a",
      "range": {
        "startLine": 574,
        "startChar": 27,
        "endLine": 574,
        "endChar": 29
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d50b95b_5e914548",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 576,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-10T15:08:45Z",
      "side": 1,
      "message": "Please be more specific about what exceptions you are catching here.",
      "range": {
        "startLine": 576,
        "startChar": 31,
        "endLine": 576,
        "endChar": 47
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d15aadd_6ae8761f",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 576,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "Modified.",
      "parentUuid": "5d50b95b_5e914548",
      "range": {
        "startLine": 576,
        "startChar": 31,
        "endLine": 576,
        "endChar": 47
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69539cb0_3fb9704d",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 580,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-10T15:08:45Z",
      "side": 1,
      "message": "If we fail we destroy the match entirely?  that doesn\u0027t seem right.",
      "range": {
        "startLine": 580,
        "startChar": 28,
        "endLine": 580,
        "endChar": 59
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a719f820_4582bc9a",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 580,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "Modified.",
      "parentUuid": "69539cb0_3fb9704d",
      "range": {
        "startLine": 580,
        "startChar": 28,
        "endLine": 580,
        "endChar": 59
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e833fb30_47c2f5e7",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 581,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-10T15:08:45Z",
      "side": 1,
      "message": "nit: not needed",
      "range": {
        "startLine": 581,
        "startChar": 0,
        "endLine": 581,
        "endChar": 35
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b190a927_1e3e29f8",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 581,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "Modified.",
      "parentUuid": "e833fb30_47c2f5e7",
      "range": {
        "startLine": 581,
        "startChar": 0,
        "endLine": 581,
        "endChar": 35
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aa644ed_75b9ebd0",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 583,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-05-10T15:08:45Z",
      "side": 1,
      "message": "also not needed.",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 31
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ba04d52_90c6bc5f",
        "filename": "src/Utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 583,
      "author": {
        "id": 1000895
      },
      "writtenOn": "2021-05-11T07:15:11Z",
      "side": 1,
      "message": "Modified.",
      "parentUuid": "5aa644ed_75b9ebd0",
      "range": {
        "startLine": 583,
        "startChar": 0,
        "endLine": 583,
        "endChar": 31
      },
      "revId": "001578b32964cf54de8c4f2050bc690cafc3f589",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}