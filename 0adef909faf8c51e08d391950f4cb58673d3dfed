{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "737a09a7_a2194a64",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-12-18T03:05:25Z",
      "side": 1,
      "message": "Hi @Chau, I think you should change the method to read GPIO\u0027s status from event to polling reading. I suggest that b/c some GPIO can be the i2c peripheral device (like pca9555), they can not generate event when the GPIO\u0027s status changed. Beside that, we can unify the reading method of I2C/GPIO/Intrusion-Driver to polling.",
      "revId": "0adef909faf8c51e08d391950f4cb58673d3dfed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6b2c99d_4643111c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2024-12-20T05:26:53Z",
      "side": 1,
      "message": "I used to sync three classes to use the same polling function just for code simplicity, but the maintainer suggested to enlist the hardware ability and I think that makes sense as the intrusion just happens once in a while so polling can be expensive. Moreover, will the chassis intrusion button be connected to a pin to a i2c device instead of a real GPIO pin? I\u0027m OK with both methods because I\u0027m not experienced, so I need more feedbacks about this.",
      "parentUuid": "737a09a7_a2194a64",
      "revId": "0adef909faf8c51e08d391950f4cb58673d3dfed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d62523d_1e85f16c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-12-24T04:18:20Z",
      "side": 1,
      "message": "I would suggest not to remove event support solely because a specific device doesn\u0027t support it. The code is already in place, and it\u0027s beneficial to keep it. Instead, consider implementing a meson-based option that enables polling for devices that don\u0027t support events. This way, events can remain the default path while still accommodating devices with limited capabilities. Would suggest running this by maintainers to get their feedback.",
      "parentUuid": "d6b2c99d_4643111c",
      "revId": "0adef909faf8c51e08d391950f4cb58673d3dfed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07bb9525_79d3d502",
        "filename": "src/intrusion/ChassisIntrusionSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 402,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-12-17T08:24:48Z",
      "side": 1,
      "message": "Does implementation handles the case - if there is a GPIO status change between initial read and gpio polling start? If not, do you think it will be better to change the order to start polling first?",
      "revId": "0adef909faf8c51e08d391950f4cb58673d3dfed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e72e9d5e_4ad52ac2",
        "filename": "src/intrusion/ChassisIntrusionSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 402,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2024-12-17T12:45:38Z",
      "side": 1,
      "message": "Yes, that\u0027s a missing case. I\u0027m planning to do as below to cover that, as I think this is cleaner than adding a first-polling-check flag, or overriding the start() method of gpio class:\n\n\n    int ChassisIntrusionGpioSensor::readSensor()\n    {\n       // mGpioLine.event_read();\n       auto value \u003d mGpioLine.get_value();\n       return value;\n    }\n\n    void ChassisIntrusionGpioSensor::pollSensorStatus()\n    {\n       mGpioFd.async_wait(...,[]()\n         {\n             if (ec) return;\n             else {\n                 mGpioLine.event_read();\n                 // trigger next polling\n                 pollSensorStatus();\n             }\n         });\n      \n      // This is to cover the initial reading.\n      // And on a gpioline event, value will be read and published on the next call \n      // to pollSensorStatus()\n      int value \u003d readSensor();\n      if (value \u003e\u003d 0)\n      {\n         updateValue(value);\n      }\n    }\n\nOnce an event happens, it calls to pollSensorStatus to trigger next polling, and the value of that event will be read only after the next polling is registered. This way, the initial value can be trieved on the first call to polling, too. Do you think the above implementation is fine? I believe no event can jump in before pollSensorStatus() completes, so it won\u0027t cause Read-after-write hazard, right?",
      "parentUuid": "07bb9525_79d3d502",
      "revId": "0adef909faf8c51e08d391950f4cb58673d3dfed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc123ef7_aad40edd",
        "filename": "src/intrusion/ChassisIntrusionSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 402,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-12-24T04:09:57Z",
      "side": 1,
      "message": "Do you foresee any specific issues with overriding the start() method? The implementation above appears to be correct, but it requires a closer look to understand what\u0027s being done. In general i don\u0027t have any specific preferences.  \n\n\u003e I believe no event can jump in before pollSensorStatus() completes, so it won\u0027t cause Read-after-write hazard, right?\n\nLooks fine to me.",
      "parentUuid": "e72e9d5e_4ad52ac2",
      "revId": "0adef909faf8c51e08d391950f4cb58673d3dfed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e47e2aba_3749f8fd",
        "filename": "src/intrusion/ChassisIntrusionSensor.cpp",
        "patchSetId": 16
      },
      "lineNbr": 402,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2024-12-31T11:43:39Z",
      "side": 1,
      "message": "\u003e Do you foresee any specific issues with overriding the start() method? The implementation above appears to be correct, but it requires a closer look to understand what\u0027s being done. In general i don\u0027t have any specific preferences.\n\nNo, I see no issue, just wanted it to be neat. You are right, this can cause confusion. I updated to let gpio class override the start() function.",
      "parentUuid": "dc123ef7_aad40edd",
      "revId": "0adef909faf8c51e08d391950f4cb58673d3dfed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}