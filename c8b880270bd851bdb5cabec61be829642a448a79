{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "43b4f082_954a98bc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-04-23T05:30:21Z",
      "side": 1,
      "message": "nit: avoid the works AMI and use accelerator management interface instead",
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62adfbd4_dacbf4f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-04-23T14:14:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43b4f082_954a98bc",
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26377005_0dc25579",
        "filename": "src/gpu/GpuMctpVdm.cpp",
        "patchSetId": 2
      },
      "lineNbr": 359,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-22T14:42:36Z",
      "side": 1,
      "message": "Should we do the math in integers, THEN promote to double?",
      "range": {
        "startLine": 359,
        "startChar": 35,
        "endLine": 359,
        "endChar": 54
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5223051_adce5df8",
        "filename": "src/gpu/GpuMctpVdm.cpp",
        "patchSetId": 2
      },
      "lineNbr": 359,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-04-23T14:14:03Z",
      "side": 1,
      "message": "We would loose the precision in that case and temperature reading value would always be a complete number instead of the fraction.",
      "parentUuid": "26377005_0dc25579",
      "range": {
        "startLine": 359,
        "startChar": 35,
        "endLine": 359,
        "endChar": 54
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35690334_32b06b17",
        "filename": "src/gpu/GpuMctpVdm.cpp",
        "patchSetId": 2
      },
      "lineNbr": 359,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-24T16:33:25Z",
      "side": 1,
      "message": "ACK",
      "parentUuid": "a5223051_adce5df8",
      "range": {
        "startLine": 359,
        "startChar": 35,
        "endLine": 359,
        "endChar": 54
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "945cef4d_64d9ea83",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-04-23T05:31:13Z",
      "side": 1,
      "message": "I think this commit needs only request and response types?",
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94179dc1_9b81a0bc",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-04-23T14:14:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "945cef4d_64d9ea83",
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "501cd996_3dc37f4c",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-22T14:42:36Z",
      "side": 1,
      "message": "Why is this needed if we have encode/decode methods that are setting network vs host byte order?  Should this just be handled in that?",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 37
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cce52e2d_5f87c278",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-04-23T14:14:03Z",
      "side": 1,
      "message": "It\u0027s done this way to avoid network to host byte conversion for this common data structure in every encode/decode methods.",
      "parentUuid": "501cd996_3dc37f4c",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 37
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "302ca7dc_02d8be80",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-30T20:40:51Z",
      "side": 1,
      "message": "Lets just be consistent and do network to host byte conversion on this struct so we\u0027re consistent.  We\u0027re not at that point of optimizing here, so keep code simple and consistent",
      "parentUuid": "cce52e2d_5f87c278",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 37
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2cf643c_2bdaeb79",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-05-05T11:50:00Z",
      "side": 1,
      "message": "We already do network to host byte for this struct inside the functions, but since these field are of length of only one byte and contains bitfields we also need bitlevel conversions, and hence we have to have this for struct definitions as well.",
      "parentUuid": "302ca7dc_02d8be80",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 37
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c99a88b2_80e07e6b",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 222,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-22T14:42:36Z",
      "side": 1,
      "message": "Nvidia VDM specifics need to go in a separate file from the OCP library structures.",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f89b9dc0_d4356cfe",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 222,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-04-23T05:30:21Z",
      "side": 1,
      "message": "I would suggest have an OcpMctpVdm.hpp/cpp for all the OCP structures and have the Nvidia VDM specifics in the existing Gpu* files.",
      "parentUuid": "c99a88b2_80e07e6b",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bad4cb2d_08d590b6",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 222,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-04-23T14:14:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f89b9dc0_d4356cfe",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "040a8053_7e1deb10",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-04-23T05:30:21Z",
      "side": 1,
      "message": "I think we should introduce the types other than GPU when we add support for other device types.",
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eae974c4_92094f9c",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-04-23T14:14:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "040a8053_7e1deb10",
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7b8cd47_54250c77",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 440,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-22T14:42:36Z",
      "side": 1,
      "message": "This doesn\u0027t describe what the return code is, it\u0027s just a type, that I can read from the declaration below.  Based on my reading, this return is whether or not the parse succeeded, so probably needs its own return code type",
      "range": {
        "startLine": 440,
        "startChar": 12,
        "endLine": 440,
        "endChar": 55
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c523bcbd_1a358450",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 440,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-04-23T14:14:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7b8cd47_54250c77",
      "range": {
        "startLine": 440,
        "startChar": 12,
        "endLine": 440,
        "endChar": 55
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94559f8c_0d1b015b",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 443,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-22T14:42:36Z",
      "side": 1,
      "message": "Why does this API have two return codes?",
      "range": {
        "startLine": 443,
        "startChar": 68,
        "endLine": 443,
        "endChar": 79
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3c03352_4fe84308",
        "filename": "src/gpu/GpuMctpVdm.hpp",
        "patchSetId": 2
      },
      "lineNbr": 443,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-04-23T14:14:03Z",
      "side": 1,
      "message": "The function parameter cc is CompletionCode as received in the response message and returned value is status/error code for this function.",
      "parentUuid": "94559f8c_0d1b015b",
      "range": {
        "startLine": 443,
        "startChar": 68,
        "endLine": 443,
        "endChar": 79
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d89004d1_b8c51a4f",
        "filename": "src/gpu/MctpRequester.cpp",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-22T14:42:36Z",
      "side": 1,
      "message": "This is a blocking send.  Should we be using the mctp socket method instead?",
      "range": {
        "startLine": 149,
        "startChar": 17,
        "endLine": 149,
        "endChar": 23
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae3579e2_918171d8",
        "filename": "src/gpu/MctpRequester.cpp",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-04-23T14:14:03Z",
      "side": 1,
      "message": "Based on our testing this sendto would not block as MCTP socket will always be available for write. And as per my reading of the boost asio documentation send methods for boost asio socket does not support specifying the raw address that we need for the mctp communication.",
      "parentUuid": "d89004d1_b8c51a4f",
      "range": {
        "startLine": 149,
        "startChar": 17,
        "endLine": 149,
        "endChar": 23
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1de02850_1c1e7934",
        "filename": "src/gpu/MctpRequester.hpp",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-22T14:42:36Z",
      "side": 1,
      "message": "Some comments look like they got ignored from the other patch?",
      "range": {
        "startLine": 86,
        "startChar": 8,
        "endLine": 86,
        "endChar": 14
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e9bd97b_7fe9bcf1",
        "filename": "src/gpu/MctpRequester.hpp",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1002395
      },
      "writtenOn": "2025-04-23T14:14:03Z",
      "side": 1,
      "message": "sockFd is used in other methods of the class and hence it is needed as a member data.",
      "parentUuid": "1de02850_1c1e7934",
      "range": {
        "startLine": 86,
        "startChar": 8,
        "endLine": 86,
        "endChar": 14
      },
      "revId": "c8b880270bd851bdb5cabec61be829642a448a79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}