{
  "comments": [
    {
      "key": {
        "uuid": "2f022ece_c85da1b8",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-24T15:16:56Z",
      "side": 1,
      "message": "Maybe this function can be moved into create CPUSensor function and return struct/tuple that include objectPathPrefix and min/max and pass to CPUSensor constructor separately.",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 55,
        "endChar": 1
      },
      "revId": "185b167631e3a8af38ed4a3dd9fad9865ee5ee70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e044038b_fef800a2",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-25T03:16:51Z",
      "side": 1,
      "message": "Nobody was happy with CPUSensor, so I took your suggestion and refactored it. I was wanting to avoid having to change the *SensorMain files, but for CPUSensorMain, I made an exception. It\u0027s a good cleanup. The decision was already made in the CPUSensorMain sensor building loop, so it doesn\u0027t need to be done redundantly in the CPUSensor constructor.\n\nIt\u0027s only a binary decision, so a bool is fine, to pass in the decision that was made.",
      "parentUuid": "2f022ece_c85da1b8",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 55,
        "endChar": 1
      },
      "revId": "185b167631e3a8af38ed4a3dd9fad9865ee5ee70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e6276ab_ddecb3df",
        "filename": "src/SensorPaths.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-23T16:16:43Z",
      "side": 1,
      "message": "This needs to go above the free.  If we get a return code, we shouldn\u0027t be freeing the string.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 76,
        "endChar": 5
      },
      "revId": "185b167631e3a8af38ed4a3dd9fad9865ee5ee70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d39b4725_473da105",
        "filename": "src/SensorPaths.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-23T22:59:50Z",
      "side": 1,
      "message": "If the string is allocated, shouldn\u0027t we be freeing it, in all cases, since we now own it, according to the manpage? Otherwise, we would have a memory leak. It\u0027s unlikely there would be a successful allocation *and* an error code return, but I put this in, just in case. It\u0027s the safest approach against a memory leak if there\u0027s an error return.\n\nhttps://www.freedesktop.org/software/systemd/man/sd_bus_path_encode.html",
      "parentUuid": "4e6276ab_ddecb3df",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 76,
        "endChar": 5
      },
      "revId": "185b167631e3a8af38ed4a3dd9fad9865ee5ee70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7644396_b0dd95af",
        "filename": "src/SensorPaths.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-03-24T00:21:24Z",
      "side": 1,
      "message": "The typical C style pattern is to only return a value to the argument input if the function returns succeess. https://github.com/systemd/systemd/blob/63dc82d378e1cfda8f560e8da9aa2df549c2b026/src/libsystemd/sd-bus/sd-bus.c#L3982\n\nSo you don\u0027t free it if there is an error.",
      "parentUuid": "d39b4725_473da105",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 76,
        "endChar": 5
      },
      "revId": "185b167631e3a8af38ed4a3dd9fad9865ee5ee70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ade077fc_776ef4c0",
        "filename": "src/SensorPaths.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-25T03:16:51Z",
      "side": 1,
      "message": "OK, I\u0027ll move it up, so the string is not freed upon error. This seems more unsafe to me, though, but I\u0027m outnumbered here, and this is a minor issue anyway. However, I\u0027m curious why this is done? Wouldn\u0027t it be better to free it in all cases where it\u0027s allocated then handed back to you?",
      "parentUuid": "b7644396_b0dd95af",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 76,
        "endChar": 5
      },
      "revId": "185b167631e3a8af38ed4a3dd9fad9865ee5ee70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7206ae51_43ab8a09",
        "filename": "src/SensorPaths.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-03-25T03:25:54Z",
      "side": 1,
      "message": "You could if you initialize to nullptr, but why do that when the calling convention is well defined / understood? This isn\u0027t something systemd is going to silently change on anyone and is very typical for c code. You would just be always running an extra check for no reason, not that the check is particularly expensive (thought free would technically have to hop through the PLT).",
      "parentUuid": "ade077fc_776ef4c0",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 76,
        "endChar": 5
      },
      "revId": "185b167631e3a8af38ed4a3dd9fad9865ee5ee70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3dacb7f_f63b2a1e",
        "filename": "src/SensorPaths.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-03-25T03:27:09Z",
      "side": 1,
      "message": "It also makes it clear to anyone who is unfamiliar that you don\u0027t need to free the result on error conditions.",
      "parentUuid": "7206ae51_43ab8a09",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 76,
        "endChar": 5
      },
      "revId": "185b167631e3a8af38ed4a3dd9fad9865ee5ee70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1a32895_b008f567",
        "filename": "src/SensorPaths.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-25T20:04:11Z",
      "side": 1,
      "message": "OK, subtle, but makes sense. I always initialize output parameters to nullptr first, to catch cases where the function returns but fails to put anything into the output parameters.",
      "parentUuid": "e3dacb7f_f63b2a1e",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 76,
        "endChar": 5
      },
      "revId": "185b167631e3a8af38ed4a3dd9fad9865ee5ee70",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}