{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b670ff93_d5d0cc38",
        "filename": "src/adc/ADCSensorMain.cpp",
        "patchSetId": 4
      },
      "lineNbr": 318,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-10-21T17:53:23Z",
      "side": 0,
      "message": "io_context is always global to an application.  It should not be owned by a single reactor class.",
      "range": {
        "startLine": 318,
        "startChar": 0,
        "endLine": 318,
        "endChar": 31
      },
      "revId": "3a3ebd1c6a7a3824444e40c3e6c3f074edf29002",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1c41b4d_6560f6b1",
        "filename": "src/adc/ADCSensorMain.cpp",
        "patchSetId": 4
      },
      "lineNbr": 318,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-10-21T18:30:24Z",
      "side": 0,
      "message": "Conceptually you are right about this but the goal of `class Reactor` is to have a common code, avoiding code duplication.\n\nIt\u0027s possible to inherit from `Reactor` and then the application class will own it.\n\nFor example one could make `class ADCSensorManager` to inherit from `Reactor`\nand then the application specific class could have a bunch of extra members vars for anything that\u0027s specific to that application.\n\nBy having a common code we can avoid subtle bugs arising due to different order of initialization and code drift.\n\nFrom my perspective this practical concern outweighs a conceptual concern, but to each their own.",
      "parentUuid": "b670ff93_d5d0cc38",
      "range": {
        "startLine": 318,
        "startChar": 0,
        "endLine": 318,
        "endChar": 31
      },
      "revId": "3a3ebd1c6a7a3824444e40c3e6c3f074edf29002",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}