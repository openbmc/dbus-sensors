{
  "comments": [
    {
      "key": {
        "uuid": "d4e2f62e_6acf1d0e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 7,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-11-29T08:01:48Z",
      "side": 1,
      "message": "sensor",
      "range": {
        "startLine": 7,
        "startChar": 49,
        "endLine": 7,
        "endChar": 54
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f766fcb_849793c3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 7,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-11-30T04:36:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4e2f62e_6acf1d0e",
      "range": {
        "startLine": 7,
        "startChar": 49,
        "endLine": 7,
        "endChar": 54
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38005173_5dfbd953",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-11-29T08:01:48Z",
      "side": 1,
      "message": "why not to use C++ version? (gpiod.hpp)\nYou can refer e.g. x86-power-control as an example.",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 18
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e888bba3_5491dec1",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-11-30T04:36:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38005173_5dfbd953",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 18
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87eed47d_3ec566c0",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 14,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-11-29T08:01:48Z",
      "side": 1,
      "message": "I prefer to do this once on initialization and then keep presence line used by the service.",
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d8d9765_665682db",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 14,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-11-29T18:58:31Z",
      "side": 1,
      "message": "+1 on this preference.\nAcquiring and releasing the line repeatedly could lead to some infuriating bugs later on.\n\nExample:\nAnother service or script needs to acquire this line and we end up with intermittent failures. Then you go to debug the problem with gpioinfo /gpiofind and most of the time you see that the line isn\u0027t reserved.\n\nBy reserving this line for the lifetime of the service these types of bugs are much easier to hunt down and characterize.",
      "parentUuid": "87eed47d_3ec566c0",
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d79b79b7_61251f3e",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 14,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-11-30T04:36:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d8d9765_665682db",
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "add13db5_ecaf2124",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 60,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-11-29T08:01:48Z",
      "side": 1,
      "message": "Are you sure, we should manage LEDs from the daemon? The generic way to handle this is to define rules in led-manager, why do you need to move this functionality here?",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "620e877a_73d5c0cc",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 60,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-11-29T17:56:40Z",
      "side": 1,
      "message": "Do you have a better example of how to setup rules?\nFrom what I have read from phosphor-led-manager, I thought I need to setup the led-groups in phosphor-led-manager and set the dbus property to assert/deassert the led-group.",
      "parentUuid": "add13db5_ecaf2124",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53ea9cfc_2bb30fa8",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 60,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-11-29T18:58:31Z",
      "side": 1,
      "message": "If we\u0027re talking about the `operational-status-monitor` then that service, as is, doesn\u0027t seem to work for us. We\u0027re still controlling LED groups via phosphor-led-manager here but we\u0027re explicitly triggering an assert condition via a dbus-method call vs having phosphor-led-manager react to a properties change.\n\nFew reasons I see as to why we can\u0027t transfer even more control to phosphor-led-manager without significant changes to that repo. Chu, please feel free to correct me if I get any of these wrong.\n\n(1) Fairly certain we don\u0027t use `xyz.openbmc_project.Inventory.Manager` and instead we use EM to manager inventories for us. Chu\u0027s approach removes the dependency on Inventory manager at the cost of extra dbus calls.\n(2) We\u0027re trying to detect the absence of a cable here and the monitor looks like it\u0027s keying off \"OperationalStatus\" instead.\n\nMaybe we can save this as a future enhancement? \nThe only rationale I can see behind adding more logic to phosphor-led-manager is to make sure LEDs continue to blink correctly even if phosphor-led-manager is restarted for whatever reason. (This service only calls the dbus-method LED assert on state change).",
      "parentUuid": "620e877a_73d5c0cc",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18f5278d_b3344bd9",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 60,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-11-30T04:36:22Z",
      "side": 1,
      "message": "Thanks Jason for the explanation.",
      "parentUuid": "53ea9cfc_2bb30fa8",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ccff63c4_3cfa37ab",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 60,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-11-30T07:16:49Z",
      "side": 1,
      "message": "(1) Can\u0027t get, why do you refer to PIM? We currently don\u0027t use PIM either, but AFAIK LED manager do nothing with PIM.\n(2) Sorry, can you explain more? Can\u0027t see what\u0027s wrong here. The \u0027GPIOPresence\u0027 service changes OperationalStatus anyway, so dbus event would be sent anyway. Then you can trigger led manager by matching this event using either PIM itself or phosphor-dbus-monitor. The only problem I can see it in static nature of this tools - both require compile-time YAML configurations. Is it real problem for you?\n\nI really don\u0027t like to see unrelated functionality here. Same as for beeper in PSU manager (https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/45649): if I want to blowup my server on presence loss, should I also hardcode call to \"self-desctruction-manager\" here?",
      "parentUuid": "18f5278d_b3344bd9",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9008a7c0_fd2ed98c",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 60,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-11-30T18:11:26Z",
      "side": 1,
      "message": "Let me study a little more about operational-status-monitor",
      "parentUuid": "ccff63c4_3cfa37ab",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "821f8cf6_dcdd6a7a",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 60,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-11-30T18:29:28Z",
      "side": 1,
      "message": "It looks like operational-status-monitor only processes messages from inventory-manager. See here, https://github.com/openbmc/phosphor-led-manager/blob/master/fault-monitor/operational-status-monitor.hpp#L47. Would explain a little bit more on how should we make it work with a new service other than xyz.openbmc_project.Inventory.Manager?\n\nIn addition, per code review, we are using `xyz.openbmc_project.Inventory.Item.Present` instaed of `xyz.openbmc_project.State.Decorator.OperationalStatus`.",
      "parentUuid": "9008a7c0_fd2ed98c",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c05f46b_ba5f4433",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 60,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-12-03T23:38:45Z",
      "side": 1,
      "message": "Thoughts Andrei?\n\nShould we be extending phosphor-led-control to support keying off present\u003dfalse and drop this code from review in the interim?",
      "parentUuid": "821f8cf6_dcdd6a7a",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8aa76a35_f40a1360",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 60,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-12-06T08:13:36Z",
      "side": 1,
      "message": "Sorry, for long answer.\nI took a look how is it implemented in our setup: we use phosphor-dbus-monitor to catch the events and change LED mode, you can grep openbmc repo by \"inherit phosphor-dbus-monitor\" to find exampled, but looks like it is not a common way to control LEDs by this mechanism, so now I not sure, what to do here.",
      "parentUuid": "0c05f46b_ba5f4433",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 60,
        "endChar": 1
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e722617_9ce19685",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 93,
      "author": {
        "id": 1000879
      },
      "writtenOn": "2021-11-29T08:01:48Z",
      "side": 1,
      "message": "What is this for? Looks like it do nothing.",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 93,
        "endChar": 1
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f857466_6c23115c",
        "filename": "src/GPIOPresenceSensor.cpp",
        "patchSetId": 26
      },
      "lineNbr": 93,
      "author": {
        "id": 1000952
      },
      "writtenOn": "2021-11-30T04:36:22Z",
      "side": 1,
      "message": "Removed",
      "parentUuid": "7e722617_9ce19685",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 93,
        "endChar": 1
      },
      "revId": "fe577aaabc1f67cc57ad08a38e793a14a785032d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}