{
  "comments": [
    {
      "key": {
        "uuid": "599f3fa7_1c7e69bb",
        "filename": "src/FanMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 375,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-07-30T17:25:16Z",
      "side": 1,
      "message": "This shouldn\u0027t be coming from the configuration.....   this sensor is always implicitly settable, right?",
      "range": {
        "startLine": 375,
        "startChar": 0,
        "endLine": 375,
        "endChar": 77
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e630d419_77e1be1d",
        "filename": "src/FanMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 375,
      "author": {
        "id": 1000632
      },
      "writtenOn": "2021-07-31T00:50:28Z",
      "side": 1,
      "message": "That is the previous downstream implementation. IIUC, all sensors are settable through d-bus. This is to follow the the phopshor-host-impid fashion, which checks the mutability of sensor before overwriting the value. \n\nAre there any concerns if we expose all PWM sensors as mutable sensors to IPMI?",
      "parentUuid": "599f3fa7_1c7e69bb",
      "range": {
        "startLine": 375,
        "startChar": 0,
        "endLine": 375,
        "endChar": 77
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53c6c61c_71da3a06",
        "filename": "src/FanMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 375,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-07-31T02:21:43Z",
      "side": 1,
      "message": "It should come from the configuration. For security, all sensors are read-only, to preserve the previous existing behavior. I believe it would be best to have mutability be on an opt-in basis: the person writing the BMC configuration files must opt into this behavior, if they want their sensors to be writable.\n\nAs for defaulting certain classes of sensors to always be read-write instead of read-only, this should be done for ExternalSensor (because that\u0027s the main purpose of ExternalSensor). Doing it for the fan PWM sensor is up to the system designer: do they want their fans to be externally settable, or not? Note that it\u0027s also important to include fan auto/manual mode selection, if so, because otherwise, if they try to write the PWM while in auto mode, the PID loop will just overwrite their settings about a second later.",
      "parentUuid": "e630d419_77e1be1d",
      "range": {
        "startLine": 375,
        "startChar": 0,
        "endLine": 375,
        "endChar": 77
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e38b6cc_0f369493",
        "filename": "src/FanMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 375,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-07-31T17:00:42Z",
      "side": 1,
      "message": "\"This is to follow the the phopshor-host-impid fashion, which checks the mutability of sensor before overwriting the value. \"\n\nThis seems really inefficient for something that we are going to be doing multiple times a second for host sensors.  I expected (and what was talked about a while ago, which quanta implemented) was for dbus-sensors to enforce the read-writeability of sensors, and this flag was only to drive the writable bit in the SDR, although you do bring up the corner case..... hmmm, this probably needs thought.\n\n\n\"Are there any concerns if we expose all PWM sensors as mutable sensors to IPMI?\"\nSo long as we\u0027re checking either a compile time option, or the \"is in manufacturing mode\" state, I don\u0027t think there\u0027s a concern, but I\u0027m open to other opinions there.\n\n\" For security, all sensors are read-only, to preserve the previous existing behavior\"\n\nPrevious behavior was that sensors were read only unless in manufacturing mode.  We\u0027ll need to account for that in the mutability flag.\n\n\"I believe it would be best to have mutability be on an opt-in basis: the person writing the BMC configuration files must opt into this behavior, if they want their sensors to be writable.\"\n\nI think I agree with what you said, but in a different way than you were thinking.  A \"writable from IPMI\" sensor is a different class of sensor than a \"only internally writable\" sensor.  Maybe they share a lot of the backend code, but they are fundamentally a different type.\n\n\n\"Doing it for the fan PWM sensor is up to the system designer: do they want their fans to be externally settable, or not?\"\nThis imposes a serious security concern, because writable-from-the-host PWM sensors have thermal consequences.  I would really prefer that this just not be allowed outside of manufacturing mode.\n\n\n\"Note that it\u0027s also important to include fan auto/manual mode selection, if so, because otherwise, if they try to write the PWM while in auto mode, the PID loop will just overwrite their settings about a second later.\"\nThis is already handled in Redfish, IPMI just doesn\u0027t have the code to deal with this use case yet.",
      "parentUuid": "53c6c61c_71da3a06",
      "range": {
        "startLine": 375,
        "startChar": 0,
        "endLine": 375,
        "endChar": 77
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88ab83f3_a5b5464c",
        "filename": "src/FanMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 375,
      "author": {
        "id": 1000632
      },
      "writtenOn": "2021-08-03T07:26:46Z",
      "side": 1,
      "message": "\"This seems really inefficient for something that we are going to be doing multiple times a second for host sensors.  I expected (and what was talked about a while ago, which quanta implemented) was for dbus-sensors to enforce the read-writeability of sensors, and this flag was only to drive the writable bit in the SDR, although you do bring up the corner case..... hmmm, this probably needs thought.\"\n\nI double check the downstream code. As you expected, this flag is only for the writable bit in the SDR. https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/45407\n\n\"So long as we\u0027re checking either a compile time option, or the \"is in manufacturing mode\" state, I don\u0027t think there\u0027s a concern, but I\u0027m open to other opinions there\"\n\nI think the mutability is case by case depending on sensors, that is why we can not determine it at compile time and why Josh would like hardcoded it in the entity config and phosphor-host-ipmid requires to hardcode it in a YAML file. Checking manufacturing mode is an intel-ipmi-oem feature?\n\n\n\"Previous behavior was that sensors were read only unless in manufacturing mode.  We\u0027ll need to account for that in the mutability flag\"\n\nmutability is a dbus interface shows if a sensor value is settable in prod environment. (only external sensors and pwn sensors are settable in prod and will have this interface).\n\n\"I think I agree with what you said, but in a different way than you were thinking.  A \"writable from IPMI\" sensor is a different class of sensor than a \"only internally writable\" sensor.  Maybe they share a lot of the backend code, but they are fundamentally a different type.\"\n\nLooking through the code only internally writable sensor can be overwritten in manufacturing mode. But from mutability viewpoint, it is always not writable through IPMI. IPMI checks if a mutability interface exist and then checks the boolean.\n\n\n\"Note that it\u0027s also important to include fan auto/manual mode selection, if so, because otherwise, if they try to write the PWM while in auto mode, the PID loop will just overwrite their settings about a second later.\"\n\u003e This is already handled in Redfish, IPMI just doesn\u0027t have the code to deal with this use case yet.\"\n\nIn order to move forward, 1. all pwm sensor are brutally settable now. I did not see any settable flag and manufacturing check present in Pwmsensor. 2. I do not have many contexts in pid loop. Sounds like fan manual mode will only be enable when sensor mutability is true. Question is is it safe to set all PWM sensors mutability true?",
      "parentUuid": "5e38b6cc_0f369493",
      "range": {
        "startLine": 375,
        "startChar": 0,
        "endLine": 375,
        "endChar": 77
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c23f735_e99ebf14",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-07-30T17:25:16Z",
      "side": 1,
      "message": "Aren\u0027t PSU pwm sensors settable?",
      "range": {
        "startLine": 246,
        "startChar": 71,
        "endLine": 246,
        "endChar": 76
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3a39681_0f9965be",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000632
      },
      "writtenOn": "2021-07-31T00:50:28Z",
      "side": 1,
      "message": "the original downstream implementation does this way. All sensor mutability is false at default except external sensors. The sensor mutability is configured through entity config.\n\nJosh, any comments? Are we safe to set all PWM mutability with true?",
      "parentUuid": "6c23f735_e99ebf14",
      "range": {
        "startLine": 246,
        "startChar": 71,
        "endLine": 246,
        "endChar": 76
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70632c18_0ca899e8",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-07-31T02:21:43Z",
      "side": 1,
      "message": "See my comments around FanSensor. I\u0027m honestly unsure why PSUSensor was expanded to also include PWM support here, that seems to be more the domain of FanSensor, I would think. Maybe it\u0027s because power supplies contain fans in them.\n\nIt\u0027s acceptable to default all PWM mutability to true instead of false, if we want to have a special case to encourage this behavior. It seems easiest just to rely on the system configuration, setting Mutable to True, for the desired PWM sensors that the system designer wishes to have externally settable by the user.",
      "parentUuid": "e3a39681_0f9965be",
      "range": {
        "startLine": 246,
        "startChar": 71,
        "endLine": 246,
        "endChar": 76
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d7a6425_0fcee8eb",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1000632
      },
      "writtenOn": "2021-08-03T07:31:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70632c18_0ca899e8",
      "range": {
        "startLine": 246,
        "startChar": 71,
        "endLine": 246,
        "endChar": 76
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74cbad72_e8f50cd8",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-07-30T17:25:16Z",
      "side": 1,
      "message": "Please avoid duplicating this string with line 41",
      "range": {
        "startLine": 154,
        "startChar": 22,
        "endLine": 154,
        "endChar": 69
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30a723ab_93de80b4",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1000632
      },
      "writtenOn": "2021-07-31T00:50:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74cbad72_e8f50cd8",
      "range": {
        "startLine": 154,
        "startChar": 22,
        "endLine": 154,
        "endChar": 69
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a50895e1_41b9ffbd",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-07-31T02:21:43Z",
      "side": 1,
      "message": "Good catch. In general, dbus-sensors is full of repeated string constants, which we should try to refactor out as we make changes over time.",
      "parentUuid": "30a723ab_93de80b4",
      "range": {
        "startLine": 154,
        "startChar": 22,
        "endLine": 154,
        "endChar": 69
      },
      "revId": "c6b2cc77633d472374321cb33fd121c87e7ef86a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}