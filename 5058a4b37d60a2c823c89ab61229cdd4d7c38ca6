{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b112ad9a_ecb5588c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-12-05T03:32:36Z",
      "side": 1,
      "message": "Hi Jonico, thanks for the change in approach. I prefer this direction ðŸ˜Š However, I do have some queries and thoughts in-line.\n\nFurther, given these new classes a fairly self-contained, can you please add some test cases?",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46314a66_3771d83c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-03-17T18:52:16Z",
      "side": 1,
      "message": "I added some test cases",
      "parentUuid": "b112ad9a_ecb5588c",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9705581_c8fa2b89",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-12-05T03:32:36Z",
      "side": 1,
      "message": "I prefer we mark this as `explicit`.",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63e669ee_16b344f1",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-03-17T18:52:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9705581_c8fa2b89",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cdbb29c_59a227c3",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-12-05T03:32:36Z",
      "side": 1,
      "message": "What\u0027s the motivation for the ordering operators? If they\u0027re required, can you please add source a comment describing why?",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 75,
        "endChar": 5
      },
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e8221c4_1ed537e7",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-01-02T20:49:55Z",
      "side": 1,
      "message": "They will be removed as they are found unnecessary",
      "parentUuid": "5cdbb29c_59a227c3",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 75,
        "endChar": 5
      },
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2a8d3c1_b1e303e3",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-03-17T18:52:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e8221c4_1ed537e7",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 75,
        "endChar": 5
      },
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12895e7a_db59d08f",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-12-05T03:32:36Z",
      "side": 1,
      "message": "What\u0027s the motivation for a setter? My preference is that the instances are immutable.",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83def668_7327652c",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-01-02T20:49:55Z",
      "side": 1,
      "message": "Although I would also prefer that it is immutable, the motivation for a setter is an issue of scope. I need to set the I2CBus value differently based on whether we are using the \"Bus\" or \"MuxChannel\" to configure it in EM. Afterwards I2CBus is used to create the sensor (see https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75503 for context/examples).\nCurrently, it is set up as the following:\n\n```\n...\nI2CBus bus;\n...\n\nif (\"Bus\" keyword used)\n{\n    bus.setBus(busNumber)\n}\nelse if (\"MuxChannel\" interface used)\n{\n    ...\n    bus \u003d mux.getLogicalBus(channelName)\n    ...\n}\n\nXSensor(bus, addr, ...)\n```",
      "parentUuid": "12895e7a_db59d08f",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62dd6159_7a619c35",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-08T05:54:01Z",
      "side": 1,
      "message": "Isn\u0027t that rather a matter of only instantiating a I2CBus instance if the `Bus` keyword is used?\n\n```\nif (\"Bus\" keyword used)\n{\n    bus \u003d I2CBus(... busNumber ...);\n}\nelse if (\"MuxChannel\" interface used)\n{\n    ...\n    bus \u003d mux.getLogicalBus(channelName);\n    ...\n}\n```",
      "parentUuid": "83def668_7327652c",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a19922fc_d338b48a",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-03-17T18:52:16Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "62dd6159_7a619c35",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c27d9b7_49c7c5c3",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-12-05T03:32:36Z",
      "side": 1,
      "message": "`explicit` again here?",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7677f9c_b562682b",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-03-17T18:52:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c27d9b7_49c7c5c3",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "791547b4_8a6bf04c",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-12-05T03:32:36Z",
      "side": 1,
      "message": "I think `std::runtime_error` might be a bit too big a hammer here. Maybe `std::logic_error()`? Feels like an easy one to trip over though, because it\u0027s entirely determined by the conformance of the published EM config to the mux schema. Possibly a custom exception is better, or a public static function that tests the preconditions and returns a `std::optional\u003cI2CMux\u003e` which is only populated if the preconditions are met?",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d35703b9_dc48883a",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 99,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-03-17T18:52:16Z",
      "side": 1,
      "message": "Created findMux static member function to test preconditions",
      "parentUuid": "791547b4_8a6bf04c",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8555ad90_95f018fd",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-12-05T03:32:36Z",
      "side": 1,
      "message": "Also, unconditionally prepending this absolute path prefix might make testing tricky. It might be better to store the mux name extracted from the config map and append a (configurable) prefix as necessary.",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4b71a5d_b62f8935",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-12-05T03:32:36Z",
      "side": 1,
      "message": "Can you add a source comment (with relevant links) about how `/dev/i2c-mux` is populated?",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29522163_5c488562",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-01-02T20:49:55Z",
      "side": 1,
      "message": "In EM, the linkMux function creates the /dev/i2c-mux directory and creates the symlinks between the channelNames in that directory with the /dev/i2c-#\nhttps://github.com/openbmc/entity-manager/blob/849f13ab73fb85a6b8b002bc16414b67562f3513/src/overlay.cpp#L71",
      "parentUuid": "f4b71a5d_b62f8935",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a4582c9_9d4e0943",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-08T05:54:01Z",
      "side": 1,
      "message": "I was asking that the comment be added in the code.",
      "parentUuid": "29522163_5c488562",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e65ee643_152cb887",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-03-17T18:52:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a4582c9_9d4e0943",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ad0c680_211d204b",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-03-17T18:52:16Z",
      "side": 1,
      "message": "Made a prefix configurable from the constructor",
      "parentUuid": "8555ad90_95f018fd",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b21a4b8e_11286cd2",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-12-05T03:32:36Z",
      "side": 1,
      "message": "Again, I think a `std::runtime_error` here might be a bit strong. What do you think of changing the return type to `std::optional\u003cI2CBus\u003e`?",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "388f35ab_8c4d108c",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-03-17T18:52:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b21a4b8e_11286cd2",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "035b63eb_80eec9b7",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-12-05T03:32:36Z",
      "side": 1,
      "message": "The stripping of an absolute path prefix is going to make this awkward to test. If you instead parse the basename of the path then you\u0027ll have an easier time testing it.",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0127e262_e94a35b8",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-03-17T18:53:52Z",
      "side": 1,
      "message": "Now looks for \"i2c-\"",
      "parentUuid": "035b63eb_80eec9b7",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f74e028_06546e2d",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-03-17T18:53:52Z",
      "side": 1,
      "message": "Now looks for \"i2c-\"",
      "parentUuid": "035b63eb_80eec9b7",
      "revId": "5058a4b37d60a2c823c89ab61229cdd4d7c38ca6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}