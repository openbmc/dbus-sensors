{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "76d319d1_2a94f01f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 10,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-08-27T22:09:00Z",
      "side": 1,
      "message": "You only need to resolve the CableDisconnected when Cable gets connected on that port. There is no resolution for CableConnected.",
      "revId": "b07d0bdf19715a72ad43ba33e304ef13bc8b3b05",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b9d7118_16e5763e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 12,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-08-27T22:09:00Z",
      "side": 1,
      "message": "What do you mean by \"CableConnected log that was not emitted\"?\n\nAt the beginning we don\u0027t send CableConnected logs if the cable are already connected. They are only sent in response to resolution for CableDisconnected errors.",
      "revId": "b07d0bdf19715a72ad43ba33e304ef13bc8b3b05",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c4e3a9e_aaab72cf",
        "filename": "src/cable-monitor/CableEvents.cpp",
        "patchSetId": 17
      },
      "lineNbr": 26,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-08-21T16:40:01Z",
      "side": 1,
      "message": "Is it possible that we try to `generateCableEvent` for the same `type` twice in a row?  I guess that\u0027s probably not possible right now, but the way the code is currently written we could end up resolving a `disconnected` event while also trying to create a new one.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 26,
        "endChar": 5
      },
      "revId": "b07d0bdf19715a72ad43ba33e304ef13bc8b3b05",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "092bc609_a2f820f4",
        "filename": "src/cable-monitor/CableEvents.cpp",
        "patchSetId": 17
      },
      "lineNbr": 26,
      "author": {
        "id": 1002520
      },
      "writtenOn": "2025-08-22T00:49:54Z",
      "side": 1,
      "message": "I think the GPIO controller must detect the level change and then trigger an IRQ to inform the BMC of the edge event.\nI guess you just mentioned the bouncing case. This could happen when the cable has a poor connection. If thereâ€™s a double trigger in a short period, we should check the cable.",
      "parentUuid": "4c4e3a9e_aaab72cf",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 26,
        "endChar": 5
      },
      "revId": "b07d0bdf19715a72ad43ba33e304ef13bc8b3b05",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4769a23_37e283be",
        "filename": "src/cable-monitor/CableEvents.cpp",
        "patchSetId": 17
      },
      "lineNbr": 36,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-08-27T22:09:00Z",
      "side": 1,
      "message": "Connected is a positive acknowledgement and an event (not error), so you don\u0027t need to resolve it.\n\nDisconnected is an error which will be resolved by Connected event.\n\nThats the reason we don\u0027t mark the connected as Pending. The current implemented logic is correct based on the event definition in https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/State/Cable.events.yaml",
      "revId": "b07d0bdf19715a72ad43ba33e304ef13bc8b3b05",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}