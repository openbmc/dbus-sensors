{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5a7f26ca_70d53082",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-06-25T18:59:40Z",
      "side": 1,
      "message": "What firmware is being updated and why sensor polling need to be disabled? Is this expected to be controlled on a per sensor bases? There are different ways to stop the polling. I like to understand the requirement/use case better.",
      "range": {
        "startLine": 9,
        "startChar": 54,
        "endLine": 10,
        "endChar": 7
      },
      "revId": "fd0cbaa1a795af6be1615d0e142b2d131df0e1bb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9711400_f39ad1a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2024-06-26T07:41:56Z",
      "side": 1,
      "message": "\u003e Zhikui Ren: There are different ways to stop the polling\n\nIs there a existing mechanism to stop polling the sensors managed by `HwmonTempSensor`? If so, could you please provide some related links? Thanks!\n\n**Problem Explanation**:\nWe need to conduct OOB NIC firmware update on a multi-host system via PLDM/MCTP/I2C, there are 4 NICs on the system, since lack of I2C bus, we forced to have an I2C mux between the BMC and the 4 NICs.\n\nDuring PLDM firmware update, the NIC will ask for firmware image from the BMC, which will trigger the mechanism of I2C multi-master. However, only the BMC can use the I2C mux driver to switch the mux, if there is any traffic from the other NICs cause the mux is switched during a firmware update, the updating NIC would loss the connection to the BMC.\n\nPlus, we have a remote temperature sensor on each NIC and read by `HwmonTempSensor`, the service constantly polling the sensors, which would cause the mux being switch, as a result, we need a mechanism to stop polling the NIC\u0027s sensors and keep the `HwmonTempSensor` architecture clean.",
      "parentUuid": "5a7f26ca_70d53082",
      "range": {
        "startLine": 9,
        "startChar": 54,
        "endLine": 10,
        "endChar": 7
      },
      "revId": "fd0cbaa1a795af6be1615d0e142b2d131df0e1bb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe0d5ec9_43981aef",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-26T08:28:24Z",
      "side": 1,
      "message": "\u003e I like to understand the requirement/use case better.\n\n+1\n\n\u003e  the updating NIC would loss the connection to the BMC.\n\nThis sounds like a missing lock in your MCTP implementation.  If mctp is waiting for a reply, I\u0027d expect it to keep the mux locked during that time so that the device can reply.",
      "parentUuid": "e9711400_f39ad1a5",
      "range": {
        "startLine": 9,
        "startChar": 54,
        "endLine": 10,
        "endChar": 7
      },
      "revId": "fd0cbaa1a795af6be1615d0e142b2d131df0e1bb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb15d3e0_6ab6bfd7",
        "filename": "src/HwmonTempSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-25T00:06:33Z",
      "side": 1,
      "message": "We can do `[weakRef{weak_from_this()}]` here and avoid declaring the local variable.",
      "range": {
        "startLine": 144,
        "startChar": 13,
        "endLine": 144,
        "endChar": 20
      },
      "revId": "fd0cbaa1a795af6be1615d0e142b2d131df0e1bb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88e0907e_e1b56c15",
        "filename": "src/HwmonTempSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2024-06-26T07:41:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb15d3e0_6ab6bfd7",
      "range": {
        "startLine": 144,
        "startChar": 13,
        "endLine": 144,
        "endChar": 20
      },
      "revId": "fd0cbaa1a795af6be1615d0e142b2d131df0e1bb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17bea37b_4958fcd8",
        "filename": "src/HwmonTempSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 150,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-25T00:06:33Z",
      "side": 1,
      "message": "I think this might be nicer:\n\n```\nif (auto self \u003d weakRef.lock())\n{\n    ...\n}\n```",
      "range": {
        "startLine": 146,
        "startChar": 12,
        "endLine": 150,
        "endChar": 13
      },
      "revId": "fd0cbaa1a795af6be1615d0e142b2d131df0e1bb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc82810e_fe3acc94",
        "filename": "src/HwmonTempSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 150,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2024-06-26T07:41:56Z",
      "side": 1,
      "message": "Done, thanks for the suggestion.",
      "parentUuid": "17bea37b_4958fcd8",
      "range": {
        "startLine": 146,
        "startChar": 12,
        "endLine": 150,
        "endChar": 13
      },
      "revId": "fd0cbaa1a795af6be1615d0e142b2d131df0e1bb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}