{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6e76d459_a72de81e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-02-05T05:20:48Z",
      "side": 1,
      "message": "I\u0027d prefer the lambda be fixed, and would like a follow-up patch to clean up the signal match.",
      "revId": "2a1ebb116bb8371c4cbc3a4c4557dee67378b199",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16de32c4_1efd36b6",
        "filename": "src/Utils.cpp",
        "patchSetId": 6
      },
      "lineNbr": 370,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-02-05T05:20:48Z",
      "side": 1,
      "message": "I realise that it\u0027s the norm in dbus-sensors to just hack the signal constraints together, but can we instead make use of the helpers in `sdbusplus::bus::match::rules`?\n\nThis could be `sdbusplus::bus::match::rules::propertiesChanged(path, post::interface)`\n\nThough I\u0027ve also just realised that you\u0027ve moved the existing code, so ... I dunno. I\u0027d prefer you don\u0027t _change_ it in this patch as that makes code motion harder to comprehend. But a follow-up patch would be nice.",
      "range": {
        "startLine": 369,
        "startChar": 0,
        "endLine": 370,
        "endChar": 80
      },
      "revId": "2a1ebb116bb8371c4cbc3a4c4557dee67378b199",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a45c80b9_8bc47de5",
        "filename": "src/Utils.cpp",
        "patchSetId": 6
      },
      "lineNbr": 370,
      "author": {
        "id": 1001264
      },
      "writtenOn": "2024-02-07T02:16:42Z",
      "side": 1,
      "message": "Please have a look with the link below for follow-up patch.\nhttps://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/69235",
      "parentUuid": "16de32c4_1efd36b6",
      "range": {
        "startLine": 369,
        "startChar": 0,
        "endLine": 370,
        "endChar": 80
      },
      "revId": "2a1ebb116bb8371c4cbc3a4c4557dee67378b199",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d59d657_0664a345",
        "filename": "src/Utils.cpp",
        "patchSetId": 6
      },
      "lineNbr": 462,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-02-05T05:20:48Z",
      "side": 1,
      "message": "The lambda isn\u0027t monstrous, but we do have an anti-pattern that covers it:\n\nhttps://github.com/openbmc/docs/blob/master/anti-patterns.md#very-long-lambda-callbacks",
      "revId": "2a1ebb116bb8371c4cbc3a4c4557dee67378b199",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14fe48b3_ff3374f2",
        "filename": "src/Utils.cpp",
        "patchSetId": 6
      },
      "lineNbr": 462,
      "author": {
        "id": 1001264
      },
      "writtenOn": "2024-02-07T02:16:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d59d657_0664a345",
      "revId": "2a1ebb116bb8371c4cbc3a4c4557dee67378b199",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fca968b1_681be1fd",
        "filename": "src/Utils.cpp",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-05T14:18:28Z",
      "side": 1,
      "message": "How do you know that the service hosting this has started already?  Previously we hard-coded listening to a particular path, so dependency didn\u0027t matter, but now we\u0027re trying to do a look up in Mapper, which means the interface must already be there.  Right?",
      "range": {
        "startLine": 464,
        "startChar": 38,
        "endLine": 464,
        "endChar": 53
      },
      "revId": "2a1ebb116bb8371c4cbc3a4c4557dee67378b199",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9883291_47b62549",
        "filename": "src/Utils.cpp",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1001264
      },
      "writtenOn": "2024-02-07T02:16:42Z",
      "side": 1,
      "message": "Yes, your are correct. To avoid interface not ready yet, I added 2 times retry (total 20 seconds) in getPostDbusInfo(). If we still can not get busname and objpath at the end, then we use default setting (post::busname \u0026 post::path) to register postMatch.\nPlease let me know if any concerns or enhancement required, thank you.",
      "parentUuid": "fca968b1_681be1fd",
      "range": {
        "startLine": 464,
        "startChar": 38,
        "endLine": 464,
        "endChar": 53
      },
      "revId": "2a1ebb116bb8371c4cbc3a4c4557dee67378b199",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "094d52e6_cfe78006",
        "filename": "src/Utils.cpp",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-02-07T02:32:30Z",
      "side": 1,
      "message": "Hmm, I\u0027m not enamored with that solution ðŸ˜ž",
      "parentUuid": "d9883291_47b62549",
      "range": {
        "startLine": 464,
        "startChar": 38,
        "endLine": 464,
        "endChar": 53
      },
      "revId": "2a1ebb116bb8371c4cbc3a4c4557dee67378b199",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}