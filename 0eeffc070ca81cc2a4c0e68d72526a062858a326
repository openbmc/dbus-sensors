{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2315b028_67b3e766",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-04-26T22:04:16Z",
      "side": 1,
      "message": "Are both 0-based now? It is still not clear to me how we can make ensure the index base is consistent for all providers of this interface",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 25
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b93fe61d_355c12de",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-04-29T08:49:24Z",
      "side": 1,
      "message": "I believe we shall not try to ensure consistent CPU indexing at dbus-sensor level.  As it was clarified in other review intelcpusensor uses indexes from json configurations. Hence I believe consistent CPU indexing shall be ensured at configuration level.\n\nWhat dbus-sensors apps can do is consistently parse Present property by not adding +1 to be compliant with smbios-mdrv2 which hardcodes index from 0.\n\nWith this change CpuID and Name property shall be updated across platform json configs.",
      "parentUuid": "2315b028_67b3e766",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 25
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce5a36f8_665eb803",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-05-06T17:53:58Z",
      "side": 1,
      "message": "Ideally we don\u0027t want break any existing json configs and/or force any future json configs to use 1 base index without a clear documentation. \n\nMy thought was within platform json config, the index needs to be self-consistent, e.g. CPURequired matches the CpuID in the same json file\nhttps://github.com/openbmc/entity-manager/blob/master/configurations/wft_baseboard.json#L1599\n\nAll dbus-sensors services should work correctly whether the system json config uses one based or zero based index. This may mean dbus-sensor services all use intelcpusensor\u0027s present interface, not smbios interface",
      "parentUuid": "b93fe61d_355c12de",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 25
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0372260f_b205cd47",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-05-06T18:50:50Z",
      "side": 1,
      "message": "I believe we are saying the same thing. I was asking to update the comment here to say it is NOT matching smbios-mdrv2, but matching CPU_X, which is created by intelcpusensor and follows the index used in json config. And add JSON config needs to be self consistent.",
      "parentUuid": "b93fe61d_355c12de",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 25
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53d01d0d_f959742f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-07T13:57:13Z",
      "side": 1,
      "message": "For sure having CpuID and CPURequired within single json file would help to prevent indexes mismatches. However there are cases when sensors are defined in separate file than CPU.\n\nDon\u0027t want to drop CPU presence signals from smbios-mdrv2.\nI\u0027m assuming not everybody is using intelcpusensor service.\nIf identified correctly examples of platforms not using intelcpusensor are:\nhttps://github.com/openbmc/entity-manager/blob/master/configurations/mtmitchell_mb.json\nhttps://github.com/openbmc/entity-manager/blob/master/configurations/mtjade.json\nMaybe Thang Tran can help to demystify these platforms.",
      "parentUuid": "0372260f_b205cd47",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 25
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "816f2314_87e40b34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-08T02:52:48Z",
      "side": 1,
      "message": "In the old configuration, we are setting CPU presence via phosphor-multi-gpio-presence, and we configured CPU_1/2, but we updated to cpu0/1. https://github.com/openbmc/openbmc/commit/fda17ca3b11c191946d824623321bef8f820fe71#diff-5fe483251692b94a7b12ab3997ebc92932530f603f598f1a61317d926f28308aR6",
      "parentUuid": "53d01d0d_f959742f",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 25
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8c9d6bd_fbafe8e5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-09T11:16:05Z",
      "side": 1,
      "message": "Thanks for explanation how it works on Ampere platforms.\nI had noticed that with above change phosphor-multi-gpio-presence is exposing CPU objects under the same path as smbios-mdrv2. Shouldn\u0027t objects path be unique to avoid issue with object mapper?\nAFAIK many services won\u0027t iterate over all entries in response from object mapper GetSubTree call and will use first entry, which could be smbios-mdrv2 or phosphor-multi-gpio-presence depending on boot/runtime flow.\nConfiguring phosphor-multi-gpio-presence to expose ...cpu_0 and cpu_1 sound safer to me. What do you think?",
      "parentUuid": "816f2314_87e40b34",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 25
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47a5b758_1666b2ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-05-10T23:46:58Z",
      "side": 1,
      "message": "Thank you for bring in all existing examples. I don\u0027t see an easy and robust fix for all existing and future use cases. A new interface suggested in the other comment seems promising and I agree it is better to save that for a future patch.\nFocusing on the existing bug this patch is trying to fix, what about: 1) make the intelcpusensor also use cpu_0 and cpu_1 (0 based, same as smbios-mdrv2 and  phosphor-multi-gpio-presence) 2)assume CPURequired in json is one based?",
      "parentUuid": "f8c9d6bd_fbafe8e5",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 25
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cd33a05_064a1a57",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-15T15:25:33Z",
      "side": 1,
      "message": "ad 1) intelcpusensor take index from json, so it can be made 0-based by updating configs. Zhikui, do you have different solution in mind, without altering configs? If yes then we would need to firstly check all the sensors\u0027 CpuID (to assess if config is 0 or 1 based) and then expose objects on dbus. Sounds complex.\n\nad 2) there are json configs where CPURequired is 0 based.\n\nSimplest solution would be to update CPURequired and CpuID to be 0-based across all json configs in openbmc/openbmc repo. Being aware it could cause momentary regression though.",
      "parentUuid": "47a5b758_1666b2ff",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 25
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b56425b_8dec81f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-04-29T08:49:24Z",
      "side": 1,
      "message": "Appreciate feedback, added my comments.\n\nNote: will be on vacations this week, can resume work on this review staring ww19.1",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "433ae847_ff5ab624",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-02T04:16:34Z",
      "side": 1,
      "message": "I just have some minor comments for this commit. Please take a look.",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09aa57d1_5f159dc7",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 4
      },
      "lineNbr": 214,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-04-26T22:04:16Z",
      "side": 1,
      "message": "nit: use same style like https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/71090/4/src/DeviceMgmt.hpp#115",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c2e91a7_182e7079",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 4
      },
      "lineNbr": 214,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-04-29T08:49:24Z",
      "side": 1,
      "message": "That would change logic. Current implementation skips sensor creation when:\n1. CPU is not required and createSensors is triggered by CPU presence event.\n2. CPU is required but not present\n\nIf would change condition to be the same as in DeviveMgmt.hpp#115 then sensor creation would be incorrectly skipped when:\n1. CPU is required and present and createSensors is triggered by CPU presence event.",
      "parentUuid": "09aa57d1_5f159dc7",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48faea2a_58d94229",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 4
      },
      "lineNbr": 214,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-05-06T18:50:50Z",
      "side": 1,
      "message": "Got it.\n\nMaybe the following is more clear. I am ok with leave as is\n\n            auto cpuRequired \u003d getCpuRequired(cfg);\n            if ((cpuRequired \u0026\u0026 !isCpuPresent(*cpuRequired)) || \n               (!cpuRequired \u0026\u0026 updateType \u003d\u003d UpdateType::cpuPresenceChange))\n            {\n                continue;\n            }",
      "parentUuid": "6c2e91a7_182e7079",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02e01eeb_c95b7838",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 4
      },
      "lineNbr": 214,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-05-06T18:50:50Z",
      "side": 1,
      "message": "auto cpuRequired \u003d getCpuRequired(cfg);\n            if (cpuRequired \u0026\u0026 !isCpuPresent(*cpuRequired))\n            {\n                continue;\n            }",
      "parentUuid": "6c2e91a7_182e7079",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d9a4a7e_c327fe77",
        "filename": "src/ADCSensorMain.cpp",
        "patchSetId": 4
      },
      "lineNbr": 214,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-07T13:57:13Z",
      "side": 1,
      "message": "ACK, will change as suggested since intention is more readable.",
      "parentUuid": "48faea2a_58d94229",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c68e50a_1ffd745b",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-02T04:16:34Z",
      "side": 1,
      "message": "I saw that you did not modify this variable, Could you update this variable to `const auto\u0026 presenceFind`?",
      "range": {
        "startLine": 343,
        "startChar": 9,
        "endLine": 343,
        "endChar": 21
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06d0639b_d95ca84a",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-06T14:09:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c68e50a_1ffd745b",
      "range": {
        "startLine": 343,
        "startChar": 9,
        "endLine": 343,
        "endChar": 21
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d067a324_18d5e124",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 890,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-02T04:16:34Z",
      "side": 1,
      "message": "Could you update the value of `depth` variable to 0? We can not ensure that all of services create CPU object path as `/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu\u003cIdx\u003e`, they can create /xyz/openbmc_project/inventory/system/chassis/motherboard/**\u003csubpath\u003e**/cpu\u003cidx\u003e",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "093e8e8a_f7b2a9cc",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 890,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-06T14:09:07Z",
      "side": 1,
      "message": "Are you aware of any configuration where it would be required?\nIntentionally used depth \u003d 1 to limit number of matches, it shall work well with smbios-mdrv2 and intelcpusensor.",
      "parentUuid": "d067a324_18d5e124",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e968d049_8261f948",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 890,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-08T02:52:48Z",
      "side": 1,
      "message": "Currently, the phosphor-multi-gpio-presence is supporting to create object paths that detect the Items\u0027s status base on GPIOs. Users can define any the object path, therefore, I think we should set the depth\u003d0 to avoid unexpected issues. Please refer to https://github.com/openbmc/openbmc/commit/fda17ca3b11c191946d824623321bef8f820fe71#diff-5fe483251692b94a7b12ab3997ebc92932530f603f598f1a61317d926f28308aR6 for more information.",
      "parentUuid": "093e8e8a_f7b2a9cc",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9422719c_75a1c975",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 890,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-09T11:16:05Z",
      "side": 1,
      "message": "Will change depth to 0 since with proposed here regex we shall not have issue with decoding CPU index from incorrect objects, as it was done previously.\n\nAnyway I do think that it\u0027s not bullet proof to detect CPU presence based on object name and Present property in xyz.openbmc_project.Inventory.Item interface.\n\nBetter approach would be to add Present property to xyz.openbmc_project.Inventory.Item.Cpu interface which shall be implemented only by CPU objects. Additionally we would match only signals from CPU objects, not from DIMMs, etc. However that would require bigger refactor, also outside this repo.",
      "parentUuid": "e968d049_8261f948",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baffdd43_56d6fd9f",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 915,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-02T04:16:34Z",
      "side": 1,
      "message": "I think you can define those variables to global `static` variables, I saw that they are used in another function.",
      "range": {
        "startLine": 913,
        "startChar": 8,
        "endLine": 915,
        "endChar": 0
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "497cf6cf_ebe1b0db",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 915,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-06T14:09:07Z",
      "side": 1,
      "message": "Made cpuRegex const global to be reused between setupCpuMatchCallback and getPresentCpus functions. I would leave indexMatch local to avoid possible issues of using matches from previous calls.",
      "parentUuid": "baffdd43_56d6fd9f",
      "range": {
        "startLine": 913,
        "startChar": 8,
        "endLine": 915,
        "endChar": 0
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94dce9f2_fd0c0687",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 916,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-02T04:16:34Z",
      "side": 1,
      "message": "I saw that you did not modify this variable, Could you update this variable to `const auto\u0026 obj`?",
      "range": {
        "startLine": 916,
        "startChar": 13,
        "endLine": 916,
        "endChar": 16
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a36f38f_3607631a",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 916,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-06T14:09:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94dce9f2_fd0c0687",
      "range": {
        "startLine": 916,
        "startChar": 13,
        "endLine": 916,
        "endChar": 16
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94cf2fe1_42e3ecb8",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 976,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-02T04:16:34Z",
      "side": 1,
      "message": "I saw that you did not modify this variable, Could you update this variable to `const string\u0026 path`?",
      "range": {
        "startLine": 976,
        "startChar": 20,
        "endLine": 976,
        "endChar": 24
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7367b30c_022b7e63",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 976,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-06T14:09:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94cf2fe1_42e3ecb8",
      "range": {
        "startLine": 976,
        "startChar": 20,
        "endLine": 976,
        "endChar": 24
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5baa74e_aed1464a",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 979,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-02T04:16:34Z",
      "side": 1,
      "message": "Using global `static` variables that I mentioned above.",
      "range": {
        "startLine": 978,
        "startChar": 8,
        "endLine": 979,
        "endChar": 72
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fb0aea9_339f04be",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 985,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-04-26T22:04:16Z",
      "side": 1,
      "message": "This block can be moved to line 995 (after test at line 991)",
      "range": {
        "startLine": 978,
        "startChar": 8,
        "endLine": 985,
        "endChar": 9
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c7ef583_37a46dc4",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 985,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-04-29T08:49:24Z",
      "side": 1,
      "message": "There is a lot of objects at inventory path (/xyz/openbmc_project/inventory/system/chassis/motherboard) implementing xyz.openbmc_project.Inventory.Item interface (e.g.: DIMMs). Idea was to continue parsing only objects starting with CPU.\n\nWon\u0027t insist on current approach if you believe it wastes more cycles.\n\nBest would be to add Present property, or equivalent, to xyz.openbmc_project.Inventory.Item.Cpu interface to match only signals from CPU objects.",
      "parentUuid": "4fb0aea9_339f04be",
      "range": {
        "startLine": 978,
        "startChar": 8,
        "endLine": 985,
        "endChar": 9
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3baadcf_2a3a66a1",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 985,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2024-05-06T18:50:50Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "4c7ef583_37a46dc4",
      "range": {
        "startLine": 978,
        "startChar": 8,
        "endLine": 985,
        "endChar": 9
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5067260_1979d446",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 990,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-02T04:16:34Z",
      "side": 1,
      "message": "It seems that you did not modify this variable, I suggest to update it to `const auto\u0026 findPresence`.",
      "range": {
        "startLine": 990,
        "startChar": 13,
        "endLine": 990,
        "endChar": 25
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c0d3447_907094d1",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 990,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-06T14:09:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5067260_1979d446",
      "range": {
        "startLine": 990,
        "startChar": 13,
        "endLine": 990,
        "endChar": 25
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "877a5337_890ed2ea",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 997,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-02T04:16:34Z",
      "side": 1,
      "message": "I think `const auto\u0026 present` is enough, we don\u0027t have to define this is a pointer while using `auto`",
      "range": {
        "startLine": 997,
        "startChar": 14,
        "endLine": 997,
        "endChar": 21
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cfddf35_39f4f099",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 997,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-06T14:09:07Z",
      "side": 1,
      "message": "Made it const.\nRegarding removing \u0027*\u0027 from auto, I\u0027m following style of dbus-sensors and I do think it has better readability.",
      "parentUuid": "877a5337_890ed2ea",
      "range": {
        "startLine": 997,
        "startChar": 14,
        "endLine": 997,
        "endChar": 21
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "358f478b_b446dc08",
        "filename": "src/Utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 997,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-08T02:52:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8cfddf35_39f4f099",
      "range": {
        "startLine": 997,
        "startChar": 14,
        "endLine": 997,
        "endChar": 21
      },
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f32a0b8b_7129a946",
        "filename": "src/Utils.hpp",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-02T04:16:34Z",
      "side": 1,
      "message": "Could you update the input parameters of `callback` from `(void)` to `(size_t idx, bool state)` to indicate which CPU has been updated?",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e4e180b_ba9194ec",
        "filename": "src/Utils.hpp",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1000478
      },
      "writtenOn": "2024-05-06T14:09:07Z",
      "side": 1,
      "message": "Cannot do it with current implementation, callback is not being called for every matched CPU presence signal. There is 1 second \u0027filtering\u0027 timer, i.e.: it\u0027s possible (and common) to have single callback for multiple CPU presence signal matches.",
      "parentUuid": "f32a0b8b_7129a946",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdde67c4_faba1bd0",
        "filename": "src/Utils.hpp",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-05-08T02:52:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e4e180b_ba9194ec",
      "revId": "0eeffc070ca81cc2a4c0e68d72526a062858a326",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}