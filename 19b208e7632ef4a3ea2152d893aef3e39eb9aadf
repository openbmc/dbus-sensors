{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4ce850be_b62242ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 64
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-04-14T07:55:26Z",
      "side": 1,
      "message": "@ed@tanous.net Can we please help review and close on this PR? It has been open for close to 6 months now?",
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89d57173_d4dcde4b",
        "filename": "src/GPIOInterface.hpp",
        "patchSetId": 64
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-01T17:58:02Z",
      "side": 1,
      "message": "We\u0027ve discussed CRTP a lot, and in general it\u0027s a pattern that we haven\u0027t allowed in the past.  I don\u0027t really see a reason to change that, this code would be a lot simpler without CRTP and just as modular.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 28
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64bec468_cd01d196",
        "filename": "src/GPIOInterface.hpp",
        "patchSetId": 64
      },
      "lineNbr": 19,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-01T19:13:21Z",
      "side": 1,
      "message": "Will be taken care by https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/comment/d3222954_3672499a/. Hence resolving this.",
      "parentUuid": "89d57173_d4dcde4b",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 28
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fbad7a3_5f9c2568",
        "filename": "src/GPIOInterface.hpp",
        "patchSetId": 64
      },
      "lineNbr": 19,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-01T19:13:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64bec468_cd01d196",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 28
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90863098_857c2358",
        "filename": "src/GPIOInterface.hpp",
        "patchSetId": 64
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-01T17:58:02Z",
      "side": 1,
      "message": "Isn\u0027t this a bug?  What if readGPIOAsync completes after readGPIOAsyncEvent ?  we\u0027ll latch the wrong state, right?",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 67,
        "endChar": 5
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da47c2a8_6976f869",
        "filename": "src/GPIOInterface.hpp",
        "patchSetId": 64
      },
      "lineNbr": 67,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-01T19:26:15Z",
      "side": 1,
      "message": "In general it depends on when the actual gpio value was read. So, if readGPIOAsync starts after readGPIOAsyncEvent, it should still update the same value.\n\nFYI: To avoid any confusion i was doing the initial read as in sync flow earlier but you had asked me to change it to async as you mentioned that sync gpio read will be time consuming.",
      "parentUuid": "90863098_857c2358",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 67,
        "endChar": 5
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ba309bb_73533196",
        "filename": "src/GPIOInterface.hpp",
        "patchSetId": 64
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-01T21:31:58Z",
      "side": 1,
      "message": "Right, I asked for async but that doesn\u0027t mean spawn and doesn\u0027t mean they can\u0027t be chained values?\n\nyou\u0027d do\n\nco_await readGPIOAsync;\n\n// Maybe spawn?\nco_await readGPIOAsyncEvent;",
      "parentUuid": "da47c2a8_6976f869",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 67,
        "endChar": 5
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f252333_b82751ea",
        "filename": "src/Systemd.cpp",
        "patchSetId": 64
      },
      "lineNbr": 18,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-01T17:58:02Z",
      "side": 1,
      "message": "Still seeing a bunch of these that should be easy to fix?  And no comment left why we\u0027re avoiding the static analysis here?",
      "range": {
        "startLine": 18,
        "startChar": 3,
        "endLine": 18,
        "endChar": 14
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd72a279_8cf9aaa6",
        "filename": "src/Systemd.hpp",
        "patchSetId": 64
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-01T21:55:48Z",
      "side": 1,
      "message": "This class has no state, and has one static method.  Just make this a method?",
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55e7fbf5_6584f0e3",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 64
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-01T17:58:02Z",
      "side": 1,
      "message": "This is going to consume memory the entire life of the program.  For a 2 item list, just use a std::array\u003cstd::string_view\u003e\n?",
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "192e817c_fbaa8cde",
        "filename": "src/leakdetector/LeakGPIODetector.cpp",
        "patchSetId": 64
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-01T21:31:58Z",
      "side": 1,
      "message": "I\u0027m assuming we don\u0027t want to actually wait for this to complete before continuing to scan, right?  Probably need a spawn here?",
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6dbf85c_f0f1a846",
        "filename": "src/leakdetector/LeakGPIODetector.hpp",
        "patchSetId": 64
      },
      "lineNbr": 46,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-01T17:58:02Z",
      "side": 1,
      "message": "Can we condense these two into one array for simplification?  one array referencing another is hard to read.\n\nAlso static unordered maps take up memory at all times.  I\u0027m fairly certain they\u0027re not needed.  Please fix all of them.  FWIW, this is something that needs cleaned up in other dbus-sensors, but lets not make the problem worse.",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 46,
        "endChar": 0
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7537184f_1ba971ff",
        "filename": "src/leakdetector/LeakGPIODetector.hpp",
        "patchSetId": 64
      },
      "lineNbr": 46,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-01T19:26:15Z",
      "side": 1,
      "message": "\u003e Can we condense these two into one array for simplification?  one array referencing another is hard to read.\n\nWill check if detectorTypes is not being used anywhere and if not then will condense it.\n\n\u003e \n\u003e Also static unordered maps take up memory at all times.  I\u0027m fairly certain they\u0027re not needed.  Please fix all of them.  FWIW, this is something that needs cleaned up in other dbus-sensors, but lets not make the problem worse.\n\nWhat do you want me to do here if not maps ?",
      "parentUuid": "a6dbf85c_f0f1a846",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 46,
        "endChar": 0
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "846b226c_7e99856c",
        "filename": "src/leakdetector/LeakGPIODetector.hpp",
        "patchSetId": 64
      },
      "lineNbr": 46,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-01T21:31:58Z",
      "side": 1,
      "message": "std::array\u003cstd::pair\u003cstd::string_view, DetectorIntf::DetectorType\u003e validDetectorTypes \u003d {{\n{\"LeakSensingCable\": DetectorIntf::DetectorType::LeakSensingCable},\n{\"Unknown\": DetectorIntf::DetectorType::Unknown}\n}};",
      "parentUuid": "7537184f_1ba971ff",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 46,
        "endChar": 0
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9a08cac_e1cd8690",
        "filename": "src/leakdetector/LeakGPIODetector.hpp",
        "patchSetId": 64
      },
      "lineNbr": 99,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-05-01T17:58:02Z",
      "side": 1,
      "message": "This kind of multiple inheritance is really difficult to read.  Could one of these (probably GPIOIntf) be a private member?",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 99,
        "endChar": 57
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c267eb8_bafcbba2",
        "filename": "src/leakdetector/LeakGPIODetector.hpp",
        "patchSetId": 64
      },
      "lineNbr": 99,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-05-01T19:26:15Z",
      "side": 1,
      "message": "Will be taken care by https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/75329/comment/d3222954_3672499a/ .\n\nSo resolving this.",
      "parentUuid": "e9a08cac_e1cd8690",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 99,
        "endChar": 57
      },
      "revId": "19b208e7632ef4a3ea2152d893aef3e39eb9aadf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}