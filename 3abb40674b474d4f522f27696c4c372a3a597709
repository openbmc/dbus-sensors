{
  "comments": [
    {
      "key": {
        "uuid": "87b31d49_5e3f90ba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-07T07:14:48Z",
      "side": 1,
      "message": "Done this way, this is going to require a change to phosphor-dbus-interfaces, but I suspect you don\u0027t actually need it.",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa22ef0e_bbc87d3d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-08T04:38:51Z",
      "side": 1,
      "message": "Hmm, interesting. Curious why it would need a change to that module also.",
      "parentUuid": "87b31d49_5e3f90ba",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d2c0533_afa3864b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-08T05:10:44Z",
      "side": 1,
      "message": "Because phosphor-dbus-interfaces is the projects documentation for DBus APIs.  Also, as written, I\u0027m guessing it\u0027s not going to be accepted, as you\u0027d have to implement it in all sensors (given that you\u0027ve made it non-optional).  I suspect it needs to go into its own API.",
      "parentUuid": "fa22ef0e_bbc87d3d",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e78a4654_b134f9ed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-08T16:55:36Z",
      "side": 1,
      "message": "Cool, thanks for telling me about phosphor-dbus-interfaces, didn\u0027t know about that one. I\u0027m happy to add it to the YAML documentation there, it looks straightforward. Also, it\u0027s completely optional: if that parameter is missing, the assumption is that it\u0027s false (the sensor is read-only, not read-write, from IPMI\u0027s point of view).",
      "parentUuid": "6d2c0533_afa3864b",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfce2a82_dd34f2e6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-09T03:41:53Z",
      "side": 1,
      "message": "If it\u0027s optional, you need to define it on its own interface that can be optionally included.  As written, it\u0027s required.",
      "parentUuid": "e78a4654_b134f9ed",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b470f5b_4429e12a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-09T04:56:58Z",
      "side": 1,
      "message": "Wow, all properties are required? Is this enforced by D-Bus, or merely by documentation convention in the YAML? https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/xyz/openbmc_project/Sensor/Value.interface.yaml\n\nHaving \"ExtSettable\" exist in some sensors, but not in other sensors, seemed just fine during my testing. No errors from D-Bus.\n\nIf there\u0027s no way to cleanly have an optional property, then I\u0027m happy adding something to the Sensor.hpp base class that would always instantiate this property (defaulting to false, of course). Would this be acceptable?",
      "parentUuid": "dfce2a82_dd34f2e6",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ab18d19_a8003bbf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-09T05:19:19Z",
      "side": 1,
      "message": "yep, all properties are required.  This is a convention of how a dbus interfaces works, the YAML is just implementing what dbus recommends.\n\nIn terms of \"enforcement\", some of the bindings enforce it (and have no way to pull out interface properties optionally) and some don\u0027t.\n\n\"Having \"ExtSettable\" exist in some sensors, but not in other sensors, seemed just fine during my testing. No errors from D-Bus.\"\nYep, because nobody is trying to use it, and ipmi uses one of the libraries that lets you decide on the \"the client has broken the dbus schema, what do you want to do\".\n\n\"If there\u0027s no way to cleanly have an optional property\"\nThere is, just declare a new interface with that property on it.  That\u0027s how we handle this in other places.  Your use case is similar to things like thresholds.",
      "parentUuid": "5b470f5b_4429e12a",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d5f8eb6_e1cd9b36",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-09T05:43:25Z",
      "side": 1,
      "message": "Hmm, interesting point, thanks. It\u0027s unfortunate that D-Bus schemas don\u0027t cleanly support optional parameters cleanly, but it looks like those are the cards we have been dealt.\n\nI think it\u0027s appropriate to have \"Mutable\" still be in the Value interface, since it\u0027s an important characteristic of the value, just like MinValue and MaxValue.",
      "parentUuid": "5ab18d19_a8003bbf",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8fa5589_8b9d7566",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-09T14:31:22Z",
      "side": 1,
      "message": "They support optional parameters just fine, and we do it all the time, you just have to put it in its own interface.\n\n\"I think it\u0027s appropriate to have \"Mutable\" still be in the Value interface, since it\u0027s an important characteristic of the value, just like MinValue and MaxValue.\"\n\nDisagree that they\u0027re the same.  Min/Max Value parameters are in the Value interface because they\u0027re required for the implementation to function (intel-ipmi-oem needs them).  Your mutable property is not required on every sensor, so it needs to go into another interface.\n\nIt should be noted that if you wanted to put that in the Value interface, and found a good reason to do so, you would be required to update ALL sensors in the project to expose it.  I\u0027m guessing you\u0027re not wanting to sign up to do that.",
      "parentUuid": "1d5f8eb6_e1cd9b36",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13f14b42_aaaeba4d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-10T05:51:27Z",
      "side": 1,
      "message": "The intel-ipmi-oem also needs the Mutable bit, as it\u0027s a mandatory part of each SDR entry. Just like the coefficients (as derived from MinValue and MaxValue bounds), the write-permission bit is something that needs to be filled in, for each SDR entry. So, logically, it belongs alongside MinValue and MaxValue, as parameters that influence the creation of the SDR. Although, until now, this bit has always just been hardcoded to false, so it wasn\u0027t a concern until now.\n\nI like the idea of putting it in another interface, \"xyz.openbmc_project.Sensor.Mutable\", that would have a single property, Mutable, boolean. Then, since it\u0027s a different interface, it would be optional, as evidently interfaces are optional but properties (within the interface) are not.",
      "parentUuid": "a8fa5589_8b9d7566",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bd50d9f_3fecaf9a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-10T23:17:01Z",
      "side": 1,
      "message": "\u003e The intel-ipmi-oem also needs the Mutable bit, as it\u0027s a mandatory part of each SDR entry. Just like the coefficients (as derived from MinValue and MaxValue bounds), the write-permission bit is something that needs to be filled in, for each SDR entry. So, logically, it belongs alongside MinValue and MaxValue, as parameters that influence the creation of the SDR. Although, until now, this bit has always just been hardcoded to false, so it wasn\u0027t a concern until now.\n\nBeing in the SDR doesn\u0027t make it mandatory on DBus if there\u0027s a reasonable default.  Considering that this is the first sensor that would actually set that bit, and likely the only sensor that will need it, it seems like the the default should be off, with the optional interface able to set it to ON.\n\nAlso, that bit was added in a later version of the spec, so technically it\u0027s not \"required\" from a compatibility standpoint either.  I believe reserved bits are meant to be set to 0.\n\nIf you really want to make it mandatory, you can, but it\u0027s going to force you to make a lot of changes to multiple projects (all the sensor repos) and the last couple times we did that (with reading to double, or adding MinValue and MaxValue) it took a long time to get that breaking change through.  I\u0027m trying to help you avoid that pain here.\n\n\u003e \n\u003e I like the idea of putting it in another interface, \"xyz.openbmc_project.Sensor.Mutable\", that would have a single property, Mutable, boolean. Then, since it\u0027s a different interface, it would be optional, as evidently interfaces are optional but properties (within the interface) are not.\n\n\nSo would that mean that MaxValue and MinValue are mutable too?  In terms of sensors, I think we know the meaning: reading is mutable, but in the context of other things and as a generic openbmc concept (which is what we\u0027re trying to get here) I think you need to specify which properties are mutable.",
      "parentUuid": "13f14b42_aaaeba4d",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b8451d8_5204087f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-14T05:08:25Z",
      "side": 1,
      "message": "Yes, other properties should be mutable. Not sure about MinValue and MaxValue, these are used to set the IPMI SDR coefficients, and these aren\u0027t changeable at runtime once they are set. However, the IPMI \"set sensor value\" command has many optional parameters, and things like thresholds are certainly settable or not. These would be good candidates to also receive Mutable flags.",
      "parentUuid": "6bd50d9f_3fecaf9a",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48911e11_784923cc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-07T07:14:48Z",
      "side": 1,
      "message": "Why would anyone choose to set it to false?",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02891986_414561de",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-08T04:38:51Z",
      "side": 1,
      "message": "They wouldn\u0027t, but I needed some variable I could set to indicate presence of this choice, and bool is the simplest.",
      "parentUuid": "48911e11_784923cc",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bad6f54_a7cec9b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-08T05:10:44Z",
      "side": 1,
      "message": "I get it now.  This is driving the SDR.",
      "parentUuid": "02891986_414561de",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42a89d53_7f00575a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-08T16:55:36Z",
      "side": 1,
      "message": "Cool, good. It also isn\u0027t tied only to IPMI, it\u0027s a general thing that could also inform Redfish permissions in the future, if desired.",
      "parentUuid": "7bad6f54_a7cec9b5",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7de2cf4f_a0d001f2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-09T03:41:53Z",
      "side": 1,
      "message": "I don\u0027t think that Redfish has a read-only property that we normally define at runtime.  Normally it\u0027s declared in CSDL schema.  Technically in the sensor write case, we\u0027re breaking the redfish standard, but that\u0027s another story.",
      "parentUuid": "42a89d53_7f00575a",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbfce6e4_89e538ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-09T04:56:58Z",
      "side": 1,
      "message": "Interesting. I took a quick look at the Sensor schema in Redfish, and it might be something they\u0027ve overlooked altogether? I couldn\u0027t find any reference to read-only or read-write properties of sensors, or a \"write to sensor value\" command.\n\nThe idea is not to tie it to IPMI, but rather, to be general enough that it would apply to whatever protocol would be used to serve sensors up to those outside the BMC.",
      "parentUuid": "7de2cf4f_a0d001f2",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63058ac1_ad15691e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-09T05:19:19Z",
      "side": 1,
      "message": "bmcweb doesn\u0027t implement the Sensor or SensorCollection schemas today.  They\u0027re relatively new.  We implement Thermal and Power schemas, which are similar.\n\nYeah, generic is fine, I\u0027m just letting you know that redfish doesn\u0027t have a way to describe that that I\u0027m aware of.\n\nIn terms of Redfish being used to WRITE sensor values, it\u0027s a fairly uncommon use case, although I believe Richard was looking into changing the redfish schema to that effect.",
      "parentUuid": "dbfce6e4_89e538ae",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f25900f3_a7ee7094",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-09T05:43:25Z",
      "side": 1,
      "message": "OK, thanks. It does seem bizarre, almost an oversight, that Redfish doesn\u0027t have the concept of an external user wanting to write, not just read, a sensor value.",
      "parentUuid": "63058ac1_ad15691e",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c2485bf_2e48653f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-09T14:31:22Z",
      "side": 1,
      "message": "I expected it would get added when the in-band redfish spec came out, but it hasn\u0027t seemed to.",
      "parentUuid": "f25900f3_a7ee7094",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5295d709_156c4204",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-10T05:51:27Z",
      "side": 1,
      "message": "Hmm, this does seem like an oversight, I should ask around. Would be a shame if the Redfish standard got locked in without supporting this feature, as it would be a step backward from IPMI.",
      "parentUuid": "5c2485bf_2e48653f",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1b6e63e_597f276c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-10T23:17:01Z",
      "side": 1,
      "message": "Redfish is never \"locked in\".  It evolves and gets changed 2-3 times a year.  So long as changes are backward compatible (which going from read only to read/write on a parameter would be) they\u0027re generally acceptable, so long as there\u0027s a value use case.",
      "parentUuid": "5295d709_156c4204",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a65da3b_9e4718d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-14T05:08:25Z",
      "side": 1,
      "message": "OK, good. I think this is a good use case, to be able to have sensors be read-write as well as read-only (of course, they should still be read-only by default). It would help Redfish achieve feature parity with IPMI.",
      "parentUuid": "f1b6e63e_597f276c",
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fea6cc23_cf17b297",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-07T07:14:48Z",
      "side": 1,
      "message": "See comment in later files.  Why do 2 dbus requests instead of one?  Have IPMI try to call SetProperty, and if it fails, you know the sensor isn\u0027t writeable.  So far as I\u0027m aware, there isn\u0027t a \"this sensor is writeable\" field in the SDR we need to fill.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 57
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f909238c_9e230b1d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-08T04:38:51Z",
      "side": 1,
      "message": "SetProperty should succeed for all sensors, since write commands aren\u0027t restricted over D-Bus. If you\u0027re local running on the BMC, you can change any sensor at will. We might not want this for all IPMI users, though. In the IPMI service we\u0027re using, all sensors default to read-only permission, so I needed a way to tell it to mark some of them as read-write permission, for sensors I want external users to be able to change.\n\nAs for \"this sensor is writeable\" field in the SDR, I checked the IPMI spec, and it\u0027s byte 11 bit 7 in the SDR, table 43-1 in the IPMI document.",
      "parentUuid": "fea6cc23_cf17b297",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 57
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c459ef1_b96fb72f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-08T16:55:36Z",
      "side": 1,
      "message": "An example is here: https://github.com/openbmc/phosphor-host-ipmid/blob/a8be7dc839e1dbf561dd255a4ee1e7b6fb091c8e/sensorhandler.cpp#L959\nI could change the name of \"ExtSettable\" to \"Mutability\" or \"Mutable\" if desired, it would make more sense against the naming in the code here.",
      "parentUuid": "f909238c_9e230b1d",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 57
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd523348_4e7fa516",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-09T03:41:53Z",
      "side": 1,
      "message": "Yep, I gotcha now.",
      "parentUuid": "9c459ef1_b96fb72f",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 57
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7df7908_8c9ada33",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-07T07:14:48Z",
      "side": 1,
      "message": "Um...... Sensor override is a thing, and makes this statement false.  Basically every sensor is externally settable.",
      "range": {
        "startLine": 98,
        "startChar": 16,
        "endLine": 98,
        "endChar": 63
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53342969_e5940d4e",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-08T04:38:51Z",
      "side": 1,
      "message": "By \"externally\" I meant somebody not on the BMC, perhaps using IPMI to communicate with the BMC. I thought all the sensors were read-only by default, from the point of view of somebody outside the BMC. Inside the BMC, of course, every sensor can be easily written with D-Bus.",
      "parentUuid": "c7df7908_8c9ada33",
      "range": {
        "startLine": 98,
        "startChar": 16,
        "endLine": 98,
        "endChar": 63
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "088c8fcf_49335717",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-08T23:15:21Z",
      "side": 1,
      "message": "This is also to help entity-manager achieve feature parity with the old YAML configuration files. YAML had a setting \"Mutability\" that would achieve this, but as of now, entity-manager does not, so this will help add it, in such a way that it\u0027s both readable by IPMI now and Redfish in the future.",
      "parentUuid": "53342969_e5940d4e",
      "range": {
        "startLine": 98,
        "startChar": 16,
        "endLine": 98,
        "endChar": 63
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0aec25a_af2ad634",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-09T05:25:37Z",
      "side": 1,
      "message": "fair point.",
      "parentUuid": "088c8fcf_49335717",
      "range": {
        "startLine": 98,
        "startChar": 16,
        "endLine": 98,
        "endChar": 63
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32160ed1_181a34ca",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-07T07:14:48Z",
      "side": 1,
      "message": "I\u0027m trying to understand the point of this.  Why do callers need to know if something is settable?  Can\u0027t they just try to set it, and if it returns that it\u0027s read only, they\u0027ll know.\n\nAlso, you\u0027ve added an config property, but you haven\u0027t actually enforced its behavior anywhere, by making the Value property read-only.",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b684fded_8ac2e8c0",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-08T04:38:51Z",
      "side": 1,
      "message": "Again, it\u0027s not about D-Bus permissions. All sensors remain writeable in D-Bus. This is only a hint to the external service (IPMI in this case, but it\u0027s not limited to IPMI) that they should serve the sensor to their external users, outside the BMC, with read-write permissions instead of read-only permissions.",
      "parentUuid": "32160ed1_181a34ca",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6856111f_d625c11b",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000502
      },
      "writtenOn": "2020-09-08T20:23:19Z",
      "side": 1,
      "message": "Ed, would you prefer if this was IPMI specific (e.g. calling it IPMISettable)? Or should we keep it general purpose?\n\nLooks like you\u0027ve come to an understanding of why we want this, but I\u0027ll restate it again just to be clear. We\u0027re looking for a way to configure which sensors should be advertised as settable in the IPMI SDR. We have a pretty hacky patch to add write support to intel-ipmi-oem/src/sensorcommands.cpp. This property would allow opting in to IPMI sensor writes.",
      "parentUuid": "b684fded_8ac2e8c0",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be7aa482_ecde1cea",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-08T23:15:21Z",
      "side": 1,
      "message": "I would keep it general-purpose as there\u0027s nothing here that specifically limits it to IPMI. I believe Redfish will have the same concerns.",
      "parentUuid": "6856111f_d625c11b",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7193950f_9e251a69",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2020-09-09T00:39:38Z",
      "side": 1,
      "message": "I don\u0027t understand the statement of this being a hint to IPMI.\nWill it be enforced and who would be responsible to enforce this, i.e. block the write when it is not settable, which is default? Will IPMI do it? And redfish also has to do it independently?",
      "parentUuid": "be7aa482_ecde1cea",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "899b3585_8a3b37dc",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-09T02:36:15Z",
      "side": 1,
      "message": "The purpose of it is to achieve feature parity with the existing \"mutability\" parameter that can be set in the YAML files for static phosphor-host-ipmid configuration. https://github.com/openbmc/phosphor-host-ipmid/blob/master/scripts/sensor-example.yaml#L16\n\nThere\u0027s currently no parameter in entity-manager JSON files that can provide the equivalent, to my knowledge. I\u0027m considering renaming \"ExtSettable\" to \"Mutable\".\n\nIt would be enforced by the IPMI server (or Redfish server), as per their respective protocols. If an external user tries to use IPMI to set a sensor that is read-only, then this action should be disallowed, and conversely, if the sensor is read-write, this action should be allowed. https://github.com/openbmc/phosphor-host-ipmid/blob/a8be7dc839e1dbf561dd255a4ee1e7b6fb091c8e/sensorhandler.cpp#L376",
      "parentUuid": "7193950f_9e251a69",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abc4fcc1_349a061b",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-09T03:41:53Z",
      "side": 1,
      "message": "Agreed, I\u0027d like to keep this general purpose.  I\u0027d like the \"blocking\" behavior to be enforced in the individual sensors, as there are APIs that operate directly on dbus, and they should obey this parameter too.\n\nWith that said, I think there\u0027s another track we need to go here: DBus has an \"access\" attribute that can declare a property read or read/write.  I suspect that\u0027s the mechanism we should be using here, not a separate property to declare the permissions.\n\nhttps://www.gnu.org/software/emacs/manual/html_node/dbus/Introspection.html\n\n\"A property element has no arg child element. It just has the attributes name, type and access, which are all mandatory. The access attribute allows the values ‘readwrite’, ‘read’, and ‘write’.\"",
      "parentUuid": "899b3585_8a3b37dc",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25e19d6f_92cc9607",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-09T04:56:58Z",
      "side": 1,
      "message": "I thought about that, but I don\u0027t want to enforce it at the D-Bus layer. As it is now, by default all sensor values on D-Bus are read-write, which can be handy for testing things by stuffing false values into the sensor readings. This is safe and secure, because it\u0027s only internally within the BMC. Conversely, by default all sensor values served over IPMI are read-only from the perspective of those outside the BMC. This is safe and secure, because it keeps a sensor value from being maliciously updated by something outside the BMC. So, there\u0027s two different layers here. I don\u0027t want to tie one layer to the other, because it can be very useful to have something read-only from the outside world but read-write when inside.",
      "parentUuid": "abc4fcc1_349a061b",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2067e43_5d94451a",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-09T05:25:37Z",
      "side": 1,
      "message": "This is making me start to wonder if we need to invent a \"Sensor Writer\" interface for testing rather than just using SetProperty, so we can differentiate between \"I was to set this for testing\" and \"I want to set this for real\"\n\n\"This is safe and secure, because it\u0027s only internally within the BMC.\"\nNot on most systems.  DBus is a public (outside the box) facing API through REST on most setups today.\n\n\"This is safe and secure, because it keeps a sensor value from being maliciously updated by something outside the BMC\"\nThis is the problem space that Special Mode Manager is indented to solve.  Sensors are only settable if in Manufacturing, or Test modes, which require some gymnastics to get into, thus proving physical presence.  With that said, I\u0027m not an expert here, but as-written, dbus should be considered external for the time being.",
      "parentUuid": "25e19d6f_92cc9607",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd4c74fd_f0c89ba3",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-09T05:43:25Z",
      "side": 1,
      "message": "Wow, did not know D-Bus was given an external interface so that outsiders could play with the bus. That seems rather insecure to me, it opens up a large new attack surface inside. Hopefully that isn\u0027t enabled by default?\n\nHaving \"Sensor Writer\" for testing, or \"Special Mode Manager\", sounds like good ideas for the future, but beyond the scope of this patch.",
      "parentUuid": "d2067e43_5d94451a",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "132a13e9_20d20834",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-09T14:31:22Z",
      "side": 1,
      "message": "Eh, kinda insecure.  Yes, it\u0027s enabled by default, because prior to me writing bmcweb, that was the projects only user-facing API.  It requires root, so it\u0027s not any more insecure than it is without, as you could just as easily SSH in and do all the same stuff.\n\n\"Having \"Sensor Writer\" for testing, or \"Special Mode Manager\", sounds like good ideas for the future, but beyond the scope of this patch.\"\n\nWe need to make sure we haven\u0027t broken the sensor override semantics.  So long as we haven\u0027t done that, I\u0027m fine with doing it this way.",
      "parentUuid": "fd4c74fd_f0c89ba3",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f57c6122_3023e2e6",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-10T05:51:27Z",
      "side": 1,
      "message": "Yep, if somebody can SSH in, all bets are off, that\u0027s understood.\n\nWhat are the \"sensor override semantics\" that you speak of? Not sure what you mean.",
      "parentUuid": "132a13e9_20d20834",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d1ace10_73127a67",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-10T23:17:01Z",
      "side": 1,
      "message": "Doing a SetProperty on the Value interface is what constitutes a \"sensor override\" today, and is used for testing pathological sensor cases that couldn\u0027t be created in practice (or would require destroying the platform to do so).  At this point, you\u0027ve overloaded that definition to also include the golden path, which makes me wonder if we need to differentiate \"this is expected\" from \"we\u0027re in test mode\" in any case.  I know for the other sensors, the distinction is used to disable the scan loop, but this doesn\u0027t have a scan loop.\n\nOn the first sensor override, there\u0027s usually something logged to the system log, and depending on where you\u0027ve injected this, I\u0027m not sure if you\u0027ll get that log on the first IPMI set.  I don\u0027t recall the semantics there.",
      "parentUuid": "f57c6122_3023e2e6",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27f94716_7ecae409",
        "filename": "src/PwmSensor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2020-09-14T05:08:25Z",
      "side": 1,
      "message": "Not sure if we\u0027re talking about the same thing or not. As for sensor override, I thought it was always OK to send a D-Bus command to the sensor and change its value manually. It\u0027s really two different things: the D-Bus permissions internally, and the IPMI SDR permissions externally. I think it\u0027s good to maintain this separation, instead of trying to bleed one layer into another.",
      "parentUuid": "9d1ace10_73127a67",
      "range": {
        "startLine": 104,
        "startChar": 44,
        "endLine": 104,
        "endChar": 55
      },
      "revId": "3abb40674b474d4f522f27696c4c372a3a597709",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}