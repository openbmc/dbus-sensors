{
  "comments": [
    {
      "key": {
        "uuid": "a4e3c885_2ee82d60",
        "filename": "src/ExternalSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-18T22:24:50Z",
      "side": 1,
      "message": "We should probably move ExternalSensor to a smart_ptr, and capture weak_from_this here, to avoid possible pointer safety issues.  We do this in other places to great effect.",
      "range": {
        "startLine": 79,
        "startChar": 23,
        "endLine": 79,
        "endChar": 27
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7575f19_c5d84f17",
        "filename": "src/ExternalSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-19T00:13:23Z",
      "side": 1,
      "message": "Agreed. There\u0027s already enable_shared_from_this() being done in the constructor.",
      "parentUuid": "a4e3c885_2ee82d60",
      "range": {
        "startLine": 79,
        "startChar": 23,
        "endLine": 79,
        "endChar": 27
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bd13174_0dd74438",
        "filename": "src/ExternalSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-18T22:24:50Z",
      "side": 1,
      "message": "In the future, please add debug logging like this in a different patchset.  With that said, not worth splitting out at this point.",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 90,
        "endChar": 5
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e88e6c09_25e67a01",
        "filename": "src/ExternalSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-19T00:13:23Z",
      "side": 1,
      "message": "This was very useful during development and testing of this feature, and the logging should stay with the code, in case somebody else wants to enable it as well.",
      "parentUuid": "8bd13174_0dd74438",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 90,
        "endChar": 5
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65906490_6194b945",
        "filename": "src/ExternalSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-18T22:24:50Z",
      "side": 1,
      "message": "Need to explicitly null out the new callback you added to avoid shutdown seg faults.",
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1089695_01eb6f62",
        "filename": "src/ExternalSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-19T00:14:13Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "65906490_6194b945",
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7dbddde1_639e81fb",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-18T22:24:50Z",
      "side": 1,
      "message": "This is logic that really should be going into each individual sensor.  The memory safety issues with this method are a little scary, and I\u0027m having trouble divining how this would work if a sensor got destroyed at the same time as the timer expired.\n\nI suspect if you rolled this logic into the ExternalSensor class, it would be significantly simpler, as you could simply rearm the existing poll timer every time a value was set.",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 45
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "033c1c0a_238cd30c",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-18T23:37:32Z",
      "side": 1,
      "message": "Hmm. The \"sensors\" container object has essentially global lifetime (it\u0027s in main() and passed around by reference), but each individual ExternalSensor in it could be a concern. The program is single-threaded, so only one Boost callback should be able to happen at a time. If it\u0027s in the middle of executing the callback that calls createSensors(), the timer callback shouldn\u0027t be able to also fire at the same time. So, even if createSensors() disturbs the container, it should be settled down by the time the timer callback gets to execute.",
      "parentUuid": "7dbddde1_639e81fb",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 45
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcbeefc3_64dcc015",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:30:33Z",
      "side": 1,
      "message": "In practice, that\u0027s not how that works, and we\u0027ve been burned by it in the past.  If a sensor expires while io loop is executing something else, the expiration gets added to the bottom of the poll queue.  At one point, we believed that timers would return operation_aborted in all cases, but there turns out to a be a race condition there if we do that.\n\nThe best compromise we\u0027ve found to avoid this is to either use weak_ptr for every callback capture, and to make sure that the sensor itself owns everything about its being, and avoid globals like this.",
      "parentUuid": "033c1c0a_238cd30c",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 45
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "face3b30_0e662550",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-02T11:46:04Z",
      "side": 1,
      "message": "Hmm. I went over it again, and still can\u0027t see a problem.\n\nThe \"sensors\" container is passed around by reference, and has main() lifetime. Each individual ExternalSensor object in the container could be removed at any time, though. That\u0027s fine.\n\nIn the updateReaper() function, the container is iterated through, so if an ExternalSensor object isn\u0027t in there anymore, nothing more can be done to it. Even if the timer is late being called, that\u0027s fine. Perhaps an entry could get replaced by null. I added a check for the container having an entry that\u0027s null, as an extra check.",
      "parentUuid": "dcbeefc3_64dcc015",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 45
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf390b72_86d2c12a",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-18T22:24:50Z",
      "side": 1,
      "message": "time points can be passed by value.",
      "range": {
        "startLine": 57,
        "startChar": 61,
        "endLine": 57,
        "endChar": 66
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54817460_9f89a5ad",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-18T23:37:32Z",
      "side": 1,
      "message": "In general, I like passing structures by const reference, as that frees the user from having to worry about the size of them. However, I checked, and the size of time_point here is only 8 bytes, so it\u0027s fine.",
      "parentUuid": "cf390b72_86d2c12a",
      "range": {
        "startLine": 57,
        "startChar": 61,
        "endLine": 57,
        "endChar": 66
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e42106d0_ca07a4c6",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-31T17:30:33Z",
      "side": 1,
      "message": "In this case, time_point is a typedef for int, not a struct.  I\u0027m surprised you found it to be 8 bytes.  On the BMC (which is 32 bit) I\u0027d expect it to be 4 bytes.\n\nEither way, fine to pass by value.",
      "parentUuid": "54817460_9f89a5ad",
      "range": {
        "startLine": 57,
        "startChar": 61,
        "endLine": 57,
        "endChar": 66
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "734e1eed_4c30edb5",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-04-02T11:46:04Z",
      "side": 1,
      "message": "It\u0027s buried under layers of templates, and I couldn\u0027t find what it\u0027s really defined as. It has subsecond precision, so I would expect it to be \"struct timespec\" somewhere down deep. Thus, 8 bytes (and a big Y2038 problem) on 32-bit, and probably 16 bytes on 64-bit.",
      "parentUuid": "e42106d0_ca07a4c6",
      "range": {
        "startLine": 57,
        "startChar": 61,
        "endLine": 57,
        "endChar": 66
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "534109f2_edaf3a53",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-18T22:24:50Z",
      "side": 1,
      "message": "expires_from_now seems better in this case, rather than doing the \"from now\" math yourself.",
      "range": {
        "startLine": 104,
        "startChar": 10,
        "endLine": 104,
        "endChar": 20
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3befbca1_f06f206d",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-18T23:37:32Z",
      "side": 1,
      "message": "I wanted to use the existing \"now\" that was passed in. The reason is, this gets the timer math more correct, instead of introducing timing slop caused by the execution time between the \"now\" timestamp that was passed in, and the current time of day whenever Boost calculates expires_from_now(). Also, I want to minimize the amount of timestamps being taken, as the act of taking a timestamp is fairly slow.",
      "parentUuid": "534109f2_edaf3a53",
      "range": {
        "startLine": 104,
        "startChar": 10,
        "endLine": 104,
        "endChar": 20
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0de75348_00fd4d28",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-18T22:24:50Z",
      "side": 1,
      "message": "Shouldn\u0027t we have one of these per-sensor?  That seems significantly simpler, and requires ExternalSensor to be more self-contained.",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 332,
        "endChar": 46
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16e0969e_eb974cf3",
        "filename": "src/ExternalSensorMain.cpp",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2021-03-18T23:37:32Z",
      "side": 1,
      "message": "I don\u0027t like free-running timers on a per-sensor basis, that got us into all sorts of issues with PSUSensor easier, and it would greatly complicate cleanup, as you mention in other comments.",
      "parentUuid": "0de75348_00fd4d28",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 332,
        "endChar": 46
      },
      "revId": "d9b8dd4ba62c9c3ed500e1887241fc4e5d99c55f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}