{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6df59aa0_1abe61f1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-28T01:41:18Z",
      "side": 1,
      "message": "Hmm, this hasn\u0027t yet been merged. I\u0027ve asked about it here:\n\nhttps://discord.com/channels/775381525260664832/819741065531359263/1354988450771767427",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85312fd3_61e8e74e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-28T01:41:18Z",
      "side": 1,
      "message": "Hi Jonico, thanks for continuing to work on this, especially for the test cases. My main concern is that we\u0027re still throwing exceptions. These should be avoided. Given that concern I\u0027ve also commented about re-arranging the ownership of parsing of the bus file name.",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3937227f_7d489973",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 108,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-31T08:47:19Z",
      "side": 1,
      "message": "I think we must check the existence of `muxPath` on the filesystem beforehand. Otherwise, user might be receiving an I2CMux object from `findMux` that is unusable.",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd78043b_c750e0ec",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 108,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-04-04T19:39:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3937227f_7d489973",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9b0143d_eb4fad2f",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 108,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-04-08T03:14:12Z",
      "side": 1,
      "message": "Thank you for addressing my comments. But empty() is not capable of checking if the path exists on the file system, right? I think we need std::filesystem::exists(muxPath).",
      "parentUuid": "fd78043b_c750e0ec",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af9b67b7_78e5b393",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 108,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-04-14T21:14:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9b0143d_eb4fad2f",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4df3a3f2_b3ac820a",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 109,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-28T01:41:18Z",
      "side": 1,
      "message": "Can we require this be a precondition, and make the constructor private? That way we\u0027re not throwing exceptions.",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "111c7fbe_53172c72",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 109,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-04-04T19:39:50Z",
      "side": 1,
      "message": "Moved to findMux function as a precondition before creating the I2CMux object.",
      "parentUuid": "4df3a3f2_b3ac820a",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed71dd06_db7086f4",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 115,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-31T08:47:19Z",
      "side": 1,
      "message": "I think this should be getChannelBus or getBusFromChannel?",
      "range": {
        "startLine": 115,
        "startChar": 26,
        "endLine": 115,
        "endChar": 39
      },
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3b329a9_4b958823",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 115,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-31T08:47:19Z",
      "side": 1,
      "message": "I think we\u0027re not changing `chName`. Should it be const as arguments to a const function are not inherently const?",
      "range": {
        "startLine": 115,
        "startChar": 40,
        "endLine": 115,
        "endChar": 59
      },
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f369159_f94f8062",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 115,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-04-04T19:39:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3b329a9_4b958823",
      "range": {
        "startLine": 115,
        "startChar": 40,
        "endLine": 115,
        "endChar": 59
      },
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dfdac63_ffea298f",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 130,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-28T01:41:18Z",
      "side": 1,
      "message": "I think this should be the responsibility of the `I2CBus` class.",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 130,
        "endChar": 39
      },
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "842e6620_1cbb0f43",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 130,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-31T08:47:19Z",
      "side": 1,
      "message": "Do you think we should try/catch for using stoi here?",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be3a2381_068fd44a",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 130,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-04-02T15:28:15Z",
      "side": 1,
      "message": "Does this mean you\u0027d like another constructor for I2CBus that takes in a string? I think removing this prefix should be handled here as part of the getting the bus number from the channel since this section is stripping off the \"/dev/i2c-\" when checking where the symLink from `/dev/\u003cMuxName\u003e/\u003cChannelName\u003e` to `/dev/i2c-\u003cbus\u003e`",
      "parentUuid": "2dfdac63_ffea298f",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 130,
        "endChar": 39
      },
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5637b1b_2ef4a8b1",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 130,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-04-08T00:16:23Z",
      "side": 1,
      "message": "The symlink isn\u0027t relevant here though. `/dev/i2c-\u003cbus\u003e` devices represent a bus. That may or may not have a relationship with a mux, but the bus name is a fundamental property of a bus, and so should be processed by the class representing the bus.",
      "parentUuid": "be3a2381_068fd44a",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 130,
        "endChar": 39
      },
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ee783ea_ee133e4c",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 130,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-04-14T21:14:00Z",
      "side": 1,
      "message": "Added static member function for I2CBus called getBusFromPath that does the stripping of \"/dev/i2c-\" when the symlink path is read.",
      "parentUuid": "b5637b1b_2ef4a8b1",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 130,
        "endChar": 39
      },
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfa0bfed_c1795e94",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 135,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-31T08:47:19Z",
      "side": 1,
      "message": "We won\u0027t need to directly use this function while parsing configuration, right? Will we need another function in Utils.hpp that takes the configuration data and returns bus number?",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2870992f_e6b4c12d",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 135,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-04-02T15:39:04Z",
      "side": 1,
      "message": "The findMux function will be called by sensors which use the \"Bus\" field as an alternative if there is no \"Bus\" field configured. If there is a MuxChannel object configured for the sensor instead, then the currently named \"getLogicalBus\" function will be called to get the bus and bus number associated with the MuxChannel configuration. I\u0027m not intending to create another function in Utils.hpp.",
      "parentUuid": "cfa0bfed_c1795e94",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39ff9514_1b09aaf8",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 135,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-04-03T03:11:06Z",
      "side": 1,
      "message": "As free functions are not desirable in Utils.hpp, maybe my thought does not suit. But I don\u0027t see why sensors need to know the mux object, what they want is the bus object only.",
      "parentUuid": "2870992f_e6b4c12d",
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed611f05_ee2644b8",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 147,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-28T01:41:18Z",
      "side": 1,
      "message": "The idea behind `std::optional` was so that we could return an empty optional instance instead of throwing an exception. A couple of suggestions for alternatives:\n\n1. Log an error, and then `return {};`\n2. Given libc now provides `std::expected` (relatively recent, over the course of us reviewing this patch), use `std::expected` instead of `std::optional`: https://en.cppreference.com/w/cpp/utility/expected\n\nThis applies to the exception cases below.",
      "range": {
        "startLine": 146,
        "startChar": 4,
        "endLine": 147,
        "endChar": 63
      },
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77232496_af14136c",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 147,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-04-04T19:39:50Z",
      "side": 1,
      "message": "I log an error and `return std::nullopt;` since we are returning a `std::optional`",
      "parentUuid": "ed611f05_ee2644b8",
      "range": {
        "startLine": 146,
        "startChar": 4,
        "endLine": 147,
        "endChar": 63
      },
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92d8025c_5312caf4",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 172,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-28T01:41:18Z",
      "side": 1,
      "message": "Wait, we should never be causing exceptions that we then catch ourselves. Please instead perform an early return for the error cases.",
      "range": {
        "startLine": 169,
        "startChar": 2,
        "endLine": 172,
        "endChar": 32
      },
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f2a6502_561a227d",
        "filename": "src/DeviceMgmt.hpp",
        "patchSetId": 15
      },
      "lineNbr": 172,
      "author": {
        "id": 1001538
      },
      "writtenOn": "2025-04-04T19:39:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92d8025c_5312caf4",
      "range": {
        "startLine": 169,
        "startChar": 2,
        "endLine": 172,
        "endChar": 32
      },
      "revId": "2550348702a7f1f68310b5390b671130c7f4d69c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}