From 1df72345afde97221b7cccaf9feaf4ca7b8eaecc Mon Sep 17 00:00:00 2001
From: Eric Yang <eric.yang.wiwynn@gmail.com>
Date: Tue, 22 Apr 2025 16:41:32 +0800
Subject: [PATCH] pwm-sensor: Align Target with user intent

Refactor the behavior of the Target property in the PWM control
interface and the Value property in the PWM sensor interface to ensure
Target reflects user intent and resolve timing inconsistencies in driver
behavior.

- The Target property now reflects user-requested values and updates
  the hardware PWM value indirectly through the Value setter.
- The Value property reflects the actual hardware PWM value reported
  by the driver and updates the Target property to align with user
  input when changed.

Motivation:
Currently, both the Target property in the PWM control interface and
the Value property in the PWM sensor interface directly relate to the
driver PWM file value, differing only in scale (255 max for control,
percentage for sensor).

However, the interpretation of the PWM file can vary among different
Fan IC drivers.

- Immediate Reflection Drivers (e.g., nct7363):
The driver PWM file instantly mirrors the requested PWM value upon
being written.

- Delayed Reflection Drivers (e.g., max31790):
The driver PWM file reflects the actual hardware state, which may
take time to update as the fan physically adjusts its speed

For drivers with delayed reflection, issues can arise when PWM values
are set in rapid succession:

Example:
pwm 10 -> pwm 100 -> pwm 10

In this sequence, when setting pwm 100, the driver instantly reads the
new value. However, due to delays, the fan sensor might still read the
PWM as being set to 10.
When setting pwm 10 again, the fan sensor might skip the write
operation, assuming the value is already correct.
This results in the hardware remaining at pwm 100, causing unintended
fan speed behavior.
This issue can occur when using phosphor-pid-control to manage PWM
settings.

Change-Id: I190d6573e42f458a63c64e2a8f26e347d844ddf1
Signed-off-by: Eric Yang <eric.yang.wiwynn@gmail.com>
---
 src/PwmSensor.cpp | 9 +++------
 1 file changed, 3 insertions(+), 6 deletions(-)

diff --git a/src/PwmSensor.cpp b/src/PwmSensor.cpp
index 646f0c6..aee6d96 100644
--- a/src/PwmSensor.cpp
+++ b/src/PwmSensor.cpp
@@ -91,10 +91,10 @@ PwmSensor::PwmSensor(const std::string& pwmname, const std::string& sysPath,
             {
                 return 1;
             }
-            setValue(reqInt);
             resp = req;
-
-            controlInterface->signal_property("Target");
+            auto scaledValue = static_cast<double>(reqInt) / pwmMax * targetIfaceMax;
+            auto targetValue = static_cast<uint64_t>(std::round(scaledValue));
+            controlInterface->set_property("Target", targetValue);
 
             return 1;
         },
@@ -108,7 +108,6 @@ PwmSensor::PwmSensor(const std::string& pwmname, const std::string& sysPath,
                 double getScaled =
                     100.0 * (static_cast<double>(getInt) / pwmMax);
                 curVal = getScaled;
-                controlInterface->signal_property("Target");
                 sensorInterface->signal_property("Value");
             }
             return curVal;
@@ -149,8 +148,6 @@ PwmSensor::PwmSensor(const std::string& pwmname, const std::string& sysPath,
             auto value = static_cast<uint64_t>(roundValue);
             if (curVal != value)
             {
-                curVal = value;
-                controlInterface->signal_property("Target");
                 sensorInterface->signal_property("Value");
             }
             return curVal;
-- 
2.25.1

