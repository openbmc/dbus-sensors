{
  "comments": [
    {
      "key": {
        "uuid": "18e342d4_b747d4f8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T18:14:51Z",
      "side": 1,
      "message": "Please don\u0027t wrap your lines by hand.  Lines should be wrapped 50/72 please.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 51
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd00b1f4_205d3519",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-19T21:56:42Z",
      "side": 1,
      "message": "Is the read until eventually going to finish or is it hung? \nWhat is the root cause for this? Is device busy, driver issue or other reason?\nHow to recover from this, close and reopen the file or simply cancel and retry?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 14
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2963ed90_7ab565fb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T18:14:51Z",
      "side": 1,
      "message": "\u003e Is the read until eventually going to finish or is it hung? \n\u003e What is the root cause for this? Is device busy, driver issue or other reason?\n\n+1 this implies that a driver is hung.  I\u0027m not against protections in this area, but we need a proper root cause on what\u0027s happening.\n\n\u003e How to recover from this, close and reopen the file or simply cancel and retry?\n\nI suspect that\u0027s going to depend on what the real root cause is.",
      "parentUuid": "bd00b1f4_205d3519",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 14
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "814607f6_9b6a5ec6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2021-03-22T02:04:54Z",
      "side": 1,
      "message": "Take \"power1_input\" for example, hwmon drive still working well to update \"/sys/class/hwmon/hwmon2/power1_input\" but \"async_read_until\" cannot return to callback function.",
      "parentUuid": "2963ed90_7ab565fb",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 14
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20b49ff9_192e06d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-22T18:59:14Z",
      "side": 1,
      "message": "The question is why (and what cause) \"async_read_until\" can\u0027t return?",
      "parentUuid": "814607f6_9b6a5ec6",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 14
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fb937f2_9d7e99bb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2021-03-23T02:32:04Z",
      "side": 1,
      "message": "I don\u0027t know.\nThe correct way, async_read_until will callback when read char \u0027\\n\u0027 (0x0a).\nAt error case, async_read_until cannot callback, but the value still changed in the device file like \"/sys/class/hwmon/hwmon2/power1_input\" and char \u0027\\n\u0027 (0x0a) is there.\n\nroot@intel-obmc:/lib/systemd/system# hexdump /sys/class/hwmon/hwmon2/power1_input \n0000000 3033 3538 3030 3030 0a30               \n000000a\n\n\nSo this patch is to resume async_read_until.",
      "parentUuid": "20b49ff9_192e06d7",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 14
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abdddbad_9fd0af3c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-23T18:27:28Z",
      "side": 1,
      "message": "Sorry, I don\u0027t quite understand, the data showed is for normal/working case, right?  What is the reason that the callback is not called?",
      "parentUuid": "2fb937f2_9d7e99bb",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 14
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c4ab034_3649f091",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-19T21:56:42Z",
      "side": 1,
      "message": "Seems like you are adding the timeout ability for the async_read_until function.\nDepends on what is the root cause of the timeout, can it happen on other descriptor read?\nIt might be beneficial to add a generic \"read with timeout\" function in utility.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 55
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58cf5f1a_2410d8e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T18:14:51Z",
      "side": 1,
      "message": "Are there any documented gaurantees in the kernel for this kind of thing?  I thought there were hwmon knobs for this kind of thing.",
      "parentUuid": "2c4ab034_3649f091",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 55
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "187bd833_102be2a8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-03-19T23:35:25Z",
      "side": 1,
      "message": "could?",
      "range": {
        "startLine": 15,
        "startChar": 11,
        "endLine": 15,
        "endChar": 15
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e5cb8cc_0d912077",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T18:14:51Z",
      "side": 1,
      "message": "This needs a better tested statement, as well as a better root cause.",
      "parentUuid": "187bd833_102be2a8",
      "range": {
        "startLine": 15,
        "startChar": 11,
        "endLine": 15,
        "endChar": 15
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6113fb85_e26c5b45",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-19T21:56:42Z",
      "side": 1,
      "message": "IMO - readTimeoutTimer is a better description of what the timer is for. Same in other places.",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 42
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c255e69_2f9dece6",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-03-19T23:35:25Z",
      "side": 1,
      "message": "Probably want to use steady_timer instead to avoid time change issues.",
      "range": {
        "startLine": 31,
        "startChar": 17,
        "endLine": 31,
        "endChar": 31
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8225309d_a158100c",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T18:14:51Z",
      "side": 1,
      "message": "Because waitTimer is not running when we\u0027re reading, we don\u0027t need a second timer here, just reuse waitTimer.",
      "parentUuid": "6113fb85_e26c5b45",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 42
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e8865ea_1a137a1f",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T18:14:51Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "6c255e69_2f9dece6",
      "range": {
        "startLine": 31,
        "startChar": 17,
        "endLine": 31,
        "endChar": 31
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74c89a4c_fd13dd94",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2021-03-22T02:04:54Z",
      "side": 1,
      "message": "Right could change all timers to steady_timer at one time.",
      "parentUuid": "8e8865ea_1a137a1f",
      "range": {
        "startLine": 31,
        "startChar": 17,
        "endLine": 31,
        "endChar": 31
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5b0acca_8e1d1b02",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-03-19T23:35:25Z",
      "side": 1,
      "message": "expires_from_now is deprecated in favor of expires_after. And might want to prefer std::chrono:: instead of boost::posix_time",
      "range": {
        "startLine": 134,
        "startChar": 14,
        "endLine": 134,
        "endChar": 57
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a926a2a_f454d487",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T18:14:51Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "b5b0acca_8e1d1b02",
      "range": {
        "startLine": 134,
        "startChar": 14,
        "endLine": 134,
        "endChar": 57
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc93e699_f3940d83",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-19T21:56:42Z",
      "side": 1,
      "message": "move before it is used",
      "range": {
        "startLine": 137,
        "startChar": 8,
        "endLine": 137,
        "endChar": 61
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7d7ded8_27526f7d",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T18:14:51Z",
      "side": 1,
      "message": "needs nullptr checked.  This also should go below operation aborted.",
      "parentUuid": "cc93e699_f3940d83",
      "range": {
        "startLine": 137,
        "startChar": 8,
        "endLine": 137,
        "endChar": 61
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a10bec08_a37e9815",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2021-03-22T02:04:54Z",
      "side": 1,
      "message": "Checked it before using at line 142",
      "parentUuid": "a7d7ded8_27526f7d",
      "range": {
        "startLine": 137,
        "startChar": 8,
        "endLine": 137,
        "endChar": 61
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bf1ea45_fa29acd0",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-19T21:56:42Z",
      "side": 1,
      "message": "What ec will line 163 get? Currently, ec is not checked before it is passed to handleResponse(ec), please follow through to make sure it is handled correctly. Looks like setupRead can get called twice: line 150 and line 239.",
      "range": {
        "startLine": 149,
        "startChar": 12,
        "endLine": 149,
        "endChar": 36
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec78feb4_ac556b04",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-20T18:14:51Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "8bf1ea45_fa29acd0",
      "range": {
        "startLine": 149,
        "startChar": 12,
        "endLine": 149,
        "endChar": 36
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88332bd0_0811986c",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2021-03-22T02:04:54Z",
      "side": 1,
      "message": "There is no twice called for setupRead.\nCorrect case: readTimer will be cancelled at line 168.\nIssue case, when async_read_until hang: readTimer will trigger setupRead instead of waitTimer.",
      "parentUuid": "ec78feb4_ac556b04",
      "range": {
        "startLine": 149,
        "startChar": 12,
        "endLine": 149,
        "endChar": 36
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e771c1f_1af3e782",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-22T18:59:14Z",
      "side": 1,
      "message": "I might be missing something, but here is the flow I see:\nafter line 149, line150 get called to setupRead.\nline149 will cause line161 lambda, which does not check ec and call line 170.\nCheck at line190 will fail (need to verify with actual ec was my original comment)\ncode continues and may end up calling at line 239.",
      "parentUuid": "88332bd0_0811986c",
      "range": {
        "startLine": 149,
        "startChar": 12,
        "endLine": 149,
        "endChar": 36
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86e7ccd3_108e5f17",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000218
      },
      "writtenOn": "2021-03-23T02:32:04Z",
      "side": 1,
      "message": "Line149 is to cancel inputDev but not trigger line 161 lambda, also not the coming 170/190.",
      "parentUuid": "7e771c1f_1af3e782",
      "range": {
        "startLine": 149,
        "startChar": 12,
        "endLine": 149,
        "endChar": 36
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7c2648d_0d45a7ea",
        "filename": "src/PSUSensor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2021-03-23T18:27:28Z",
      "side": 1,
      "message": "According to the documentation, the handlers are getting called.\nhttps://www.boost.org/doc/libs/1_70_0/doc/html/boost_asio/reference/posix__basic_stream_descriptor/cancel/overload1.html",
      "parentUuid": "86e7ccd3_108e5f17",
      "range": {
        "startLine": 149,
        "startChar": 12,
        "endLine": 149,
        "endChar": 36
      },
      "revId": "369a10bce9a5a63538a3320f79672d147ba4c22a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}