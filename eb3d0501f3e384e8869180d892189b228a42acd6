{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1fa117df_772fd5dc",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 249,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-30T11:32:10Z",
      "side": 1,
      "message": "Why add the std::move here?\nCan it be a separate patch?",
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "333063a0_41a26d10",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 249,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-01-31T17:18:43Z",
      "side": 1,
      "message": "I was curious on why clang-tidy requested for this. On close inspection, what happened was I added `std::optional\u003csdbusplus::message::object_path\u003e assertedLog;` to `struct Threshold` which made it no longer trivially copy-able. Hence the need for move. Its either that, or make the whichThreshold parameter pass-by-reference.",
      "parentUuid": "1fa117df_772fd5dc",
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c25bbe5f_790cee1f",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 249,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-01-31T22:59:47Z",
      "side": 1,
      "message": "Resolving this if no concerns.",
      "parentUuid": "333063a0_41a26d10",
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18373bb4_6a8dd0f8",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 471,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-30T11:32:10Z",
      "side": 1,
      "message": "if i remember correctly, the generated code for xyz.openbmc_project.Logging.Entry\nshould define a constant for the interface name.",
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3c471c6_9020c5cb",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 471,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-01-31T17:18:43Z",
      "side": 1,
      "message": "This is something which can really move towards using the new lg2::resolve() API.",
      "parentUuid": "18373bb4_6a8dd0f8",
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdd3dfdc_ae80b683",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 471,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-01-31T22:59:47Z",
      "side": 1,
      "message": "Using the builtin resolve method in commit.hpp. Makes this a lot more cleaner.",
      "parentUuid": "c3c471c6_9020c5cb",
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e497bdf_43ab21d7",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 516,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-30T11:32:10Z",
      "side": 1,
      "message": "Why define an inline lambda here?\n\nCan this be a regular function?",
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d68256e2_161ccd4a",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 516,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-01-31T17:18:43Z",
      "side": 1,
      "message": "Nothing preventing it. Let me move it out.",
      "parentUuid": "5e497bdf_43ab21d7",
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79ab971e_6ab4c4ca",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 516,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-01-31T22:59:47Z",
      "side": 1,
      "message": "Moved it out to a function.",
      "parentUuid": "d68256e2_161ccd4a",
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4113a77d_e8ddc72f",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 516,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-02-01T02:11:08Z",
      "side": 1,
      "message": "On second thoughts, I realized I could just use std::find_if instead of rolling my own.",
      "parentUuid": "79ab971e_6ab4c4ca",
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af5fd600_fc1d8f16",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 600,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-30T11:32:10Z",
      "side": 1,
      "message": "That\u0027s a really long switch statement, can this be done using a map, or a separate function?",
      "range": {
        "startLine": 541,
        "startChar": 0,
        "endLine": 600,
        "endChar": 13
      },
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23df9b56_6b8e25fa",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 600,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-01-31T17:18:43Z",
      "side": 1,
      "message": "Yeah.... agreed. this is hard on the eyes. Let me move it into smallish helper functions.",
      "parentUuid": "af5fd600_fc1d8f16",
      "range": {
        "startLine": 541,
        "startChar": 0,
        "endLine": 600,
        "endChar": 13
      },
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63a51c17_5f02eafd",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 600,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-01-31T17:26:31Z",
      "side": 1,
      "message": "Since these are almost identical except for the enum values and type, you might be able to make a template function for a lot of this.\n\n```\nassertThreshold\u003cLevel::SOFTSHUTDOWN, Errors::ReadingAboveUpperSoftShutdownThreshold, Errors::ReadingBelowLowerSoftShutdownThreshold\u003e(direction, threhsold-\u003eassertedLog);\n```\n\nIf you structure it right you might just be able to make N calls to this template and not worry about it being a switch-case statement.",
      "parentUuid": "23df9b56_6b8e25fa",
      "range": {
        "startLine": 541,
        "startChar": 0,
        "endLine": 600,
        "endChar": 13
      },
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e58e358e_0935e7f7",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 600,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-01-31T22:59:47Z",
      "side": 1,
      "message": "Moved it to helper function. Im sure it can be prettier.",
      "parentUuid": "63a51c17_5f02eafd",
      "range": {
        "startLine": 541,
        "startChar": 0,
        "endLine": 600,
        "endChar": 13
      },
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dc9f497_b3f5e3b3",
        "filename": "src/Thresholds.cpp",
        "patchSetId": 9
      },
      "lineNbr": 600,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-02-01T02:11:08Z",
      "side": 1,
      "message": "Thanks Patrick for the suggestion. Was able to make it much more easier to read using templates.",
      "parentUuid": "e58e358e_0935e7f7",
      "range": {
        "startLine": 541,
        "startChar": 0,
        "endLine": 600,
        "endChar": 13
      },
      "revId": "eb3d0501f3e384e8869180d892189b228a42acd6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}