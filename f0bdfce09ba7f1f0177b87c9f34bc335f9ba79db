{
  "comments": [
    {
      "key": {
        "uuid": "c4b63213_4189a774",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T04:08:08Z",
      "side": 1,
      "message": "const please.",
      "range": {
        "startLine": 23,
        "startChar": 26,
        "endLine": 23,
        "endChar": 42
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ad3edfc_e348cdf9",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 23,
      "author": {
        "id": 1000675
      },
      "writtenOn": "2020-10-08T06:42:34Z",
      "side": 1,
      "message": "Are you sure that const object of string_view is necessary? I\u0027d say when using reference to object the `const` is welcome. The std::string_view already allows only reading operation the string value. May I ask to check again to be sure, thanks",
      "parentUuid": "c4b63213_4189a774",
      "range": {
        "startLine": 23,
        "startChar": 26,
        "endLine": 23,
        "endChar": 42
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7417c556_19d55ff8",
        "filename": "include/PSUSensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T16:28:55Z",
      "side": 1,
      "message": "I guess that\u0027s a good point.  Sure, fine as-is.",
      "parentUuid": "4ad3edfc_e348cdf9",
      "range": {
        "startLine": 23,
        "startChar": 26,
        "endLine": 23,
        "endChar": 42
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "479d3e55_be5c6871",
        "filename": "include/sensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 122,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T04:08:08Z",
      "side": 1,
      "message": "Please check out COMMON_ERRORS.md  This is one of them.",
      "range": {
        "startLine": 122,
        "startChar": 62,
        "endLine": 122,
        "endChar": 66
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a576e685_27cc5f3c",
        "filename": "include/sensor.hpp",
        "patchSetId": 10
      },
      "lineNbr": 122,
      "author": {
        "id": 1000675
      },
      "writtenOn": "2020-10-08T06:42:34Z",
      "side": 1,
      "message": "Sure, I got it, thanks",
      "parentUuid": "479d3e55_be5c6871",
      "range": {
        "startLine": 122,
        "startChar": 62,
        "endLine": 122,
        "endChar": 66
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4925622f_d8b131ea",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T04:08:08Z",
      "side": 1,
      "message": "I don\u0027t like that on some sensors we\u0027re constructing with one type, then changing it in the constructor.  Overall, I\u0027d really like it if dbus-sensors used composition, not inheritance, but I\u0027m guessing you don\u0027t want to do that kind of rework.\n\nI wonder if it would make sense to move the unit into the \"setInitialProperties\" method, so implementations can select it at will, and we\u0027re not adjusting it mid-construction.",
      "range": {
        "startLine": 64,
        "startChar": 16,
        "endLine": 64,
        "endChar": 47
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8c89897_68485669",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 64,
      "author": {
        "id": 1000675
      },
      "writtenOn": "2020-10-08T06:42:34Z",
      "side": 1,
      "message": "I\u0027m not sure that changing of sensorUnit property at construct object stage is only one problem. Let\u0027s look to initializing `interfacePath` by type or adjust thresholds, even in CPUSensor case. I\u0027m think that change of sesnorUnit is small of many evils, because by natural of self, this is must be the CPU sensor, but with a large of wish a can\u0027t name it so. Follow of saing, on the half way to construct CPU object we having change sensorUnit by incoming type which change a purpose of the entire object. \n\nSummary, I\u0027m sure that described changes are part of the not-well design OOP. \nNote: I am ready to do work in this direction, if we can define an entrypoint for that.",
      "parentUuid": "4925622f_d8b131ea",
      "range": {
        "startLine": 64,
        "startChar": 16,
        "endLine": 64,
        "endChar": 47
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b20b9532_688e942f",
        "filename": "src/CPUSensor.cpp",
        "patchSetId": 10
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T16:28:55Z",
      "side": 1,
      "message": "\u003e I\u0027m not sure that changing of sensorUnit property at construct object stage is only one problem. Let\u0027s look to initializing `interfacePath` by type or adjust thresholds, even in CPUSensor case. I\u0027m think that change of sesnorUnit is small of many evils, because by natural of self, this is must be the CPU sensor, but with a large of wish a can\u0027t name it so. Follow of saing, on the half way to construct CPU object we having change sensorUnit by incoming type which change a purpose of the entire object. \n\u003e \n\u003e Summary, I\u0027m sure that described changes are part of the not-well design OOP. \n\u003e Note: I am ready to do work in this direction, if we can define an entrypoint for that.\n\nThe other thought I had: what if we removed it from the Sensor constructor, and just made it a protected member that\u0027s set during the derived constructor.  Then:\n1. The Sensor constructor gets smaller (it\u0027s already too big).\n2. We\u0027re being consistent in every sensor about where we set units.\n3. We don\u0027t have to do a major refactor.\n\n\nWhat do you think?",
      "parentUuid": "f8c89897_68485669",
      "range": {
        "startLine": 64,
        "startChar": 16,
        "endLine": 64,
        "endChar": 47
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a8a521d_f79612aa",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T04:08:08Z",
      "side": 1,
      "message": "Please just inline these to improve the clarity.",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 67,
        "endChar": 36
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e31da852_a9d0edab",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 67,
      "author": {
        "id": 1000675
      },
      "writtenOn": "2020-10-08T06:42:34Z",
      "side": 1,
      "message": "I was thinking that using aliases by \"using\" directive adds more clearly a meaning of a declaring type. But, ok, I\u0027ll change to inline std::string_view, if your wish, Thanks",
      "parentUuid": "1a8a521d_f79612aa",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 67,
        "endChar": 36
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "046b7db3_309c6eaa",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 67,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T16:28:55Z",
      "side": 1,
      "message": "As a general rule, it obfuscates the actual type, and provides negligible safety.  IMO you\u0027re better off letting your variable name describe your type.",
      "parentUuid": "e31da852_a9d0edab",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 67,
        "endChar": 36
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1369fe2_51cacfdc",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 68,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T04:08:08Z",
      "side": 1,
      "message": "Please make this a proper struct.  Tuple is not necessary here.",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 58
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66ba141d_5cacd781",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 68,
      "author": {
        "id": 1000675
      },
      "writtenOn": "2020-10-08T06:42:34Z",
      "side": 1,
      "message": "What is bad to use the tuple in this case. Should I implement real struct or can use a std::pair? I\u0027m not end-understand this remark",
      "parentUuid": "c1369fe2_51cacfdc",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 58
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be94d00e_d27c1566",
        "filename": "src/PSUSensorMain.cpp",
        "patchSetId": 10
      },
      "lineNbr": 68,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-08T16:28:55Z",
      "side": 1,
      "message": "Tuple is generally used when you need do do some template-level introspection on your data type, or want to use some of its base features to reduce code, like std::equals overloads.  Same thing (to a much lesser extent) with std::pair.  Because of the nature of tuple, it also means that the code gets peppered with:\n\nstd::get\u003c0\u003e(mySensor);\ncalls in a lot of places.  0 is a magic number, and needs looked up when reading the code to find the type.\n\nIf this were a struct, it would be\n\nstruct SensorMetadata{\n    std::string type;\n    std::string unit;\n}\n\nWhich means the code that uses it calls:\n\nmySensor.type;\nWhich is much more clear than the std::get equivalent.",
      "parentUuid": "66ba141d_5cacd781",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 58
      },
      "revId": "f0bdfce09ba7f1f0177b87c9f34bc335f9ba79db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}