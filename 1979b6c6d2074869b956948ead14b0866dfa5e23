{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c8ed61e6_74a64e67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-09-27T00:47:16Z",
      "side": 1,
      "message": "Oh, and https://gerrit.openbmc.org/c/openbmc/entity-manager/+/56128 should probably also get merged in the same SRCREV bump as this to avoid having hwmontempsensor and E-M fighting over who\u0027s in charge.",
      "revId": "1979b6c6d2074869b956948ead14b0866dfa5e23",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "730fff13_a98579a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-10-04T08:10:34Z",
      "side": 1,
      "message": "Ping Ed?",
      "revId": "1979b6c6d2074869b956948ead14b0866dfa5e23",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b9a78b7_8e54ab89",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 25
      },
      "lineNbr": 622,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-10-07T13:21:30Z",
      "side": 1,
      "message": "Just to be sure I\u0027m reading this right, you\u0027re removing the sensor from D-Bus when the power is off?  That\u0027s different than the current power state checking, which just sets the sensors to NaN.  Why did you choose to go this way?",
      "range": {
        "startLine": 622,
        "startChar": 16,
        "endLine": 622,
        "endChar": 33
      },
      "revId": "1979b6c6d2074869b956948ead14b0866dfa5e23",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10be3a3a_f63a4185",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 25
      },
      "lineNbr": 622,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-10-07T21:10:10Z",
      "side": 1,
      "message": "Yes, as it is now sensors whose power state isn\u0027t matched get removed entirely.  I had initially set out to merely deactivate them but leave them in place because I thought that having them disappear would cause problems for phosphor-pid-control (see discussion on https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/56022), but (a) I later discovered that removing them didn\u0027t actually cause the swampd problems I had been thinking it would, and (b) it aligned nicely with the object-lifetime-based device-management approach Ed suggested.\n\nAre there other (non-swampd) current consumers of the dbus interface that would be broken by this approach?\n\nThere\u0027s also the slight edge case of its behavior when the service starts while the host is powered off.  With this approach it\u0027s consistent (the dbus object\u0027s presence is purely a function of whether or not the host is powered on), but in the \"leave present but disabled\" model we end up with an inconsistency in that the dbus objects are absent until the host is first powered on and then remain present from that point forward across arbitrary power state changes, leaving \"host hasn\u0027t powered on yet\" as sort of a weird special-case state (and one that it seems would also break any clients that would be broken by this approach when the host shuts down).\n\nI guess I don\u0027t have any real strongly-held opinions on which way to go here, so I\u0027d be curious to hear any other thoughts on this.  (Ed, Andrew?)",
      "parentUuid": "8b9a78b7_8e54ab89",
      "range": {
        "startLine": 622,
        "startChar": 16,
        "endLine": 622,
        "endChar": 33
      },
      "revId": "1979b6c6d2074869b956948ead14b0866dfa5e23",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37e25e3a_9a288bf3",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 25
      },
      "lineNbr": 622,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-10-08T17:13:05Z",
      "side": 1,
      "message": "This behavior has other problems.\n\nIt doesn\u0027t match with the intent of either IPMI or Redfish.  Resources (sensors in this case) that are unavailable are supposed to be using the purpose-built unavailable statuses.  in terms of swampd, yeah, I could see it not being a problem, but the main driver for this behavior is users, and principal of least surprise.\n\nI would expect the dbus paths to continue to exist all the time.  The only time I would expect the sensors to be completely deleted is in a hot plug scenario, which we admittedly don\u0027t handle very well.",
      "parentUuid": "10be3a3a_f63a4185",
      "range": {
        "startLine": 622,
        "startChar": 16,
        "endLine": 622,
        "endChar": 33
      },
      "revId": "1979b6c6d2074869b956948ead14b0866dfa5e23",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d91e0a5a_a9aaa93b",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 25
      },
      "lineNbr": 622,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-10-10T22:32:23Z",
      "side": 1,
      "message": "Okay, so in that case I guess I should look into having the dbus objects get instantiated unconditionally as well (in addition to not deleting them), to address the host-hasn\u0027t-booted-yet problem...",
      "parentUuid": "37e25e3a_9a288bf3",
      "range": {
        "startLine": 622,
        "startChar": 16,
        "endLine": 622,
        "endChar": 33
      },
      "revId": "1979b6c6d2074869b956948ead14b0866dfa5e23",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d15cd37a_8b722427",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 25
      },
      "lineNbr": 622,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-10-13T21:22:26Z",
      "side": 1,
      "message": "...alright, having now started taking a stab at implementing that, I\u0027ve realized a tricky problem:  before a given sensor is actually instantiated, we don\u0027t really know its type/units, and hence can\u0027t easily determine what dbus path to create the object at (e.g. should it be /xyz/openbmc_project/sensors/temperature/foo or /xyz/openbmc_project/sensors/pressure/foo?).\n\nI can see a number of possible paths to take here, but none of them are terribly appealing.  Thinking out loud in no particular order:\n\n  1. We could use some placeholder \"unknown\" type/unit until it\u0027s determined conclusively.  The dbus object would need to get deleted/recreated though (don\u0027t know offhand if dbus has a \"rename\" type of operation); not sure if/how much that would defeat the purpose.  PDI would presumably need updating, possibly some clients might need changes to accommodate it as well?\n  \n  2. In this particular case (hwmontempsensor) we could just assume it\u0027s a temperature sensor and delete/recreate later if that turns out to be wrong.  Downsides are that it might initially be wrong (and of course doesn\u0027t totally eliminate the delete/recreate problem).  It\u0027s also fairly specific to hwmontempsensor; if/when we try to extend this model to other dbus-sensors daemons there might not be an obvious default type.\n  \n  3. We could try to infer the type from the sensor\u0027s name (e.g. substring match on things like \"press\", \"temp\", \"hum\"...).  Kind of nauseating, but from what I can see in E-M it could work for all existing configs I think.\n  \n  4. We could rip out the IIO/non-temperature support and move it to some other dbus-sensors daemon, leaving hwmontempsensor handling only temperature sensors.  Is there another daemon that could reasonably accommodate it though?  Would it become a new daemon unto itself?  Also has the same \"only solves the problem for hwmontempsensor\" problem as #2 above.\n  \n  5. We could delay instantiating the dbus object until the first time the underlying sensor device is instantiated.  It\u0027d be an unfortunate inconsistency, and would create a significant gap in the intent of aligning with IPMI/Redfish requirements.\n  \n  6. We could add explicit type/unit metadata to the E-M config schema.  Maybe the \"cleanest\" option, but also more invasive, and unnecessary in the common case (though perhaps it could be optional).\n  \nSo I dunno...any thoughts on which of those would be the most palatable?  Or other possibilities I missed?",
      "parentUuid": "d91e0a5a_a9aaa93b",
      "range": {
        "startLine": 622,
        "startChar": 16,
        "endLine": 622,
        "endChar": 33
      },
      "revId": "1979b6c6d2074869b956948ead14b0866dfa5e23",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ded2f24d_11919884",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 25
      },
      "lineNbr": 622,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-10-13T21:36:00Z",
      "side": 1,
      "message": "I suspect it\u0027d be OK to not create the sensor until the system powers on for the first time.  I imagine that\u0027s how the CPUSensor daemons work too.",
      "parentUuid": "d15cd37a_8b722427",
      "range": {
        "startLine": 622,
        "startChar": 16,
        "endLine": 622,
        "endChar": 33
      },
      "revId": "1979b6c6d2074869b956948ead14b0866dfa5e23",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c735909_5cc9b3c0",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 25
      },
      "lineNbr": 622,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-10-13T22:55:59Z",
      "side": 1,
      "message": "Yeah, now that you mention it I\u0027m pretty sure that\u0027s true...so while perhaps not ideal, I guess it\u0027d at least be no worse than the status quo -- I\u0027ll proceed with that then I suppose.",
      "parentUuid": "ded2f24d_11919884",
      "range": {
        "startLine": 622,
        "startChar": 16,
        "endLine": 622,
        "endChar": 33
      },
      "revId": "1979b6c6d2074869b956948ead14b0866dfa5e23",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad2bcbde_9652ca46",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 25
      },
      "lineNbr": 622,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-10-14T08:25:21Z",
      "side": 1,
      "message": "Alright, latest patchset implements that approach -- sensors aren\u0027t there initially, but do get populated when the host is powered on, and remain present (but unavailable/NaN) when the host shuts down.",
      "parentUuid": "1c735909_5cc9b3c0",
      "range": {
        "startLine": 622,
        "startChar": 16,
        "endLine": 622,
        "endChar": 33
      },
      "revId": "1979b6c6d2074869b956948ead14b0866dfa5e23",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "960326e9_a7fc29fa",
        "filename": "src/HwmonTempMain.cpp",
        "patchSetId": 25
      },
      "lineNbr": 622,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2022-10-17T19:10:00Z",
      "side": 1,
      "message": "This behavior make sense to me.",
      "parentUuid": "ad2bcbde_9652ca46",
      "range": {
        "startLine": 622,
        "startChar": 16,
        "endLine": 622,
        "endChar": 33
      },
      "revId": "1979b6c6d2074869b956948ead14b0866dfa5e23",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}